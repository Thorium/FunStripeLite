namespace FunStripe

open FunStripe.Json
open FunStripe.Json.Util
open System

module StripeModel =

    ///This is an object representing a Stripe account. You can retrieve it to see
    ///properties on the account like its current requirements or if the account is
    ///enabled to make live charges or receive payouts.
    ///For Custom accounts, the properties below are always returned. For other accounts, some properties are returned until that
    ///account has started to go through Connect Onboarding. Once you create an [Account Link](https://stripe.com/docs/api/account_links)
    ///for a Standard or Express account, some parameters are no longer returned. These are marked as **Custom Only** or **Custom and Express**
    ///below. Learn about the differences [between accounts](https://stripe.com/docs/connect/accounts).
    type Account = {
        ///Business information about the account.
        BusinessProfile: AccountBusinessProfile option
        ///The business type.
        BusinessType: AccountBusinessType option
        Capabilities: AccountCapabilities option
        ///Whether the account can create live charges.
        ChargesEnabled: bool option
        Company: LegalEntityCompany option
        Controller: AccountUnificationAccountController option
        ///The account's country.
        Country: string option
        ///Time at which the account was connected. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime option
        ///Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
        DefaultCurrency: string option
        ///Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
        DetailsSubmitted: bool option
        ///An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform.
        Email: string option
        ///External accounts (bank accounts and debit cards) currently attached to this account
        ExternalAccounts: AccountExternalAccounts option
        FutureRequirements: AccountFutureRequirements option
        ///Unique identifier for the object.
        Id: string
        Individual: Person option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Whether Stripe can send payouts to this account.
        PayoutsEnabled: bool option
        Requirements: AccountRequirements option
        ///Options for customizing how the account functions within Stripe.
        Settings: AccountSettings option
        TosAcceptance: AccountTosAcceptance option
        ///The Stripe account type. Can be `standard`, `express`, or `custom`.
        Type: AccountType option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "account"

        static member New (id: string, ?businessProfile: AccountBusinessProfile option, ?businessType: AccountBusinessType option, ?capabilities: AccountCapabilities, ?chargesEnabled: bool, ?company: LegalEntityCompany, ?controller: AccountUnificationAccountController, ?country: string, ?created: DateTime, ?defaultCurrency: string, ?detailsSubmitted: bool, ?email: string option, ?externalAccounts: AccountExternalAccounts, ?futureRequirements: AccountFutureRequirements, ?individual: Person, ?metadata: Map<string, string>, ?payoutsEnabled: bool, ?requirements: AccountRequirements, ?settings: AccountSettings option, ?tosAcceptance: AccountTosAcceptance, ?``type``: AccountType) =
            {
                Account.Id = id //required
                Account.BusinessProfile = businessProfile |> Option.flatten
                Account.BusinessType = businessType |> Option.flatten
                Account.Capabilities = capabilities
                Account.ChargesEnabled = chargesEnabled
                Account.Company = company
                Account.Controller = controller
                Account.Country = country
                Account.Created = created
                Account.DefaultCurrency = defaultCurrency
                Account.DetailsSubmitted = detailsSubmitted
                Account.Email = email |> Option.flatten
                Account.ExternalAccounts = externalAccounts
                Account.FutureRequirements = futureRequirements
                Account.Individual = individual
                Account.Metadata = metadata
                Account.PayoutsEnabled = payoutsEnabled
                Account.Requirements = requirements
                Account.Settings = settings |> Option.flatten
                Account.TosAcceptance = tosAcceptance
                Account.Type = ``type``
            }

    and AccountBusinessType =
        | Company
        | GovernmentEntity
        | Individual
        | NonProfit

    and AccountType =
        | Custom
        | Express
        | Standard

    ///External accounts (bank accounts and debit cards) currently attached to this account
    and AccountExternalAccounts = {
        ///The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
        Data: ExternalAccount list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: ExternalAccount list, hasMore: bool, url: string) =
            {
                AccountExternalAccounts.Data = data //required
                AccountExternalAccounts.HasMore = hasMore //required
                AccountExternalAccounts.Url = url //required
            }

    and AccountBacsDebitPaymentsSettings = {
        ///The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
        DisplayName: string option
    }
    with
        static member New (?displayName: string) =
            {
                AccountBacsDebitPaymentsSettings.DisplayName = displayName
            }

    and AccountBrandingSettings = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
        Icon: AccountBrandingSettingsIcon'AnyOf option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
        Logo: AccountBrandingSettingsLogo'AnyOf option
        ///A CSS hex color value representing the primary branding color for this account
        PrimaryColor: string option
        ///A CSS hex color value representing the secondary branding color for this account
        SecondaryColor: string option
    }
    with
        static member New (icon: AccountBrandingSettingsIcon'AnyOf option, logo: AccountBrandingSettingsLogo'AnyOf option, primaryColor: string option, secondaryColor: string option) =
            {
                AccountBrandingSettings.Icon = icon //required
                AccountBrandingSettings.Logo = logo //required
                AccountBrandingSettings.PrimaryColor = primaryColor //required
                AccountBrandingSettings.SecondaryColor = secondaryColor //required
            }

    and AccountBrandingSettingsIcon'AnyOf =
        | String of string
        | File of File

    and AccountBrandingSettingsLogo'AnyOf =
        | String of string
        | File of File

    and AccountBusinessProfile = {
        ///[The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
        Mcc: string option
        MonthlyEstimatedRevenue: AccountMonthlyEstimatedRevenue option
        ///The customer-facing business name.
        Name: string option
        ///Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
        ProductDescription: string option
        ///A publicly available mailing address for sending support issues to.
        SupportAddress: Address option
        ///A publicly available email address for sending support issues to.
        SupportEmail: string option
        ///A publicly available phone number to call with support issues.
        SupportPhone: string option
        ///A publicly available website for handling support issues.
        SupportUrl: string option
        ///The business's publicly available website.
        Url: string option
    }
    with
        static member New (mcc: string option, name: string option, supportAddress: Address option, supportEmail: string option, supportPhone: string option, supportUrl: string option, url: string option, ?monthlyEstimatedRevenue: AccountMonthlyEstimatedRevenue, ?productDescription: string option) =
            {
                AccountBusinessProfile.Mcc = mcc //required
                AccountBusinessProfile.Name = name //required
                AccountBusinessProfile.SupportAddress = supportAddress //required
                AccountBusinessProfile.SupportEmail = supportEmail //required
                AccountBusinessProfile.SupportPhone = supportPhone //required
                AccountBusinessProfile.SupportUrl = supportUrl //required
                AccountBusinessProfile.Url = url //required
                AccountBusinessProfile.MonthlyEstimatedRevenue = monthlyEstimatedRevenue
                AccountBusinessProfile.ProductDescription = productDescription |> Option.flatten
            }

    and AccountCapabilities = {
        ///The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
        AcssDebitPayments: AccountCapabilitiesAcssDebitPayments option
        ///The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
        AffirmPayments: AccountCapabilitiesAffirmPayments option
        ///The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
        AfterpayClearpayPayments: AccountCapabilitiesAfterpayClearpayPayments option
        ///The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
        AuBecsDebitPayments: AccountCapabilitiesAuBecsDebitPayments option
        ///The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
        BacsDebitPayments: AccountCapabilitiesBacsDebitPayments option
        ///The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
        BancontactPayments: AccountCapabilitiesBancontactPayments option
        ///The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
        BankTransferPayments: AccountCapabilitiesBankTransferPayments option
        ///The status of the blik payments capability of the account, or whether the account can directly process blik charges.
        BlikPayments: AccountCapabilitiesBlikPayments option
        ///The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
        BoletoPayments: AccountCapabilitiesBoletoPayments option
        ///The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
        CardIssuing: AccountCapabilitiesCardIssuing option
        ///The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
        CardPayments: AccountCapabilitiesCardPayments option
        ///The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
        CartesBancairesPayments: AccountCapabilitiesCartesBancairesPayments option
        ///The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
        CashappPayments: AccountCapabilitiesCashappPayments option
        ///The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
        EpsPayments: AccountCapabilitiesEpsPayments option
        ///The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
        FpxPayments: AccountCapabilitiesFpxPayments option
        ///The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
        GiropayPayments: AccountCapabilitiesGiropayPayments option
        ///The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
        GrabpayPayments: AccountCapabilitiesGrabpayPayments option
        ///The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
        IdealPayments: AccountCapabilitiesIdealPayments option
        ///The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
        IndiaInternationalPayments: AccountCapabilitiesIndiaInternationalPayments option
        ///The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
        JcbPayments: AccountCapabilitiesJcbPayments option
        ///The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
        KlarnaPayments: AccountCapabilitiesKlarnaPayments option
        ///The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
        KonbiniPayments: AccountCapabilitiesKonbiniPayments option
        ///The status of the legacy payments capability of the account.
        LegacyPayments: AccountCapabilitiesLegacyPayments option
        ///The status of the link_payments capability of the account, or whether the account can directly process Link charges.
        LinkPayments: AccountCapabilitiesLinkPayments option
        ///The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
        OxxoPayments: AccountCapabilitiesOxxoPayments option
        ///The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
        [<JsonField(Name="p24_payments")>]P24Payments: AccountCapabilitiesP24Payments option
        ///The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
        PaynowPayments: AccountCapabilitiesPaynowPayments option
        ///The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
        PromptpayPayments: AccountCapabilitiesPromptpayPayments option
        ///The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
        SepaDebitPayments: AccountCapabilitiesSepaDebitPayments option
        ///The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
        SofortPayments: AccountCapabilitiesSofortPayments option
        ///The status of the tax reporting 1099-K (US) capability of the account.
        [<JsonField(Name="tax_reporting_us_1099_k")>]TaxReportingUs1099K: AccountCapabilitiesTaxReportingUs1099K option
        ///The status of the tax reporting 1099-MISC (US) capability of the account.
        [<JsonField(Name="tax_reporting_us_1099_misc")>]TaxReportingUs1099Misc: AccountCapabilitiesTaxReportingUs1099Misc option
        ///The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
        Transfers: AccountCapabilitiesTransfers option
        ///The status of the banking capability, or whether the account can have bank accounts.
        Treasury: AccountCapabilitiesTreasury option
        ///The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
        UsBankAccountAchPayments: AccountCapabilitiesUsBankAccountAchPayments option
        ///The status of the Zip capability of the account, or whether the account can directly process Zip charges.
        ZipPayments: AccountCapabilitiesZipPayments option
    }
    with
        static member New (?acssDebitPayments: AccountCapabilitiesAcssDebitPayments, ?affirmPayments: AccountCapabilitiesAffirmPayments, ?afterpayClearpayPayments: AccountCapabilitiesAfterpayClearpayPayments, ?auBecsDebitPayments: AccountCapabilitiesAuBecsDebitPayments, ?bacsDebitPayments: AccountCapabilitiesBacsDebitPayments, ?bancontactPayments: AccountCapabilitiesBancontactPayments, ?bankTransferPayments: AccountCapabilitiesBankTransferPayments, ?blikPayments: AccountCapabilitiesBlikPayments, ?boletoPayments: AccountCapabilitiesBoletoPayments, ?cardIssuing: AccountCapabilitiesCardIssuing, ?cardPayments: AccountCapabilitiesCardPayments, ?cartesBancairesPayments: AccountCapabilitiesCartesBancairesPayments, ?cashappPayments: AccountCapabilitiesCashappPayments, ?epsPayments: AccountCapabilitiesEpsPayments, ?fpxPayments: AccountCapabilitiesFpxPayments, ?giropayPayments: AccountCapabilitiesGiropayPayments, ?grabpayPayments: AccountCapabilitiesGrabpayPayments, ?idealPayments: AccountCapabilitiesIdealPayments, ?indiaInternationalPayments: AccountCapabilitiesIndiaInternationalPayments, ?jcbPayments: AccountCapabilitiesJcbPayments, ?klarnaPayments: AccountCapabilitiesKlarnaPayments, ?konbiniPayments: AccountCapabilitiesKonbiniPayments, ?legacyPayments: AccountCapabilitiesLegacyPayments, ?linkPayments: AccountCapabilitiesLinkPayments, ?oxxoPayments: AccountCapabilitiesOxxoPayments, ?p24Payments: AccountCapabilitiesP24Payments, ?paynowPayments: AccountCapabilitiesPaynowPayments, ?promptpayPayments: AccountCapabilitiesPromptpayPayments, ?sepaDebitPayments: AccountCapabilitiesSepaDebitPayments, ?sofortPayments: AccountCapabilitiesSofortPayments, ?taxReportingUs1099K: AccountCapabilitiesTaxReportingUs1099K, ?taxReportingUs1099Misc: AccountCapabilitiesTaxReportingUs1099Misc, ?transfers: AccountCapabilitiesTransfers, ?treasury: AccountCapabilitiesTreasury, ?usBankAccountAchPayments: AccountCapabilitiesUsBankAccountAchPayments, ?zipPayments: AccountCapabilitiesZipPayments) =
            {
                AccountCapabilities.AcssDebitPayments = acssDebitPayments
                AccountCapabilities.AffirmPayments = affirmPayments
                AccountCapabilities.AfterpayClearpayPayments = afterpayClearpayPayments
                AccountCapabilities.AuBecsDebitPayments = auBecsDebitPayments
                AccountCapabilities.BacsDebitPayments = bacsDebitPayments
                AccountCapabilities.BancontactPayments = bancontactPayments
                AccountCapabilities.BankTransferPayments = bankTransferPayments
                AccountCapabilities.BlikPayments = blikPayments
                AccountCapabilities.BoletoPayments = boletoPayments
                AccountCapabilities.CardIssuing = cardIssuing
                AccountCapabilities.CardPayments = cardPayments
                AccountCapabilities.CartesBancairesPayments = cartesBancairesPayments
                AccountCapabilities.CashappPayments = cashappPayments
                AccountCapabilities.EpsPayments = epsPayments
                AccountCapabilities.FpxPayments = fpxPayments
                AccountCapabilities.GiropayPayments = giropayPayments
                AccountCapabilities.GrabpayPayments = grabpayPayments
                AccountCapabilities.IdealPayments = idealPayments
                AccountCapabilities.IndiaInternationalPayments = indiaInternationalPayments
                AccountCapabilities.JcbPayments = jcbPayments
                AccountCapabilities.KlarnaPayments = klarnaPayments
                AccountCapabilities.KonbiniPayments = konbiniPayments
                AccountCapabilities.LegacyPayments = legacyPayments
                AccountCapabilities.LinkPayments = linkPayments
                AccountCapabilities.OxxoPayments = oxxoPayments
                AccountCapabilities.P24Payments = p24Payments
                AccountCapabilities.PaynowPayments = paynowPayments
                AccountCapabilities.PromptpayPayments = promptpayPayments
                AccountCapabilities.SepaDebitPayments = sepaDebitPayments
                AccountCapabilities.SofortPayments = sofortPayments
                AccountCapabilities.TaxReportingUs1099K = taxReportingUs1099K
                AccountCapabilities.TaxReportingUs1099Misc = taxReportingUs1099Misc
                AccountCapabilities.Transfers = transfers
                AccountCapabilities.Treasury = treasury
                AccountCapabilities.UsBankAccountAchPayments = usBankAccountAchPayments
                AccountCapabilities.ZipPayments = zipPayments
            }

    and AccountCapabilitiesAcssDebitPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesAffirmPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesAfterpayClearpayPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesAuBecsDebitPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesBacsDebitPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesBancontactPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesBankTransferPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesBlikPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesBoletoPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesCardIssuing =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesCardPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesCartesBancairesPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesCashappPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesEpsPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesFpxPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesGiropayPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesGrabpayPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesIdealPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesIndiaInternationalPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesJcbPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesKlarnaPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesKonbiniPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesLegacyPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesLinkPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesOxxoPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesP24Payments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesPaynowPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesPromptpayPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesSepaDebitPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesSofortPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesTaxReportingUs1099K =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesTaxReportingUs1099Misc =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesTransfers =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesTreasury =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesUsBankAccountAchPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilitiesZipPayments =
        | Active
        | Inactive
        | Pending

    and AccountCapabilityFutureRequirements = {
        ///Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
        Alternatives: AccountRequirementsAlternative list option
        ///Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CurrentDeadline: DateTime option
        ///Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
        CurrentlyDue: string list
        ///This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
        DisabledReason: string option
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list
        ///Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
        EventuallyDue: string list
        ///Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
        PastDue: string list
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
        PendingVerification: string list
    }
    with
        static member New (alternatives: AccountRequirementsAlternative list option, currentDeadline: DateTime option, currentlyDue: string list, disabledReason: string option, errors: AccountRequirementsError list, eventuallyDue: string list, pastDue: string list, pendingVerification: string list) =
            {
                AccountCapabilityFutureRequirements.Alternatives = alternatives //required
                AccountCapabilityFutureRequirements.CurrentDeadline = currentDeadline //required
                AccountCapabilityFutureRequirements.CurrentlyDue = currentlyDue //required
                AccountCapabilityFutureRequirements.DisabledReason = disabledReason //required
                AccountCapabilityFutureRequirements.Errors = errors //required
                AccountCapabilityFutureRequirements.EventuallyDue = eventuallyDue //required
                AccountCapabilityFutureRequirements.PastDue = pastDue //required
                AccountCapabilityFutureRequirements.PendingVerification = pendingVerification //required
            }

    and AccountCapabilityRequirements = {
        ///Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
        Alternatives: AccountRequirementsAlternative list option
        ///Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CurrentDeadline: DateTime option
        ///Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
        CurrentlyDue: string list
        ///If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
        ///`rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
        ///- [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
        ///If you believe that the rejection is in error, please contact support at https://support.stripe.com/contact/ for assistance.
        DisabledReason: AccountCapabilityRequirementsDisabledReason option
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list
        ///Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
        EventuallyDue: string list
        ///Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
        PastDue: string list
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
        PendingVerification: string list
    }
    with
        static member New (alternatives: AccountRequirementsAlternative list option, currentDeadline: DateTime option, currentlyDue: string list, disabledReason: AccountCapabilityRequirementsDisabledReason option, errors: AccountRequirementsError list, eventuallyDue: string list, pastDue: string list, pendingVerification: string list) =
            {
                AccountCapabilityRequirements.Alternatives = alternatives //required
                AccountCapabilityRequirements.CurrentDeadline = currentDeadline //required
                AccountCapabilityRequirements.CurrentlyDue = currentlyDue //required
                AccountCapabilityRequirements.DisabledReason = disabledReason //required
                AccountCapabilityRequirements.Errors = errors //required
                AccountCapabilityRequirements.EventuallyDue = eventuallyDue //required
                AccountCapabilityRequirements.PastDue = pastDue //required
                AccountCapabilityRequirements.PendingVerification = pendingVerification //required
            }

    and AccountCapabilityRequirementsDisabledReason =
        | [<JsonUnionCase("requirements.past_due")>] RequirementsPastDue
        | [<JsonUnionCase("requirements.pending_verification")>] RequirementsPendingVerification
        | Listed
        | PlatformPaused
        | [<JsonUnionCase("rejected.fraud")>] RejectedFraud
        | [<JsonUnionCase("rejected.listed")>] RejectedListed
        | [<JsonUnionCase("rejected.terms_of_service")>] RejectedTermsOfService
        | [<JsonUnionCase("rejected.other")>] RejectedOther
        | UnderReview
        | Other

    and AccountCardIssuingSettings = {
        TosAcceptance: CardIssuingAccountTermsOfService option
    }
    with
        static member New (?tosAcceptance: CardIssuingAccountTermsOfService) =
            {
                AccountCardIssuingSettings.TosAcceptance = tosAcceptance
            }

    and AccountCardPaymentsSettings = {
        DeclineOn: AccountDeclineChargeOn option
        ///The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
        StatementDescriptorPrefix: string option
        ///The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
        StatementDescriptorPrefixKana: string option
        ///The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
        StatementDescriptorPrefixKanji: string option
    }
    with
        static member New (statementDescriptorPrefix: string option, statementDescriptorPrefixKana: string option, statementDescriptorPrefixKanji: string option, ?declineOn: AccountDeclineChargeOn) =
            {
                AccountCardPaymentsSettings.StatementDescriptorPrefix = statementDescriptorPrefix //required
                AccountCardPaymentsSettings.StatementDescriptorPrefixKana = statementDescriptorPrefixKana //required
                AccountCardPaymentsSettings.StatementDescriptorPrefixKanji = statementDescriptorPrefixKanji //required
                AccountCardPaymentsSettings.DeclineOn = declineOn
            }

    and AccountDashboardSettings = {
        ///The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
        DisplayName: string option
        ///The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
        Timezone: string option
    }
    with
        static member New (displayName: string option, timezone: string option) =
            {
                AccountDashboardSettings.DisplayName = displayName //required
                AccountDashboardSettings.Timezone = timezone //required
            }

    and AccountDeclineChargeOn = {
        ///Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
        AvsFailure: bool
        ///Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
        CvcFailure: bool
    }
    with
        static member New (avsFailure: bool, cvcFailure: bool) =
            {
                AccountDeclineChargeOn.AvsFailure = avsFailure //required
                AccountDeclineChargeOn.CvcFailure = cvcFailure //required
            }

    and AccountFutureRequirements = {
        ///Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
        Alternatives: AccountRequirementsAlternative list option
        ///Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CurrentDeadline: DateTime option
        ///Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
        CurrentlyDue: string list option
        ///This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
        DisabledReason: string option
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list option
        ///Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
        EventuallyDue: string list option
        ///Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
        PastDue: string list option
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
        PendingVerification: string list option
    }
    with
        static member New (alternatives: AccountRequirementsAlternative list option, currentDeadline: DateTime option, currentlyDue: string list option, disabledReason: string option, errors: AccountRequirementsError list option, eventuallyDue: string list option, pastDue: string list option, pendingVerification: string list option) =
            {
                AccountFutureRequirements.Alternatives = alternatives //required
                AccountFutureRequirements.CurrentDeadline = currentDeadline //required
                AccountFutureRequirements.CurrentlyDue = currentlyDue //required
                AccountFutureRequirements.DisabledReason = disabledReason //required
                AccountFutureRequirements.Errors = errors //required
                AccountFutureRequirements.EventuallyDue = eventuallyDue //required
                AccountFutureRequirements.PastDue = pastDue //required
                AccountFutureRequirements.PendingVerification = pendingVerification //required
            }

    ///Account Links are the means by which a Connect platform grants a connected account permission to access
    ///Stripe-hosted applications, such as Connect Onboarding.
    ///Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding)
    and AccountLink = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The timestamp at which this account link will expire.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
        ///The URL for the account link.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "account_link"

        static member New (created: DateTime, expiresAt: DateTime, url: string) =
            {
                AccountLink.Created = created //required
                AccountLink.ExpiresAt = expiresAt //required
                AccountLink.Url = url //required
            }

    and AccountMonthlyEstimatedRevenue = {
        ///A non-negative integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
    }
    with
        static member New (amount: int, currency: string) =
            {
                AccountMonthlyEstimatedRevenue.Amount = amount //required
                AccountMonthlyEstimatedRevenue.Currency = currency //required
            }

    and AccountPaymentsSettings = {
        ///The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
        StatementDescriptor: string option
        ///The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
        StatementDescriptorKana: string option
        ///The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
        StatementDescriptorKanji: string option
        ///The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
        StatementDescriptorPrefixKana: string option
        ///The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
        StatementDescriptorPrefixKanji: string option
    }
    with
        static member New (statementDescriptor: string option, statementDescriptorKana: string option, statementDescriptorKanji: string option, statementDescriptorPrefixKana: string option, statementDescriptorPrefixKanji: string option) =
            {
                AccountPaymentsSettings.StatementDescriptor = statementDescriptor //required
                AccountPaymentsSettings.StatementDescriptorKana = statementDescriptorKana //required
                AccountPaymentsSettings.StatementDescriptorKanji = statementDescriptorKanji //required
                AccountPaymentsSettings.StatementDescriptorPrefixKana = statementDescriptorPrefixKana //required
                AccountPaymentsSettings.StatementDescriptorPrefixKanji = statementDescriptorPrefixKanji //required
            }

    and AccountPayoutSettings = {
        ///A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`.
        DebitNegativeBalances: bool
        Schedule: TransferSchedule
        ///The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
        StatementDescriptor: string option
    }
    with
        static member New (debitNegativeBalances: bool, schedule: TransferSchedule, statementDescriptor: string option) =
            {
                AccountPayoutSettings.DebitNegativeBalances = debitNegativeBalances //required
                AccountPayoutSettings.Schedule = schedule //required
                AccountPayoutSettings.StatementDescriptor = statementDescriptor //required
            }

    and AccountRequirements = {
        ///Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
        Alternatives: AccountRequirementsAlternative list option
        ///Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CurrentDeadline: DateTime option
        ///Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
        CurrentlyDue: string list option
        ///If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
        DisabledReason: AccountRequirementsDisabledReason option
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list option
        ///Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
        EventuallyDue: string list option
        ///Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
        PastDue: string list option
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
        PendingVerification: string list option
    }
    with
        static member New (alternatives: AccountRequirementsAlternative list option, currentDeadline: DateTime option, currentlyDue: string list option, disabledReason: AccountRequirementsDisabledReason option, errors: AccountRequirementsError list option, eventuallyDue: string list option, pastDue: string list option, pendingVerification: string list option) =
            {
                AccountRequirements.Alternatives = alternatives //required
                AccountRequirements.CurrentDeadline = currentDeadline //required
                AccountRequirements.CurrentlyDue = currentlyDue //required
                AccountRequirements.DisabledReason = disabledReason //required
                AccountRequirements.Errors = errors //required
                AccountRequirements.EventuallyDue = eventuallyDue //required
                AccountRequirements.PastDue = pastDue //required
                AccountRequirements.PendingVerification = pendingVerification //required
            }

    and AccountRequirementsDisabledReason =
        | [<JsonUnionCase("requirements.past_due")>] RequirementsPastDue
        | [<JsonUnionCase("requirements.pending_verification")>] RequirementsPendingVerification
        | Listed
        | PlatformPaused
        | [<JsonUnionCase("rejected.fraud")>] RejectedFraud
        | [<JsonUnionCase("rejected.listed")>] RejectedListed
        | [<JsonUnionCase("rejected.terms_of_service")>] RejectedTermsOfService
        | [<JsonUnionCase("rejected.other")>] RejectedOther
        | UnderReview
        | Other

    and AccountRequirementsAlternative = {
        ///Fields that can be provided to satisfy all fields in `original_fields_due`.
        AlternativeFieldsDue: string list
        ///Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
        OriginalFieldsDue: string list
    }
    with
        static member New (alternativeFieldsDue: string list, originalFieldsDue: string list) =
            {
                AccountRequirementsAlternative.AlternativeFieldsDue = alternativeFieldsDue //required
                AccountRequirementsAlternative.OriginalFieldsDue = originalFieldsDue //required
            }

    and AccountRequirementsError = {
        ///The code for the type of error.
        Code: AccountRequirementsErrorCode
        ///An informative message that indicates the error type and provides additional details about the error.
        Reason: string
        ///The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
        Requirement: string
    }
    with
        static member New (code: AccountRequirementsErrorCode, reason: string, requirement: string) =
            {
                AccountRequirementsError.Code = code //required
                AccountRequirementsError.Reason = reason //required
                AccountRequirementsError.Requirement = requirement //required
            }

    and AccountRequirementsErrorCode =
        | InvalidAddressCityStatePostalCode
        | InvalidDobAgeUnder18
        | InvalidRepresentativeCountry
        | InvalidStreetAddress
        | InvalidTosAcceptance
        | InvalidValueOther
        | VerificationDirectorsMismatch
        | VerificationDocumentAddressMismatch
        | VerificationDocumentAddressMissing
        | VerificationDocumentCorrupt
        | VerificationDocumentCountryNotSupported
        | VerificationDocumentDirectorsMismatch
        | VerificationDocumentDobMismatch
        | VerificationDocumentDuplicateType
        | VerificationDocumentExpired
        | VerificationDocumentFailedCopy
        | VerificationDocumentFailedGreyscale
        | VerificationDocumentFailedOther
        | VerificationDocumentFailedTestMode
        | VerificationDocumentFraudulent
        | VerificationDocumentIdNumberMismatch
        | VerificationDocumentIdNumberMissing
        | VerificationDocumentIncomplete
        | VerificationDocumentInvalid
        | VerificationDocumentIssueOrExpiryDateMissing
        | VerificationDocumentManipulated
        | VerificationDocumentMissingBack
        | VerificationDocumentMissingFront
        | VerificationDocumentNameMismatch
        | VerificationDocumentNameMissing
        | VerificationDocumentNationalityMismatch
        | VerificationDocumentNotReadable
        | VerificationDocumentNotSigned
        | VerificationDocumentNotUploaded
        | VerificationDocumentPhotoMismatch
        | VerificationDocumentTooLarge
        | VerificationDocumentTypeNotSupported
        | VerificationExtraneousDirectors
        | VerificationFailedAddressMatch
        | VerificationFailedBusinessIecNumber
        | VerificationFailedDocumentMatch
        | VerificationFailedIdNumberMatch
        | VerificationFailedKeyedIdentity
        | VerificationFailedKeyedMatch
        | VerificationFailedNameMatch
        | VerificationFailedOther
        | VerificationFailedResidentialAddress
        | VerificationFailedTaxIdMatch
        | VerificationFailedTaxIdNotIssued
        | VerificationMissingDirectors
        | VerificationMissingExecutives
        | VerificationMissingOwners
        | VerificationRequiresAdditionalMemorandumOfAssociations

    and AccountSepaDebitPaymentsSettings = {
        ///SEPA creditor identifier that identifies the company making the payment.
        CreditorId: string option
    }
    with
        static member New (?creditorId: string) =
            {
                AccountSepaDebitPaymentsSettings.CreditorId = creditorId
            }

    and AccountSettings = {
        BacsDebitPayments: AccountBacsDebitPaymentsSettings option
        Branding: AccountBrandingSettings
        CardIssuing: AccountCardIssuingSettings option
        CardPayments: AccountCardPaymentsSettings
        Dashboard: AccountDashboardSettings
        Payments: AccountPaymentsSettings
        Payouts: AccountPayoutSettings option
        SepaDebitPayments: AccountSepaDebitPaymentsSettings option
        Treasury: AccountTreasurySettings option
    }
    with
        static member New (branding: AccountBrandingSettings, cardPayments: AccountCardPaymentsSettings, dashboard: AccountDashboardSettings, payments: AccountPaymentsSettings, ?bacsDebitPayments: AccountBacsDebitPaymentsSettings, ?cardIssuing: AccountCardIssuingSettings, ?payouts: AccountPayoutSettings, ?sepaDebitPayments: AccountSepaDebitPaymentsSettings, ?treasury: AccountTreasurySettings) =
            {
                AccountSettings.Branding = branding //required
                AccountSettings.CardPayments = cardPayments //required
                AccountSettings.Dashboard = dashboard //required
                AccountSettings.Payments = payments //required
                AccountSettings.BacsDebitPayments = bacsDebitPayments
                AccountSettings.CardIssuing = cardIssuing
                AccountSettings.Payouts = payouts
                AccountSettings.SepaDebitPayments = sepaDebitPayments
                AccountSettings.Treasury = treasury
            }

    and AccountTermsOfService = {
        ///The Unix timestamp marking when the account representative accepted the service agreement.
        Date: int option
        ///The IP address from which the account representative accepted the service agreement.
        Ip: string option
        ///The user agent of the browser from which the account representative accepted the service agreement.
        UserAgent: string option
    }
    with
        static member New (date: int option, ip: string option, ?userAgent: string) =
            {
                AccountTermsOfService.Date = date //required
                AccountTermsOfService.Ip = ip //required
                AccountTermsOfService.UserAgent = userAgent
            }

    and AccountTosAcceptance = {
        ///The Unix timestamp marking when the account representative accepted their service agreement
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Date: DateTime option
        ///The IP address from which the account representative accepted their service agreement
        Ip: string option
        ///The user's service agreement type
        ServiceAgreement: string option
        ///The user agent of the browser from which the account representative accepted their service agreement
        UserAgent: string option
    }
    with
        static member New (?date: DateTime option, ?ip: string option, ?serviceAgreement: string, ?userAgent: string option) =
            {
                AccountTosAcceptance.Date = date |> Option.flatten
                AccountTosAcceptance.Ip = ip |> Option.flatten
                AccountTosAcceptance.ServiceAgreement = serviceAgreement
                AccountTosAcceptance.UserAgent = userAgent |> Option.flatten
            }

    and AccountTreasurySettings = {
        TosAcceptance: AccountTermsOfService option
    }
    with
        static member New (?tosAcceptance: AccountTermsOfService) =
            {
                AccountTreasurySettings.TosAcceptance = tosAcceptance
            }

    and AccountUnificationAccountController = {
        ///`true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
        IsController: bool option
        ///The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
        Type: AccountUnificationAccountControllerType
    }
    with
        static member New (``type``: AccountUnificationAccountControllerType, ?isController: bool) =
            {
                AccountUnificationAccountController.Type = ``type`` //required
                AccountUnificationAccountController.IsController = isController
            }

    and AccountUnificationAccountControllerType =
        | Account
        | Application

    and Address = {
        ///City, district, suburb, town, or village.
        City: string option
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string option
        ///Address line 1 (e.g., street, PO Box, or company name).
        [<JsonField(Name="line1")>]Line1: string option
        ///Address line 2 (e.g., apartment, suite, unit, or building).
        [<JsonField(Name="line2")>]Line2: string option
        ///ZIP or postal code.
        PostalCode: string option
        ///State, county, province, or region.
        State: string option
    }
    with
        static member New (city: string option, country: string option, line1: string option, line2: string option, postalCode: string option, state: string option) =
            {
                Address.City = city //required
                Address.Country = country //required
                Address.Line1 = line1 //required
                Address.Line2 = line2 //required
                Address.PostalCode = postalCode //required
                Address.State = state //required
            }

    and ApiErrors = {
        ///For card errors, the ID of the failed charge.
        Charge: string option
        ///For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
        Code: ApiErrorsCode option
        ///For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
        DeclineCode: string option
        ///A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
        DocUrl: string option
        ///A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
        Message: string option
        ///If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
        Param: string option
        PaymentIntent: PaymentIntent option
        PaymentMethod: PaymentMethod option
        ///If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
        PaymentMethodType: string option
        ///A URL to the request log entry in your dashboard.
        RequestLogUrl: string option
        SetupIntent: SetupIntent option
        Source: PaymentSource option
        ///The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
        Type: ApiErrorsType
    }
    with
        static member New (``type``: ApiErrorsType, ?charge: string, ?code: ApiErrorsCode, ?declineCode: string, ?docUrl: string, ?message: string, ?param: string, ?paymentIntent: PaymentIntent, ?paymentMethod: PaymentMethod, ?paymentMethodType: string, ?requestLogUrl: string, ?setupIntent: SetupIntent, ?source: PaymentSource) =
            {
                ApiErrors.Type = ``type`` //required
                ApiErrors.Charge = charge
                ApiErrors.Code = code
                ApiErrors.DeclineCode = declineCode
                ApiErrors.DocUrl = docUrl
                ApiErrors.Message = message
                ApiErrors.Param = param
                ApiErrors.PaymentIntent = paymentIntent
                ApiErrors.PaymentMethod = paymentMethod
                ApiErrors.PaymentMethodType = paymentMethodType
                ApiErrors.RequestLogUrl = requestLogUrl
                ApiErrors.SetupIntent = setupIntent
                ApiErrors.Source = source
            }

    and ApiErrorsCode =
        | AccountClosed
        | AccountCountryInvalidAddress
        | AccountErrorCountryChangeRequiresAdditionalSteps
        | AccountInformationMismatch
        | AccountInvalid
        | AccountNumberInvalid
        | AcssDebitSessionIncomplete
        | AlipayUpgradeRequired
        | AmountTooLarge
        | AmountTooSmall
        | ApiKeyExpired
        | ApplicationFeesNotAllowed
        | AuthenticationRequired
        | BalanceInsufficient
        | BankAccountBadRoutingNumbers
        | BankAccountDeclined
        | BankAccountExists
        | BankAccountRestricted
        | BankAccountUnusable
        | BankAccountUnverified
        | BankAccountVerificationFailed
        | BillingInvalidMandate
        | BitcoinUpgradeRequired
        | CaptureChargeAuthorizationExpired
        | CaptureUnauthorizedPayment
        | CardDeclineRateLimitExceeded
        | CardDeclined
        | CardholderPhoneNumberRequired
        | ChargeAlreadyCaptured
        | ChargeAlreadyRefunded
        | ChargeDisputed
        | ChargeExceedsSourceLimit
        | ChargeExpiredForCapture
        | ChargeInvalidParameter
        | ChargeNotRefundable
        | ClearingCodeUnsupported
        | CountryCodeInvalid
        | CountryUnsupported
        | CouponExpired
        | CustomerMaxPaymentMethods
        | CustomerMaxSubscriptions
        | DebitNotAuthorized
        | EmailInvalid
        | ExpiredCard
        | IdempotencyKeyInUse
        | IncorrectAddress
        | IncorrectCvc
        | IncorrectNumber
        | IncorrectZip
        | InstantPayoutsConfigDisabled
        | InstantPayoutsCurrencyDisabled
        | InstantPayoutsLimitExceeded
        | InstantPayoutsUnsupported
        | InsufficientFunds
        | IntentInvalidState
        | IntentVerificationMethodMissing
        | InvalidCardType
        | InvalidCharacters
        | InvalidChargeAmount
        | InvalidCvc
        | InvalidExpiryMonth
        | InvalidExpiryYear
        | InvalidNumber
        | InvalidSourceUsage
        | InvalidTaxLocation
        | InvoiceNoCustomerLineItems
        | InvoiceNoPaymentMethodTypes
        | InvoiceNoSubscriptionLineItems
        | InvoiceNotEditable
        | InvoiceOnBehalfOfNotEditable
        | InvoicePaymentIntentRequiresAction
        | InvoiceUpcomingNone
        | LivemodeMismatch
        | LockTimeout
        | Missing
        | NoAccount
        | NotAllowedOnStandardAccount
        | OutOfInventory
        | OwnershipDeclarationNotAllowed
        | ParameterInvalidEmpty
        | ParameterInvalidInteger
        | ParameterInvalidStringBlank
        | ParameterInvalidStringEmpty
        | ParameterMissing
        | ParameterUnknown
        | ParametersExclusive
        | PaymentIntentActionRequired
        | PaymentIntentAuthenticationFailure
        | PaymentIntentIncompatiblePaymentMethod
        | PaymentIntentInvalidParameter
        | PaymentIntentKonbiniRejectedConfirmationNumber
        | PaymentIntentMandateInvalid
        | PaymentIntentPaymentAttemptExpired
        | PaymentIntentPaymentAttemptFailed
        | PaymentIntentUnexpectedState
        | PaymentMethodBankAccountAlreadyVerified
        | PaymentMethodBankAccountBlocked
        | PaymentMethodBillingDetailsAddressMissing
        | PaymentMethodConfigurationFailures
        | PaymentMethodCurrencyMismatch
        | PaymentMethodCustomerDecline
        | PaymentMethodInvalidParameter
        | PaymentMethodInvalidParameterTestmode
        | PaymentMethodMicrodepositFailed
        | PaymentMethodMicrodepositVerificationAmountsInvalid
        | PaymentMethodMicrodepositVerificationAmountsMismatch
        | PaymentMethodMicrodepositVerificationAttemptsExceeded
        | PaymentMethodMicrodepositVerificationDescriptorCodeMismatch
        | PaymentMethodMicrodepositVerificationTimeout
        | PaymentMethodNotAvailable
        | PaymentMethodProviderDecline
        | PaymentMethodProviderTimeout
        | PaymentMethodUnactivated
        | PaymentMethodUnexpectedState
        | PaymentMethodUnsupportedType
        | PayoutReconciliationNotReady
        | PayoutsLimitExceeded
        | PayoutsNotAllowed
        | PlatformAccountRequired
        | PlatformApiKeyExpired
        | PostalCodeInvalid
        | ProcessingError
        | ProductInactive
        | ProgressiveOnboardingLimitExceeded
        | RateLimit
        | ReferToCustomer
        | RefundDisputedPayment
        | ResourceAlreadyExists
        | ResourceMissing
        | ReturnIntentAlreadyProcessed
        | RoutingNumberInvalid
        | SecretKeyRequired
        | SepaUnsupportedAccount
        | SetupAttemptFailed
        | SetupIntentAuthenticationFailure
        | SetupIntentInvalidParameter
        | SetupIntentMandateInvalid
        | SetupIntentSetupAttemptExpired
        | SetupIntentUnexpectedState
        | ShippingCalculationFailed
        | SkuInactive
        | StateUnsupported
        | StatusTransitionInvalid
        | TaxIdInvalid
        | TaxesCalculationFailed
        | TerminalLocationCountryUnsupported
        | TerminalReaderBusy
        | TerminalReaderOffline
        | TerminalReaderTimeout
        | TestmodeChargesOnly
        | TlsVersionUnsupported
        | TokenAlreadyUsed
        | TokenInUse
        | TransferSourceBalanceParametersMismatch
        | TransfersNotAllowed
        | UrlInvalid

    and ApiErrorsType =
        | ApiError
        | CardError
        | IdempotencyError
        | InvalidRequestError

    and ApplePayDomain = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        DomainName: string
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "apple_pay_domain"

        static member New (created: DateTime, domainName: string, id: string, livemode: bool) =
            {
                ApplePayDomain.Created = created //required
                ApplePayDomain.DomainName = domainName //required
                ApplePayDomain.Id = id //required
                ApplePayDomain.Livemode = livemode //required
            }

    and Application = {
        ///Unique identifier for the object.
        Id: string
        ///The name of the application.
        Name: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "application"

        static member New (id: string, name: string option) =
            {
                Application.Id = id //required
                Application.Name = name //required
            }

    and ApplicationFee = {
        ///ID of the Stripe account this fee was taken from.
        Account: ApplicationFeeAccount'AnyOf
        ///Amount earned, in cents (or local equivalent).
        Amount: int
        ///Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
        AmountRefunded: int
        ///ID of the Connect application that earned the fee.
        Application: ApplicationFeeApplication'AnyOf
        ///Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
        BalanceTransaction: ApplicationFeeBalanceTransaction'AnyOf option
        ///ID of the charge that the application fee was taken from.
        Charge: ApplicationFeeCharge'AnyOf
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
        OriginatingTransaction: ApplicationFeeOriginatingTransaction'AnyOf option
        ///Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
        Refunded: bool
        ///A list of refunds that have been applied to the fee.
        Refunds: ApplicationFeeRefunds
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "application_fee"

        static member New (account: ApplicationFeeAccount'AnyOf, amount: int, amountRefunded: int, application: ApplicationFeeApplication'AnyOf, balanceTransaction: ApplicationFeeBalanceTransaction'AnyOf option, charge: ApplicationFeeCharge'AnyOf, created: DateTime, currency: string, id: string, livemode: bool, originatingTransaction: ApplicationFeeOriginatingTransaction'AnyOf option, refunded: bool, refunds: ApplicationFeeRefunds) =
            {
                ApplicationFee.Account = account //required
                ApplicationFee.Amount = amount //required
                ApplicationFee.AmountRefunded = amountRefunded //required
                ApplicationFee.Application = application //required
                ApplicationFee.BalanceTransaction = balanceTransaction //required
                ApplicationFee.Charge = charge //required
                ApplicationFee.Created = created //required
                ApplicationFee.Currency = currency //required
                ApplicationFee.Id = id //required
                ApplicationFee.Livemode = livemode //required
                ApplicationFee.OriginatingTransaction = originatingTransaction //required
                ApplicationFee.Refunded = refunded //required
                ApplicationFee.Refunds = refunds //required
            }

    and ApplicationFeeAccount'AnyOf =
        | String of string
        | Account of Account

    and ApplicationFeeApplication'AnyOf =
        | String of string
        | Application of Application

    and ApplicationFeeBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and ApplicationFeeCharge'AnyOf =
        | String of string
        | Charge of Charge

    and ApplicationFeeOriginatingTransaction'AnyOf =
        | String of string
        | Charge of Charge

    ///A list of refunds that have been applied to the fee.
    and ApplicationFeeRefunds = {
        ///Details about each object.
        Data: FeeRefund list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: FeeRefund list, hasMore: bool, url: string) =
            {
                ApplicationFeeRefunds.Data = data //required
                ApplicationFeeRefunds.HasMore = hasMore //required
                ApplicationFeeRefunds.Url = url //required
            }

    ///Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.
    ///The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.
    ///All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.
    ///A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.
    ///Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
    and AppsSecret = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///If true, indicates that this secret has been deleted
        Deleted: bool option
        ///The Unix timestamp for the expiry time of the secret, after which the secret deletes.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///A name for the secret that's unique within the scope.
        Name: string
        ///The plaintext secret value to be stored.
        Payload: string option
        Scope: SecretServiceResourceScope
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "apps.secret"

        static member New (created: DateTime, expiresAt: DateTime option, id: string, livemode: bool, name: string, payload: string option, scope: SecretServiceResourceScope, ?deleted: bool) =
            {
                AppsSecret.Created = created //required
                AppsSecret.ExpiresAt = expiresAt //required
                AppsSecret.Id = id //required
                AppsSecret.Livemode = livemode //required
                AppsSecret.Name = name //required
                AppsSecret.Payload = payload //required
                AppsSecret.Scope = scope //required
                AppsSecret.Deleted = deleted
            }

    and AutomaticTax = {
        ///Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices.
        Enabled: bool
        ///The status of the most recent automated tax calculation for this invoice.
        Status: AutomaticTaxStatus option
    }
    with
        static member New (enabled: bool, status: AutomaticTaxStatus option) =
            {
                AutomaticTax.Enabled = enabled //required
                AutomaticTax.Status = status //required
            }

    and AutomaticTaxStatus =
        | Complete
        | Failed
        | RequiresLocationInputs

    ///This is an object representing your Stripe balance. You can retrieve it to see
    ///the balance currently on your Stripe account.
    ///You can also retrieve the balance history, which contains a list of
    ///[transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
    ///(charges, payouts, and so forth).
    ///The available and pending amounts for each currency are broken down further by
    ///payment source types.
    ///Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
    and Balance = {
        ///Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property.
        Available: BalanceAmount list
        ///Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property.
        ConnectReserved: BalanceAmount list option
        ///Funds that can be paid out using Instant Payouts.
        InstantAvailable: BalanceAmount list option
        Issuing: BalanceDetail option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Funds that are not yet available in the balance. The pending balance for each currency, and for each payment type, can be found in the `source_types` property.
        Pending: BalanceAmount list
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "balance"

        static member New (available: BalanceAmount list, livemode: bool, pending: BalanceAmount list, ?connectReserved: BalanceAmount list, ?instantAvailable: BalanceAmount list, ?issuing: BalanceDetail) =
            {
                Balance.Available = available //required
                Balance.Livemode = livemode //required
                Balance.Pending = pending //required
                Balance.ConnectReserved = connectReserved
                Balance.InstantAvailable = instantAvailable
                Balance.Issuing = issuing
            }

    and BalanceAmount = {
        ///Balance amount.
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        SourceTypes: BalanceAmountBySourceType option
    }
    with
        static member New (amount: int, currency: string, ?sourceTypes: BalanceAmountBySourceType) =
            {
                BalanceAmount.Amount = amount //required
                BalanceAmount.Currency = currency //required
                BalanceAmount.SourceTypes = sourceTypes
            }

    and BalanceAmountBySourceType = {
        ///Amount for bank account.
        BankAccount: int option
        ///Amount for card.
        Card: int option
        ///Amount for FPX.
        Fpx: int option
    }
    with
        static member New (?bankAccount: int, ?card: int, ?fpx: int) =
            {
                BalanceAmountBySourceType.BankAccount = bankAccount
                BalanceAmountBySourceType.Card = card
                BalanceAmountBySourceType.Fpx = fpx
            }

    and BalanceDetail = {
        ///Funds that are available for use.
        Available: BalanceAmount list
    }
    with
        static member New (available: BalanceAmount list) =
            {
                BalanceDetail.Available = available //required
            }

    ///Balance transactions represent funds moving through your Stripe account.
    ///They're created for every type of transaction that comes into or flows out of your Stripe account balance.
    ///Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
    and BalanceTransaction = {
        ///Gross amount of the transaction, in cents (or local equivalent).
        Amount: int
        ///The date the transaction's net funds will become available in the Stripe balance.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]AvailableOn: DateTime
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
        ExchangeRate: decimal option
        ///Fees (in cents (or local equivalent)) paid for this transaction.
        Fee: int
        ///Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.
        FeeDetails: Fee list
        ///Unique identifier for the object.
        Id: string
        ///Net amount of the transaction, in cents (or local equivalent).
        Net: int
        ///[Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
        ReportingCategory: string
        ///The Stripe object to which this transaction is related.
        Source: BalanceTransactionSource'AnyOf option
        ///If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
        Status: BalanceTransactionStatus
        ///Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payment_reversal`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
        Type: BalanceTransactionType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "balance_transaction"

        static member New (amount: int, availableOn: DateTime, created: DateTime, currency: string, description: string option, exchangeRate: decimal option, fee: int, feeDetails: Fee list, id: string, net: int, reportingCategory: string, source: BalanceTransactionSource'AnyOf option, status: BalanceTransactionStatus, ``type``: BalanceTransactionType) =
            {
                BalanceTransaction.Amount = amount //required
                BalanceTransaction.AvailableOn = availableOn //required
                BalanceTransaction.Created = created //required
                BalanceTransaction.Currency = currency //required
                BalanceTransaction.Description = description //required
                BalanceTransaction.ExchangeRate = exchangeRate //required
                BalanceTransaction.Fee = fee //required
                BalanceTransaction.FeeDetails = feeDetails //required
                BalanceTransaction.Id = id //required
                BalanceTransaction.Net = net //required
                BalanceTransaction.ReportingCategory = reportingCategory //required
                BalanceTransaction.Source = source //required
                BalanceTransaction.Status = status //required
                BalanceTransaction.Type = ``type`` //required
            }

    and BalanceTransactionSource'AnyOf =
        | String of string
        | BalanceTransactionSource of BalanceTransactionSource

    and BalanceTransactionStatus =
        | Available
        | Pending

    and BalanceTransactionType =
        | Adjustment
        | Advance
        | AdvanceFunding
        | AnticipationRepayment
        | ApplicationFee
        | ApplicationFeeRefund
        | Charge
        | ConnectCollectionTransfer
        | Contribution
        | IssuingAuthorizationHold
        | IssuingAuthorizationRelease
        | IssuingDispute
        | IssuingTransaction
        | Payment
        | PaymentFailureRefund
        | PaymentRefund
        | PaymentReversal
        | Payout
        | PayoutCancel
        | PayoutFailure
        | Refund
        | RefundFailure
        | ReserveTransaction
        | ReservedFunds
        | StripeFee
        | StripeFxFee
        | TaxFee
        | Topup
        | TopupReversal
        | Transfer
        | TransferCancel
        | TransferFailure
        | TransferRefund

    and BalanceTransactionSource =
        | ApplicationFee of ApplicationFee
        | Charge of Charge
        | ConnectCollectionTransfer of ConnectCollectionTransfer
        | Dispute of Dispute
        | FeeRefund of FeeRefund
        | IssuingAuthorization of IssuingAuthorization
        | IssuingDispute of IssuingDispute
        | IssuingTransaction of IssuingTransaction
        | Payout of Payout
        | PlatformTaxFee of PlatformTaxFee
        | Refund of Refund
        | ReserveTransaction of ReserveTransaction
        | TaxDeductedAtSource of TaxDeductedAtSource
        | Topup of Topup
        | Transfer of Transfer
        | TransferReversal of TransferReversal

    ///These bank accounts are payment methods on `Customer` objects.
    ///On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
    ///destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
    ///They can be bank accounts or debit cards as well, and are documented in the links above.
    ///Related guide: [Bank debits and transfers](https://stripe.com/docs/payments/bank-debits-transfers)
    and BankAccount = {
        ///The ID of the account that the bank account is associated with.
        Account: BankAccountAccount'AnyOf option
        ///The name of the person or business that owns the bank account.
        AccountHolderName: string option
        ///The type of entity that holds the account. This can be either `individual` or `company`.
        AccountHolderType: BankAccountAccountHolderType option
        ///The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
        AccountType: BankAccountAccountType option
        ///A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
        AvailablePayoutMethods: BankAccountAvailablePayoutMethods list option
        ///Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
        BankName: string option
        ///Two-letter ISO code representing the country the bank account is located in.
        Country: string
        ///Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
        Currency: string
        ///The ID of the customer that the bank account is associated with.
        Customer: BankAccountCustomer'AnyOf option
        ///Whether this bank account is the default external account for its currency.
        DefaultForCurrency: bool option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
        FutureRequirements: ExternalAccountRequirements option
        ///Unique identifier for the object.
        Id: string
        ///The last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Information about the requirements for the bank account, including what information needs to be collected.
        Requirements: ExternalAccountRequirements option
        ///The routing transit number for the bank account.
        RoutingNumber: string option
        ///For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
        ///For external accounts, possible values are `new`, `errored` and `verification_failed`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated. In India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
        Status: BankAccountStatus
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "bank_account"

        static member New (accountHolderName: string option, accountHolderType: BankAccountAccountHolderType option, accountType: BankAccountAccountType option, bankName: string option, country: string, currency: string, fingerprint: string option, id: string, last4: string, routingNumber: string option, status: BankAccountStatus, ?account: BankAccountAccount'AnyOf option, ?availablePayoutMethods: BankAccountAvailablePayoutMethods list option, ?customer: BankAccountCustomer'AnyOf option, ?defaultForCurrency: bool option, ?futureRequirements: ExternalAccountRequirements option, ?metadata: Map<string, string> option, ?requirements: ExternalAccountRequirements option) =
            {
                BankAccount.AccountHolderName = accountHolderName //required
                BankAccount.AccountHolderType = accountHolderType //required
                BankAccount.AccountType = accountType //required
                BankAccount.BankName = bankName //required
                BankAccount.Country = country //required
                BankAccount.Currency = currency //required
                BankAccount.Fingerprint = fingerprint //required
                BankAccount.Id = id //required
                BankAccount.Last4 = last4 //required
                BankAccount.RoutingNumber = routingNumber //required
                BankAccount.Status = status //required
                BankAccount.Account = account |> Option.flatten
                BankAccount.AvailablePayoutMethods = availablePayoutMethods |> Option.flatten
                BankAccount.Customer = customer |> Option.flatten
                BankAccount.DefaultForCurrency = defaultForCurrency |> Option.flatten
                BankAccount.FutureRequirements = futureRequirements |> Option.flatten
                BankAccount.Metadata = metadata |> Option.flatten
                BankAccount.Requirements = requirements |> Option.flatten
            }

    and BankAccountAccount'AnyOf =
        | String of string
        | Account of Account

    and BankAccountAccountHolderType =
        | Individual
        | Company

    and BankAccountAccountType =
        | Futsu
        | Toza

    and BankAccountCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and BankAccountStatus =
        | New
        | Validated
        | Verified
        | VerificationFailed
        | Errored

    and BankAccountAvailablePayoutMethods =
        | Instant
        | Standard

    and BankConnectionsResourceAccountholder = {
        ///The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`.
        Account: BankConnectionsResourceAccountholderAccount'AnyOf option
        ///ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`.
        Customer: BankConnectionsResourceAccountholderCustomer'AnyOf option
        ///Type of account holder that this account belongs to.
        Type: BankConnectionsResourceAccountholderType
    }
    with
        static member New (``type``: BankConnectionsResourceAccountholderType, ?account: BankConnectionsResourceAccountholderAccount'AnyOf, ?customer: BankConnectionsResourceAccountholderCustomer'AnyOf) =
            {
                BankConnectionsResourceAccountholder.Type = ``type`` //required
                BankConnectionsResourceAccountholder.Account = account
                BankConnectionsResourceAccountholder.Customer = customer
            }

    and BankConnectionsResourceAccountholderAccount'AnyOf =
        | String of string
        | Account of Account

    and BankConnectionsResourceAccountholderCustomer'AnyOf =
        | String of string
        | Customer of Customer

    and BankConnectionsResourceAccountholderType =
        | Account
        | Customer

    and BankConnectionsResourceBalance = {
        ///The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]AsOf: DateTime
        Cash: BankConnectionsResourceBalanceApiResourceCashBalance option
        Credit: BankConnectionsResourceBalanceApiResourceCreditBalance option
        ///The balances owed to (or by) the account holder.
        ///Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
        ///Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
        Current: Map<string, string list>
        ///The `type` of the balance. An additional hash is included on the balance with a name matching this value.
        Type: BankConnectionsResourceBalanceType
    }
    with
        static member New (asOf: DateTime, current: Map<string, string list>, ``type``: BankConnectionsResourceBalanceType, ?cash: BankConnectionsResourceBalanceApiResourceCashBalance, ?credit: BankConnectionsResourceBalanceApiResourceCreditBalance) =
            {
                BankConnectionsResourceBalance.AsOf = asOf //required
                BankConnectionsResourceBalance.Current = current //required
                BankConnectionsResourceBalance.Type = ``type`` //required
                BankConnectionsResourceBalance.Cash = cash
                BankConnectionsResourceBalance.Credit = credit
            }

    and BankConnectionsResourceBalanceType =
        | Cash
        | Credit

    and BankConnectionsResourceBalanceApiResourceCashBalance = {
        ///The funds available to the account holder. Typically this is the current balance less any holds.
        ///Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
        ///Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
        Available: Map<string, string list> option
    }
    with
        static member New (available: Map<string, string list> option) =
            {
                BankConnectionsResourceBalanceApiResourceCashBalance.Available = available //required
            }

    and BankConnectionsResourceBalanceApiResourceCreditBalance = {
        ///The credit that has been used by the account holder.
        ///Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
        ///Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
        Used: Map<string, string list> option
    }
    with
        static member New (used: Map<string, string list> option) =
            {
                BankConnectionsResourceBalanceApiResourceCreditBalance.Used = used //required
            }

    and BankConnectionsResourceBalanceRefresh = {
        ///The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]LastAttemptedAt: DateTime
        ///The status of the last refresh attempt.
        Status: BankConnectionsResourceBalanceRefreshStatus
    }
    with
        static member New (lastAttemptedAt: DateTime, status: BankConnectionsResourceBalanceRefreshStatus) =
            {
                BankConnectionsResourceBalanceRefresh.LastAttemptedAt = lastAttemptedAt //required
                BankConnectionsResourceBalanceRefresh.Status = status //required
            }

    and BankConnectionsResourceBalanceRefreshStatus =
        | Failed
        | Pending
        | Succeeded

    and BankConnectionsResourceLinkAccountSessionFilters = {
        ///List of countries from which to filter accounts.
        Countries: string list option
    }
    with
        static member New (countries: string list option) =
            {
                BankConnectionsResourceLinkAccountSessionFilters.Countries = countries //required
            }

    and BankConnectionsResourceOwnershipRefresh = {
        ///The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]LastAttemptedAt: DateTime
        ///The status of the last refresh attempt.
        Status: BankConnectionsResourceOwnershipRefreshStatus
    }
    with
        static member New (lastAttemptedAt: DateTime, status: BankConnectionsResourceOwnershipRefreshStatus) =
            {
                BankConnectionsResourceOwnershipRefresh.LastAttemptedAt = lastAttemptedAt //required
                BankConnectionsResourceOwnershipRefresh.Status = status //required
            }

    and BankConnectionsResourceOwnershipRefreshStatus =
        | Failed
        | Pending
        | Succeeded

    and BillingDetails = {
        ///Billing address.
        Address: Address option
        ///Email address.
        Email: string option
        ///Full name.
        Name: string option
        ///Billing phone number (including extension).
        Phone: string option
    }
    with
        static member New (address: Address option, email: string option, name: string option, phone: string option) =
            {
                BillingDetails.Address = address //required
                BillingDetails.Email = email //required
                BillingDetails.Name = name //required
                BillingDetails.Phone = phone //required
            }

    ///A portal configuration describes the functionality and behavior of a portal session.
    and BillingPortalConfiguration = {
        ///Whether the configuration is active and can be used to create portal sessions.
        Active: bool
        ///ID of the Connect Application that created the configuration.
        Application: BillingPortalConfigurationApplication'AnyOf option
        BusinessProfile: PortalBusinessProfile
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
        DefaultReturnUrl: string option
        Features: PortalFeatures
        ///Unique identifier for the object.
        Id: string
        ///Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
        IsDefault: bool
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        LoginPage: PortalLoginPage
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Time at which the object was last updated. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Updated: DateTime
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "billing_portal.configuration"

        static member New (active: bool, application: BillingPortalConfigurationApplication'AnyOf option, businessProfile: PortalBusinessProfile, created: DateTime, defaultReturnUrl: string option, features: PortalFeatures, id: string, isDefault: bool, livemode: bool, loginPage: PortalLoginPage, metadata: Map<string, string> option, updated: DateTime) =
            {
                BillingPortalConfiguration.Active = active //required
                BillingPortalConfiguration.Application = application //required
                BillingPortalConfiguration.BusinessProfile = businessProfile //required
                BillingPortalConfiguration.Created = created //required
                BillingPortalConfiguration.DefaultReturnUrl = defaultReturnUrl //required
                BillingPortalConfiguration.Features = features //required
                BillingPortalConfiguration.Id = id //required
                BillingPortalConfiguration.IsDefault = isDefault //required
                BillingPortalConfiguration.Livemode = livemode //required
                BillingPortalConfiguration.LoginPage = loginPage //required
                BillingPortalConfiguration.Metadata = metadata //required
                BillingPortalConfiguration.Updated = updated //required
            }

    and BillingPortalConfigurationApplication'AnyOf =
        | String of string
        | Application of Application
        | DeletedApplication of DeletedApplication

    ///The Billing customer portal is a Stripe-hosted UI for subscription and
    ///billing management.
    ///A portal configuration describes the functionality and features that you
    ///want to provide to your customers through the portal.
    ///A portal session describes the instantiation of the customer portal for
    ///a particular customer. By visiting the session's URL, the customer
    ///can manage their subscriptions and billing details. For security reasons,
    ///sessions are short-lived and will expire if the customer does not visit the URL.
    ///Create sessions on-demand when customers intend to manage their subscriptions
    ///and billing details.
    ///Learn more in the [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
    and BillingPortalSession = {
        ///The configuration used by this session, describing the features available.
        Configuration: BillingPortalSessionConfiguration'AnyOf
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The ID of the customer for this session.
        Customer: string
        ///Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.
        Flow: PortalFlowsFlow option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
        Locale: BillingPortalSessionLocale option
        ///The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
        OnBehalfOf: string option
        ///The URL to redirect customers to when they click on the portal's link to return to your website.
        ReturnUrl: string option
        ///The short-lived URL of the session that gives customers access to the customer portal.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "billing_portal.session"

        static member New (configuration: BillingPortalSessionConfiguration'AnyOf, created: DateTime, customer: string, flow: PortalFlowsFlow option, id: string, livemode: bool, locale: BillingPortalSessionLocale option, onBehalfOf: string option, returnUrl: string option, url: string) =
            {
                BillingPortalSession.Configuration = configuration //required
                BillingPortalSession.Created = created //required
                BillingPortalSession.Customer = customer //required
                BillingPortalSession.Flow = flow //required
                BillingPortalSession.Id = id //required
                BillingPortalSession.Livemode = livemode //required
                BillingPortalSession.Locale = locale //required
                BillingPortalSession.OnBehalfOf = onBehalfOf //required
                BillingPortalSession.ReturnUrl = returnUrl //required
                BillingPortalSession.Url = url //required
            }

    and BillingPortalSessionConfiguration'AnyOf =
        | String of string
        | BillingPortalConfiguration of BillingPortalConfiguration

    and BillingPortalSessionLocale =
        | Auto
        | Bg
        | Cs
        | Da
        | De
        | El
        | En
        | [<JsonUnionCase("en-AU")>] EnAU
        | [<JsonUnionCase("en-CA")>] EnCA
        | [<JsonUnionCase("en-GB")>] EnGB
        | [<JsonUnionCase("en-IE")>] EnIE
        | [<JsonUnionCase("en-IN")>] EnIN
        | [<JsonUnionCase("en-NZ")>] EnNZ
        | [<JsonUnionCase("en-SG")>] EnSG
        | Es
        | [<JsonUnionCase("es-419")>] Es419
        | Et
        | Fi
        | Fil
        | Fr
        | [<JsonUnionCase("fr-CA")>] FrCA
        | Hr
        | Hu
        | Id
        | It
        | Ja
        | Ko
        | Lt
        | Lv
        | Ms
        | Mt
        | Nb
        | Nl
        | Pl
        | Pt
        | [<JsonUnionCase("pt-BR")>] PtBR
        | Ro
        | Ru
        | Sk
        | Sl
        | Sv
        | Th
        | Tr
        | Vi
        | Zh
        | [<JsonUnionCase("zh-HK")>] ZhHK
        | [<JsonUnionCase("zh-TW")>] ZhTW

    and CancellationDetails = {
        ///Additional comments about why the user canceled the subscription, if the subscription was cancelled explicitly by the user.
        Comment: string option
        ///The customer submitted reason for why they cancelled, if the subscription was cancelled explicitly by the user.
        Feedback: CancellationDetailsFeedback option
        ///Why this subscription was cancelled.
        Reason: CancellationDetailsReason option
    }
    with
        static member New (comment: string option, feedback: CancellationDetailsFeedback option, reason: CancellationDetailsReason option) =
            {
                CancellationDetails.Comment = comment //required
                CancellationDetails.Feedback = feedback //required
                CancellationDetails.Reason = reason //required
            }

    and CancellationDetailsFeedback =
        | CustomerService
        | LowQuality
        | MissingFeatures
        | Other
        | SwitchedService
        | TooComplex
        | TooExpensive
        | Unused

    and CancellationDetailsReason =
        | CancellationRequested
        | PaymentDisputed
        | PaymentFailed

    ///This is an object representing a capability for a Stripe account.
    ///Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
    and Capability = {
        ///The account for which the capability enables functionality.
        Account: CapabilityAccount'AnyOf
        FutureRequirements: AccountCapabilityFutureRequirements option
        ///The identifier for the capability.
        Id: string
        ///Whether the capability has been requested.
        Requested: bool
        ///Time at which the capability was requested. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]RequestedAt: DateTime option
        Requirements: AccountCapabilityRequirements option
        ///The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
        Status: CapabilityStatus
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "capability"

        static member New (account: CapabilityAccount'AnyOf, id: string, requested: bool, requestedAt: DateTime option, status: CapabilityStatus, ?futureRequirements: AccountCapabilityFutureRequirements, ?requirements: AccountCapabilityRequirements) =
            {
                Capability.Account = account //required
                Capability.Id = id //required
                Capability.Requested = requested //required
                Capability.RequestedAt = requestedAt //required
                Capability.Status = status //required
                Capability.FutureRequirements = futureRequirements
                Capability.Requirements = requirements
            }

    and CapabilityAccount'AnyOf =
        | String of string
        | Account of Account

    and CapabilityStatus =
        | Active
        | Disabled
        | Inactive
        | Pending
        | Unrequested

    ///You can store multiple cards on a customer in order to charge the customer
    ///later. You can also store multiple debit cards on a recipient in order to
    ///transfer to those cards later.
    ///Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
    and Card = {
        ///The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
        Account: CardAccount'AnyOf option
        ///City/District/Suburb/Town/Village.
        AddressCity: string option
        ///Billing address country, if provided when creating card.
        AddressCountry: string option
        ///Address line 1 (Street address/PO Box/Company name).
        [<JsonField(Name="address_line1")>]AddressLine1: string option
        ///If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
        [<JsonField(Name="address_line1_check")>]AddressLine1Check: CardAddressLine1Check option
        ///Address line 2 (Apartment/Suite/Unit/Building).
        [<JsonField(Name="address_line2")>]AddressLine2: string option
        ///State/County/Province/Region.
        AddressState: string option
        ///ZIP or postal code.
        AddressZip: string option
        ///If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
        AddressZipCheck: CardAddressZipCheck option
        ///A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
        AvailablePayoutMethods: CardAvailablePayoutMethods list option
        ///Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
        Brand: CardBrand
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
        Currency: string option
        ///The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
        Customer: CardCustomer'AnyOf option
        ///If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
        CvcCheck: CardCvcCheck option
        ///Whether this card is the default external account for its currency.
        DefaultForCurrency: bool option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///(For tokenized numbers only.) The last four digits of the device account number.
        [<JsonField(Name="dynamic_last4")>]DynamicLast4: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: CardFunding
        ///Unique identifier for the object.
        Id: string
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Cardholder name.
        Name: string option
        ///For external accounts, possible values are `new` and `errored`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
        Status: CardStatus option
        ///If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
        TokenizationMethod: CardTokenizationMethod option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "card"

        static member New (addressCity: string option, addressCountry: string option, addressLine1: string option, addressLine1Check: CardAddressLine1Check option, addressLine2: string option, addressState: string option, addressZip: string option, addressZipCheck: CardAddressZipCheck option, brand: CardBrand, country: string option, cvcCheck: CardCvcCheck option, dynamicLast4: string option, expMonth: int, expYear: int, funding: CardFunding, id: string, last4: string, metadata: Map<string, string> option, name: string option, tokenizationMethod: CardTokenizationMethod option, ?account: CardAccount'AnyOf option, ?availablePayoutMethods: CardAvailablePayoutMethods list option, ?currency: string option, ?customer: CardCustomer'AnyOf option, ?defaultForCurrency: bool option, ?description: string, ?fingerprint: string option, ?iin: string, ?issuer: string, ?status: CardStatus option) =
            {
                Card.AddressCity = addressCity //required
                Card.AddressCountry = addressCountry //required
                Card.AddressLine1 = addressLine1 //required
                Card.AddressLine1Check = addressLine1Check //required
                Card.AddressLine2 = addressLine2 //required
                Card.AddressState = addressState //required
                Card.AddressZip = addressZip //required
                Card.AddressZipCheck = addressZipCheck //required
                Card.Brand = brand //required
                Card.Country = country //required
                Card.CvcCheck = cvcCheck //required
                Card.DynamicLast4 = dynamicLast4 //required
                Card.ExpMonth = expMonth //required
                Card.ExpYear = expYear //required
                Card.Funding = funding //required
                Card.Id = id //required
                Card.Last4 = last4 //required
                Card.Metadata = metadata //required
                Card.Name = name //required
                Card.TokenizationMethod = tokenizationMethod //required
                Card.Account = account |> Option.flatten
                Card.AvailablePayoutMethods = availablePayoutMethods |> Option.flatten
                Card.Currency = currency |> Option.flatten
                Card.Customer = customer |> Option.flatten
                Card.DefaultForCurrency = defaultForCurrency |> Option.flatten
                Card.Description = description
                Card.Fingerprint = fingerprint |> Option.flatten
                Card.Iin = iin
                Card.Issuer = issuer
                Card.Status = status |> Option.flatten
            }

    and CardAccount'AnyOf =
        | String of string
        | Account of Account

    and CardAddressLine1Check =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and CardAddressZipCheck =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and CardBrand =
        | [<JsonUnionCase("American Express")>] AmericanExpress
        | [<JsonUnionCase("Diners Club")>] DinersClub
        | [<JsonUnionCase("Discover")>] Discover
        | [<JsonUnionCase("Eftpos Australia")>] EftposAustralia
        | [<JsonUnionCase("JCB")>] JCB
        | [<JsonUnionCase("MasterCard")>] MasterCard
        | [<JsonUnionCase("UnionPay")>] UnionPay
        | [<JsonUnionCase("Visa")>] Visa
        | [<JsonUnionCase("Unknown")>] Unknown

    and CardCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and CardCvcCheck =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and CardFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and CardStatus =
        | New
        | Errored

    and CardTokenizationMethod =
        | AndroidPay
        | ApplePay
        | Masterpass
        | VisaCheckout

    and CardAvailablePayoutMethods =
        | Instant
        | Standard

    and CardIssuingAccountTermsOfService = {
        ///The Unix timestamp marking when the account representative accepted the service agreement.
        Date: int option
        ///The IP address from which the account representative accepted the service agreement.
        Ip: string option
        ///The user agent of the browser from which the account representative accepted the service agreement.
        UserAgent: string option
    }
    with
        static member New (date: int option, ip: string option, ?userAgent: string) =
            {
                CardIssuingAccountTermsOfService.Date = date //required
                CardIssuingAccountTermsOfService.Ip = ip //required
                CardIssuingAccountTermsOfService.UserAgent = userAgent
            }

    and CardMandatePaymentMethodDetails = {
        CardMandatePaymentMethodDetails: string option
    }
    with
        static member New (?cardMandatePaymentMethodDetails: string option) =
            {
                CardMandatePaymentMethodDetails.CardMandatePaymentMethodDetails = cardMandatePaymentMethodDetails |> Option.flatten
            }

    ///A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
    and CashBalance = {
        ///A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Available: Map<string, string list> option
        ///The ID of the customer whose cash balance this object represents.
        Customer: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        Settings: CustomerBalanceCustomerBalanceSettings
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "cash_balance"

        static member New (available: Map<string, string list> option, customer: string, livemode: bool, settings: CustomerBalanceCustomerBalanceSettings) =
            {
                CashBalance.Available = available //required
                CashBalance.Customer = customer //required
                CashBalance.Livemode = livemode //required
                CashBalance.Settings = settings //required
            }

    ///The `Charge` object represents a single attempt to move money into your Stripe account.
    ///PaymentIntent confirmation is the most common way to create Charges, but transferring
    ///money to a different Stripe account through Connect also creates Charges.
    ///Some legacy payment flows create Charges directly, which is not recommended for new integrations.
    and Charge = {
        ///Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
        Amount: int
        ///Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
        AmountCaptured: int
        ///Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
        AmountRefunded: int
        ///ID of the Connect application that created the charge.
        Application: ChargeApplication'AnyOf option
        ///The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
        ApplicationFee: ChargeApplicationFee'AnyOf option
        ///The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
        ApplicationFeeAmount: int option
        ///Authorization code on the charge.
        AuthorizationCode: string option
        ///ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
        BalanceTransaction: ChargeBalanceTransaction'AnyOf option
        BillingDetails: BillingDetails
        ///The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
        CalculatedStatementDescriptor: string option
        ///If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
        Captured: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the customer this charge is for if one exists.
        Customer: ChargeCustomer'AnyOf option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Whether the charge has been disputed.
        Disputed: bool
        ///ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.
        FailureBalanceTransaction: ChargeFailureBalanceTransaction'AnyOf option
        ///Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).
        FailureCode: string option
        ///Message to user further explaining reason for charge failure if available.
        FailureMessage: string option
        ///Information on fraud assessments for the charge.
        FraudDetails: ChargeFraudDetails option
        ///Unique identifier for the object.
        Id: string
        ///ID of the invoice this charge is for if one exists.
        Invoice: ChargeInvoice'AnyOf option
        [<JsonField(Name="level3")>]Level3: Level3 option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
        OnBehalfOf: ChargeOnBehalfOf'AnyOf option
        ///Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
        Outcome: ChargeOutcome option
        ///`true` if the charge succeeded, or was successfully authorized for later capture.
        Paid: bool
        ///ID of the PaymentIntent associated with this charge, if one exists.
        PaymentIntent: ChargePaymentIntent'AnyOf option
        ///ID of the payment method used in this charge.
        PaymentMethod: string option
        ///Details about the payment method at the time of the transaction.
        PaymentMethodDetails: PaymentMethodDetails option
        RadarOptions: RadarRadarOptions option
        ///This is the email address that the receipt for this charge was sent to.
        ReceiptEmail: string option
        ///This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
        ReceiptNumber: string option
        ///This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
        ReceiptUrl: string option
        ///Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
        Refunded: bool
        ///A list of refunds that have been applied to the charge.
        Refunds: ChargeRefunds option
        ///ID of the review associated with this charge if one exists.
        Review: ChargeReview'AnyOf option
        ///Shipping information for the charge.
        Shipping: Shipping option
        ///This is a legacy field that will be removed in the future. It contains the Source, Card, or BankAccount object used for the charge. For details about the payment method used for this charge, refer to `payment_method` or `payment_method_details` instead.
        Source: PaymentSource option
        ///The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
        SourceTransfer: ChargeSourceTransfer'AnyOf option
        ///For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
        StatementDescriptor: string option
        ///Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
        StatementDescriptorSuffix: string option
        ///The status of the payment is either `succeeded`, `pending`, or `failed`.
        Status: ChargeStatus
        ///ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
        Transfer: ChargeTransfer'AnyOf option
        ///An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
        TransferData: ChargeTransferData option
        ///A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
        TransferGroup: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "charge"

        static member New (amount: int, amountCaptured: int, amountRefunded: int, application: ChargeApplication'AnyOf option, applicationFee: ChargeApplicationFee'AnyOf option, applicationFeeAmount: int option, balanceTransaction: ChargeBalanceTransaction'AnyOf option, billingDetails: BillingDetails, calculatedStatementDescriptor: string option, captured: bool, created: DateTime, currency: string, customer: ChargeCustomer'AnyOf option, description: string option, disputed: bool, failureBalanceTransaction: ChargeFailureBalanceTransaction'AnyOf option, failureCode: string option, failureMessage: string option, fraudDetails: ChargeFraudDetails option, id: string, invoice: ChargeInvoice'AnyOf option, livemode: bool, metadata: Map<string, string>, onBehalfOf: ChargeOnBehalfOf'AnyOf option, outcome: ChargeOutcome option, paid: bool, paymentIntent: ChargePaymentIntent'AnyOf option, paymentMethod: string option, paymentMethodDetails: PaymentMethodDetails option, receiptEmail: string option, receiptNumber: string option, receiptUrl: string option, refunded: bool, refunds: ChargeRefunds option, review: ChargeReview'AnyOf option, shipping: Shipping option, source: PaymentSource option, sourceTransfer: ChargeSourceTransfer'AnyOf option, statementDescriptor: string option, statementDescriptorSuffix: string option, status: ChargeStatus, transferData: ChargeTransferData option, transferGroup: string option, ?authorizationCode: string, ?level3: Level3, ?radarOptions: RadarRadarOptions, ?transfer: ChargeTransfer'AnyOf) =
            {
                Charge.Amount = amount //required
                Charge.AmountCaptured = amountCaptured //required
                Charge.AmountRefunded = amountRefunded //required
                Charge.Application = application //required
                Charge.ApplicationFee = applicationFee //required
                Charge.ApplicationFeeAmount = applicationFeeAmount //required
                Charge.BalanceTransaction = balanceTransaction //required
                Charge.BillingDetails = billingDetails //required
                Charge.CalculatedStatementDescriptor = calculatedStatementDescriptor //required
                Charge.Captured = captured //required
                Charge.Created = created //required
                Charge.Currency = currency //required
                Charge.Customer = customer //required
                Charge.Description = description //required
                Charge.Disputed = disputed //required
                Charge.FailureBalanceTransaction = failureBalanceTransaction //required
                Charge.FailureCode = failureCode //required
                Charge.FailureMessage = failureMessage //required
                Charge.FraudDetails = fraudDetails //required
                Charge.Id = id //required
                Charge.Invoice = invoice //required
                Charge.Livemode = livemode //required
                Charge.Metadata = metadata //required
                Charge.OnBehalfOf = onBehalfOf //required
                Charge.Outcome = outcome //required
                Charge.Paid = paid //required
                Charge.PaymentIntent = paymentIntent //required
                Charge.PaymentMethod = paymentMethod //required
                Charge.PaymentMethodDetails = paymentMethodDetails //required
                Charge.ReceiptEmail = receiptEmail //required
                Charge.ReceiptNumber = receiptNumber //required
                Charge.ReceiptUrl = receiptUrl //required
                Charge.Refunded = refunded //required
                Charge.Refunds = refunds //required
                Charge.Review = review //required
                Charge.Shipping = shipping //required
                Charge.Source = source //required
                Charge.SourceTransfer = sourceTransfer //required
                Charge.StatementDescriptor = statementDescriptor //required
                Charge.StatementDescriptorSuffix = statementDescriptorSuffix //required
                Charge.Status = status //required
                Charge.TransferData = transferData //required
                Charge.TransferGroup = transferGroup //required
                Charge.AuthorizationCode = authorizationCode
                Charge.Level3 = level3
                Charge.RadarOptions = radarOptions
                Charge.Transfer = transfer
            }

    and ChargeApplication'AnyOf =
        | String of string
        | Application of Application

    and ChargeApplicationFee'AnyOf =
        | String of string
        | ApplicationFee of ApplicationFee

    and ChargeBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and ChargeCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and ChargeFailureBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and ChargeInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and ChargeOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and ChargePaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and ChargeReview'AnyOf =
        | String of string
        | Review of Review

    and ChargeSourceTransfer'AnyOf =
        | String of string
        | Transfer of Transfer

    and ChargeStatus =
        | Failed
        | Pending
        | Succeeded

    and ChargeTransfer'AnyOf =
        | String of string
        | Transfer of Transfer

    ///A list of refunds that have been applied to the charge.
    and ChargeRefunds = {
        ///Details about each object.
        Data: Refund list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: Refund list, hasMore: bool, url: string) =
            {
                ChargeRefunds.Data = data //required
                ChargeRefunds.HasMore = hasMore //required
                ChargeRefunds.Url = url //required
            }

    and ChargeFraudDetails = {
        ///Assessments from Stripe. If set, the value is `fraudulent`.
        StripeReport: string option
        ///Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
        UserReport: ChargeFraudDetailsUserReport option
    }
    with
        static member New (?stripeReport: string, ?userReport: ChargeFraudDetailsUserReport) =
            {
                ChargeFraudDetails.StripeReport = stripeReport
                ChargeFraudDetails.UserReport = userReport
            }

    and ChargeFraudDetailsUserReport =
        | Safe
        | Fraudulent

    and ChargeOutcome = {
        ///Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
        NetworkStatus: ChargeOutcomeNetworkStatus option
        ///An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
        Reason: string option
        ///Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
        RiskLevel: string option
        ///Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
        RiskScore: int option
        ///The ID of the Radar rule that matched the payment, if applicable.
        Rule: ChargeOutcomeRule'AnyOf option
        ///A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
        SellerMessage: string option
        ///Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
        Type: ChargeOutcomeType
    }
    with
        static member New (networkStatus: ChargeOutcomeNetworkStatus option, reason: string option, sellerMessage: string option, ``type``: ChargeOutcomeType, ?riskLevel: string, ?riskScore: int, ?rule: ChargeOutcomeRule'AnyOf) =
            {
                ChargeOutcome.NetworkStatus = networkStatus //required
                ChargeOutcome.Reason = reason //required
                ChargeOutcome.SellerMessage = sellerMessage //required
                ChargeOutcome.Type = ``type`` //required
                ChargeOutcome.RiskLevel = riskLevel
                ChargeOutcome.RiskScore = riskScore
                ChargeOutcome.Rule = rule
            }

    and ChargeOutcomeNetworkStatus =
        | ApprovedByNetwork
        | DeclinedByNetwork
        | NotSentToNetwork
        | ReversedAfterApproval

    and ChargeOutcomeRule'AnyOf =
        | String of string
        | Rule of Rule

    and ChargeOutcomeType =
        | Authorized
        | ManualReview
        | IssuerDeclined
        | Blocked
        | Invalid

    and ChargeTransferData = {
        ///The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
        Amount: int option
        ///ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
        Destination: ChargeTransferDataDestination'AnyOf
    }
    with
        static member New (amount: int option, destination: ChargeTransferDataDestination'AnyOf) =
            {
                ChargeTransferData.Amount = amount //required
                ChargeTransferData.Destination = destination //required
            }

    and ChargeTransferDataDestination'AnyOf =
        | String of string
        | Account of Account

    ///A Checkout Session represents your customer's session as they pay for
    ///one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
    ///or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
    ///new Session each time your customer attempts to pay.
    ///Once payment is successful, the Checkout Session will contain a reference
    ///to the [Customer](https://stripe.com/docs/api/customers), and either the successful
    ///[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
    ///[Subscription](https://stripe.com/docs/api/subscriptions).
    ///You can create a Checkout Session on your server and redirect to its URL
    ///to begin Checkout.
    ///Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
    and CheckoutSession = {
        ///When set, provides configuration for actions to take if this Checkout Session expires.
        AfterExpiration: PaymentPagesCheckoutSessionAfterExpiration option
        ///Enables user redeemable promotion codes.
        AllowPromotionCodes: bool option
        ///Total of all items before discounts or taxes are applied.
        AmountSubtotal: int option
        ///Total of all items after discounts and taxes are applied.
        AmountTotal: int option
        AutomaticTax: PaymentPagesCheckoutSessionAutomaticTax
        ///Describes whether Checkout should collect the customer's billing address.
        BillingAddressCollection: CheckoutSessionBillingAddressCollection option
        ///If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
        CancelUrl: string option
        ///A unique string to reference the Checkout Session. This can be a
        ///customer ID, a cart ID, or similar, and can be used to reconcile the
        ///Session with your internal systems.
        ClientReferenceId: string option
        ///Results of `consent_collection` for this session.
        Consent: PaymentPagesCheckoutSessionConsent option
        ///When set, provides configuration for the Checkout Session to gather active consent from customers.
        ConsentCollection: PaymentPagesCheckoutSessionConsentCollection option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string option
        ///Currency conversion details for automatic currency conversion sessions
        CurrencyConversion: PaymentPagesCheckoutSessionCurrencyConversion option
        ///Collect additional information from your customer using custom fields. Up to 2 fields are supported.
        CustomFields: PaymentPagesCheckoutSessionCustomFields list
        CustomText: PaymentPagesCheckoutSessionCustomText
        ///The ID of the customer for this Session.
        ///For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
        ///will create a new customer object based on information provided
        ///during the payment flow unless an existing customer was provided when
        ///the Session was created.
        Customer: CheckoutSessionCustomer'AnyOf option
        ///Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
        CustomerCreation: CheckoutSessionCustomerCreation option
        ///The customer details including the customer's tax exempt status and the customer's tax IDs. Only the customer's email is present on Sessions in `setup` mode.
        CustomerDetails: PaymentPagesCheckoutSessionCustomerDetails option
        ///If provided, this value will be used when the Customer object is created.
        ///If not provided, customers will be asked to enter their email address.
        ///Use this parameter to prefill customer data if you already have an email
        ///on file. To access information about the customer once the payment flow is
        ///complete, use the `customer` attribute.
        CustomerEmail: string option
        ///The timestamp at which the Checkout Session will expire.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
        ///Unique identifier for the object.
        Id: string
        ///ID of the invoice created by the Checkout Session, if it exists.
        Invoice: CheckoutSessionInvoice'AnyOf option
        ///Details on the state of invoice creation for the Checkout Session.
        InvoiceCreation: PaymentPagesCheckoutSessionInvoiceCreation option
        ///The line items purchased by the customer.
        LineItems: CheckoutSessionLineItems option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
        Locale: CheckoutSessionLocale option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The mode of the Checkout Session.
        Mode: CheckoutSessionMode
        ///The ID of the PaymentIntent for Checkout Sessions in `payment` mode.
        PaymentIntent: CheckoutSessionPaymentIntent'AnyOf option
        ///The ID of the Payment Link that created this Session.
        PaymentLink: CheckoutSessionPaymentLink'AnyOf option
        ///Configure whether a Checkout Session should collect a payment method.
        PaymentMethodCollection: CheckoutSessionPaymentMethodCollection option
        ///Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
        PaymentMethodOptions: CheckoutSessionPaymentMethodOptions option
        ///A list of the types of payment methods (e.g. card) this Checkout
        ///Session is allowed to accept.
        PaymentMethodTypes: string list
        ///The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
        ///You can use this value to decide when to fulfill your customer's order.
        PaymentStatus: CheckoutSessionPaymentStatus
        PhoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection option
        ///The ID of the original expired Checkout Session that triggered the recovery flow.
        RecoveredFrom: string option
        ///The ID of the SetupIntent for Checkout Sessions in `setup` mode.
        SetupIntent: CheckoutSessionSetupIntent'AnyOf option
        ///When set, provides configuration for Checkout to collect a shipping address from a customer.
        ShippingAddressCollection: PaymentPagesCheckoutSessionShippingAddressCollection option
        ///The details of the customer cost of shipping, including the customer chosen ShippingRate.
        ShippingCost: PaymentPagesCheckoutSessionShippingCost option
        ///Shipping information for this Checkout Session.
        ShippingDetails: Shipping option
        ///The shipping rate options applied to this Session.
        ShippingOptions: PaymentPagesCheckoutSessionShippingOption list
        ///The status of the Checkout Session, one of `open`, `complete`, or `expired`.
        Status: CheckoutSessionStatus option
        ///Describes the type of transaction being performed by Checkout in order to customize
        ///relevant text on the page, such as the submit button. `submit_type` can only be
        ///specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
        ///in `subscription` or `setup` mode.
        SubmitType: CheckoutSessionSubmitType option
        ///The ID of the subscription for Checkout Sessions in `subscription` mode.
        Subscription: CheckoutSessionSubscription'AnyOf option
        ///The URL the customer will be directed to after the payment or
        ///subscription creation is successful.
        SuccessUrl: string option
        TaxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection option
        ///Tax and discount details for the computed total amount.
        TotalDetails: PaymentPagesCheckoutSessionTotalDetails option
        ///The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
        ///This value is only present when the session is active.
        Url: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "checkout.session"

        static member New (afterExpiration: PaymentPagesCheckoutSessionAfterExpiration option, allowPromotionCodes: bool option, amountSubtotal: int option, amountTotal: int option, automaticTax: PaymentPagesCheckoutSessionAutomaticTax, billingAddressCollection: CheckoutSessionBillingAddressCollection option, cancelUrl: string option, clientReferenceId: string option, consent: PaymentPagesCheckoutSessionConsent option, consentCollection: PaymentPagesCheckoutSessionConsentCollection option, created: DateTime, currency: string option, currencyConversion: PaymentPagesCheckoutSessionCurrencyConversion option, customFields: PaymentPagesCheckoutSessionCustomFields list, customText: PaymentPagesCheckoutSessionCustomText, customer: CheckoutSessionCustomer'AnyOf option, customerCreation: CheckoutSessionCustomerCreation option, customerDetails: PaymentPagesCheckoutSessionCustomerDetails option, customerEmail: string option, expiresAt: DateTime, id: string, invoice: CheckoutSessionInvoice'AnyOf option, invoiceCreation: PaymentPagesCheckoutSessionInvoiceCreation option, livemode: bool, locale: CheckoutSessionLocale option, metadata: Map<string, string> option, mode: CheckoutSessionMode, paymentIntent: CheckoutSessionPaymentIntent'AnyOf option, paymentLink: CheckoutSessionPaymentLink'AnyOf option, paymentMethodCollection: CheckoutSessionPaymentMethodCollection option, paymentMethodOptions: CheckoutSessionPaymentMethodOptions option, paymentMethodTypes: string list, paymentStatus: CheckoutSessionPaymentStatus, recoveredFrom: string option, setupIntent: CheckoutSessionSetupIntent'AnyOf option, shippingAddressCollection: PaymentPagesCheckoutSessionShippingAddressCollection option, shippingCost: PaymentPagesCheckoutSessionShippingCost option, shippingDetails: Shipping option, shippingOptions: PaymentPagesCheckoutSessionShippingOption list, status: CheckoutSessionStatus option, submitType: CheckoutSessionSubmitType option, subscription: CheckoutSessionSubscription'AnyOf option, successUrl: string option, totalDetails: PaymentPagesCheckoutSessionTotalDetails option, url: string option, ?lineItems: CheckoutSessionLineItems, ?phoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection, ?taxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection) =
            {
                CheckoutSession.AfterExpiration = afterExpiration //required
                CheckoutSession.AllowPromotionCodes = allowPromotionCodes //required
                CheckoutSession.AmountSubtotal = amountSubtotal //required
                CheckoutSession.AmountTotal = amountTotal //required
                CheckoutSession.AutomaticTax = automaticTax //required
                CheckoutSession.BillingAddressCollection = billingAddressCollection //required
                CheckoutSession.CancelUrl = cancelUrl //required
                CheckoutSession.ClientReferenceId = clientReferenceId //required
                CheckoutSession.Consent = consent //required
                CheckoutSession.ConsentCollection = consentCollection //required
                CheckoutSession.Created = created //required
                CheckoutSession.Currency = currency //required
                CheckoutSession.CurrencyConversion = currencyConversion //required
                CheckoutSession.CustomFields = customFields //required
                CheckoutSession.CustomText = customText //required
                CheckoutSession.Customer = customer //required
                CheckoutSession.CustomerCreation = customerCreation //required
                CheckoutSession.CustomerDetails = customerDetails //required
                CheckoutSession.CustomerEmail = customerEmail //required
                CheckoutSession.ExpiresAt = expiresAt //required
                CheckoutSession.Id = id //required
                CheckoutSession.Invoice = invoice //required
                CheckoutSession.InvoiceCreation = invoiceCreation //required
                CheckoutSession.Livemode = livemode //required
                CheckoutSession.Locale = locale //required
                CheckoutSession.Metadata = metadata //required
                CheckoutSession.Mode = mode //required
                CheckoutSession.PaymentIntent = paymentIntent //required
                CheckoutSession.PaymentLink = paymentLink //required
                CheckoutSession.PaymentMethodCollection = paymentMethodCollection //required
                CheckoutSession.PaymentMethodOptions = paymentMethodOptions //required
                CheckoutSession.PaymentMethodTypes = paymentMethodTypes //required
                CheckoutSession.PaymentStatus = paymentStatus //required
                CheckoutSession.RecoveredFrom = recoveredFrom //required
                CheckoutSession.SetupIntent = setupIntent //required
                CheckoutSession.ShippingAddressCollection = shippingAddressCollection //required
                CheckoutSession.ShippingCost = shippingCost //required
                CheckoutSession.ShippingDetails = shippingDetails //required
                CheckoutSession.ShippingOptions = shippingOptions //required
                CheckoutSession.Status = status //required
                CheckoutSession.SubmitType = submitType //required
                CheckoutSession.Subscription = subscription //required
                CheckoutSession.SuccessUrl = successUrl //required
                CheckoutSession.TotalDetails = totalDetails //required
                CheckoutSession.Url = url //required
                CheckoutSession.LineItems = lineItems
                CheckoutSession.PhoneNumberCollection = phoneNumberCollection
                CheckoutSession.TaxIdCollection = taxIdCollection
            }

    and CheckoutSessionBillingAddressCollection =
        | Auto
        | Required

    and CheckoutSessionCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and CheckoutSessionCustomerCreation =
        | Always
        | IfRequired

    and CheckoutSessionInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and CheckoutSessionLocale =
        | Auto
        | Bg
        | Cs
        | Da
        | De
        | El
        | En
        | [<JsonUnionCase("en-GB")>] EnGB
        | Es
        | [<JsonUnionCase("es-419")>] Es419
        | Et
        | Fi
        | Fil
        | Fr
        | [<JsonUnionCase("fr-CA")>] FrCA
        | Hr
        | Hu
        | Id
        | It
        | Ja
        | Ko
        | Lt
        | Lv
        | Ms
        | Mt
        | Nb
        | Nl
        | Pl
        | Pt
        | [<JsonUnionCase("pt-BR")>] PtBR
        | Ro
        | Ru
        | Sk
        | Sl
        | Sv
        | Th
        | Tr
        | Vi
        | Zh
        | [<JsonUnionCase("zh-HK")>] ZhHK
        | [<JsonUnionCase("zh-TW")>] ZhTW

    and CheckoutSessionMode =
        | Payment
        | Setup
        | Subscription

    and CheckoutSessionPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and CheckoutSessionPaymentLink'AnyOf =
        | String of string
        | PaymentLink of PaymentLink

    and CheckoutSessionPaymentMethodCollection =
        | Always
        | IfRequired

    and CheckoutSessionPaymentStatus =
        | NoPaymentRequired
        | Paid
        | Unpaid

    and CheckoutSessionSetupIntent'AnyOf =
        | String of string
        | SetupIntent of SetupIntent

    and CheckoutSessionStatus =
        | Complete
        | Expired
        | Open

    and CheckoutSessionSubmitType =
        | Auto
        | Book
        | Donate
        | Pay

    and CheckoutSessionSubscription'AnyOf =
        | String of string
        | Subscription of Subscription

    ///The line items purchased by the customer.
    and CheckoutSessionLineItems = {
        ///Details about each object.
        Data: Item list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: Item list, hasMore: bool, url: string) =
            {
                CheckoutSessionLineItems.Data = data //required
                CheckoutSessionLineItems.HasMore = hasMore //required
                CheckoutSessionLineItems.Url = url //required
            }

    and CheckoutAcssDebitMandateOptions = {
        ///A URL for custom mandate text
        CustomMandateUrl: string option
        ///List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.
        DefaultFor: CheckoutAcssDebitMandateOptionsDefaultFor list option
        ///Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
        IntervalDescription: string option
        ///Payment schedule for the mandate.
        PaymentSchedule: CheckoutAcssDebitMandateOptionsPaymentSchedule option
        ///Transaction type of the mandate.
        TransactionType: CheckoutAcssDebitMandateOptionsTransactionType option
    }
    with
        static member New (intervalDescription: string option, paymentSchedule: CheckoutAcssDebitMandateOptionsPaymentSchedule option, transactionType: CheckoutAcssDebitMandateOptionsTransactionType option, ?customMandateUrl: string, ?defaultFor: CheckoutAcssDebitMandateOptionsDefaultFor list) =
            {
                CheckoutAcssDebitMandateOptions.IntervalDescription = intervalDescription //required
                CheckoutAcssDebitMandateOptions.PaymentSchedule = paymentSchedule //required
                CheckoutAcssDebitMandateOptions.TransactionType = transactionType //required
                CheckoutAcssDebitMandateOptions.CustomMandateUrl = customMandateUrl
                CheckoutAcssDebitMandateOptions.DefaultFor = defaultFor
            }

    and CheckoutAcssDebitMandateOptionsPaymentSchedule =
        | Combined
        | Interval
        | Sporadic

    and CheckoutAcssDebitMandateOptionsTransactionType =
        | Business
        | Personal

    and CheckoutAcssDebitMandateOptionsDefaultFor =
        | Invoice
        | Subscription

    and CheckoutAcssDebitPaymentMethodOptions = {
        ///Currency supported by the bank account. Returned when the Session is in `setup` mode.
        Currency: CheckoutAcssDebitPaymentMethodOptionsCurrency option
        MandateOptions: CheckoutAcssDebitMandateOptions option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage option
        ///Bank account verification method.
        VerificationMethod: CheckoutAcssDebitPaymentMethodOptionsVerificationMethod option
    }
    with
        static member New (?currency: CheckoutAcssDebitPaymentMethodOptionsCurrency, ?mandateOptions: CheckoutAcssDebitMandateOptions, ?setupFutureUsage: CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage, ?verificationMethod: CheckoutAcssDebitPaymentMethodOptionsVerificationMethod) =
            {
                CheckoutAcssDebitPaymentMethodOptions.Currency = currency
                CheckoutAcssDebitPaymentMethodOptions.MandateOptions = mandateOptions
                CheckoutAcssDebitPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
                CheckoutAcssDebitPaymentMethodOptions.VerificationMethod = verificationMethod
            }

    and CheckoutAcssDebitPaymentMethodOptionsCurrency =
        | Cad
        | Usd

    and CheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutAcssDebitPaymentMethodOptionsVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and CheckoutAffirmPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutAfterpayClearpayPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutAlipayPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutAuBecsDebitPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutBacsDebitPaymentMethodOptions = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage) =
            {
                CheckoutBacsDebitPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
            }

    and CheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutBancontactPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutBoletoPaymentMethodOptions = {
        ///The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
        ExpiresAfterDays: int
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutBoletoPaymentMethodOptionsSetupFutureUsage option
    }
    with
        static member New (expiresAfterDays: int, ?setupFutureUsage: CheckoutBoletoPaymentMethodOptionsSetupFutureUsage) =
            {
                CheckoutBoletoPaymentMethodOptions.ExpiresAfterDays = expiresAfterDays //required
                CheckoutBoletoPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
            }

    and CheckoutBoletoPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutCardInstallmentsOptions = {
        ///Indicates if installments are enabled
        Enabled: bool option
    }
    with
        static member New (?enabled: bool) =
            {
                CheckoutCardInstallmentsOptions.Enabled = enabled
            }

    and CheckoutCardPaymentMethodOptions = {
        Installments: CheckoutCardInstallmentsOptions option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutCardPaymentMethodOptionsSetupFutureUsage option
        ///Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
        StatementDescriptorSuffixKana: string option
        ///Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
        StatementDescriptorSuffixKanji: string option
    }
    with
        static member New (?installments: CheckoutCardInstallmentsOptions, ?setupFutureUsage: CheckoutCardPaymentMethodOptionsSetupFutureUsage, ?statementDescriptorSuffixKana: string, ?statementDescriptorSuffixKanji: string) =
            {
                CheckoutCardPaymentMethodOptions.Installments = installments
                CheckoutCardPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
                CheckoutCardPaymentMethodOptions.StatementDescriptorSuffixKana = statementDescriptorSuffixKana
                CheckoutCardPaymentMethodOptions.StatementDescriptorSuffixKanji = statementDescriptorSuffixKanji
            }

    and CheckoutCardPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutCashappPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutCustomerBalanceBankTransferPaymentMethodOptions = {
        EuBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount option
        ///List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
        ///Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
        RequestedAddressTypes: CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes list option
        ///The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
        Type: CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType option
    }
    with
        static member New (``type``: CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType option, ?euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount, ?requestedAddressTypes: CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes list) =
            {
                CheckoutCustomerBalanceBankTransferPaymentMethodOptions.Type = ``type`` //required
                CheckoutCustomerBalanceBankTransferPaymentMethodOptions.EuBankTransfer = euBankTransfer
                CheckoutCustomerBalanceBankTransferPaymentMethodOptions.RequestedAddressTypes = requestedAddressTypes
            }

    and CheckoutCustomerBalanceBankTransferPaymentMethodOptionsType =
        | EuBankTransfer
        | GbBankTransfer
        | JpBankTransfer
        | MxBankTransfer
        | UsBankTransfer

    and CheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes =
        | Aba
        | Iban
        | Sepa
        | SortCode
        | Spei
        | Swift
        | Zengin

    and CheckoutCustomerBalancePaymentMethodOptions = {
        BankTransfer: CheckoutCustomerBalanceBankTransferPaymentMethodOptions option
    }
    with
        ///The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
        member _.FundingType = "bank_transfer"
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (?bankTransfer: CheckoutCustomerBalanceBankTransferPaymentMethodOptions) =
            {
                CheckoutCustomerBalancePaymentMethodOptions.BankTransfer = bankTransfer
            }

    and CheckoutEpsPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutFpxPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutGiropayPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutGrabPayPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutIdealPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutKlarnaPaymentMethodOptions = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage) =
            {
                CheckoutKlarnaPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
            }

    and CheckoutKlarnaPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutKonbiniPaymentMethodOptions = {
        ///The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
        ExpiresAfterDays: int option
    }
    with
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (expiresAfterDays: int option) =
            {
                CheckoutKonbiniPaymentMethodOptions.ExpiresAfterDays = expiresAfterDays //required
            }

    and CheckoutLinkPaymentMethodOptions = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutLinkPaymentMethodOptionsSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: CheckoutLinkPaymentMethodOptionsSetupFutureUsage) =
            {
                CheckoutLinkPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
            }

    and CheckoutLinkPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and CheckoutOxxoPaymentMethodOptions = {
        ///The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
        ExpiresAfterDays: int
    }
    with
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (expiresAfterDays: int) =
            {
                CheckoutOxxoPaymentMethodOptions.ExpiresAfterDays = expiresAfterDays //required
            }

    and CheckoutP24PaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutPaynowPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutPixPaymentMethodOptions = {
        ///The number of seconds after which Pix payment will expire.
        ExpiresAfterSeconds: int option
    }
    with
        static member New (expiresAfterSeconds: int option) =
            {
                CheckoutPixPaymentMethodOptions.ExpiresAfterSeconds = expiresAfterSeconds //required
            }

    and CheckoutSepaDebitPaymentMethodOptions = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage) =
            {
                CheckoutSepaDebitPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
            }

    and CheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutSessionPaymentMethodOptions = {
        AcssDebit: CheckoutAcssDebitPaymentMethodOptions option
        Affirm: CheckoutAffirmPaymentMethodOptions option
        AfterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions option
        Alipay: CheckoutAlipayPaymentMethodOptions option
        AuBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions option
        BacsDebit: CheckoutBacsDebitPaymentMethodOptions option
        Bancontact: CheckoutBancontactPaymentMethodOptions option
        Boleto: CheckoutBoletoPaymentMethodOptions option
        Card: CheckoutCardPaymentMethodOptions option
        Cashapp: CheckoutCashappPaymentMethodOptions option
        CustomerBalance: CheckoutCustomerBalancePaymentMethodOptions option
        Eps: CheckoutEpsPaymentMethodOptions option
        Fpx: CheckoutFpxPaymentMethodOptions option
        Giropay: CheckoutGiropayPaymentMethodOptions option
        Grabpay: CheckoutGrabPayPaymentMethodOptions option
        Ideal: CheckoutIdealPaymentMethodOptions option
        Klarna: CheckoutKlarnaPaymentMethodOptions option
        Konbini: CheckoutKonbiniPaymentMethodOptions option
        Link: CheckoutLinkPaymentMethodOptions option
        Oxxo: CheckoutOxxoPaymentMethodOptions option
        [<JsonField(Name="p24")>]P24: CheckoutP24PaymentMethodOptions option
        Paynow: CheckoutPaynowPaymentMethodOptions option
        Pix: CheckoutPixPaymentMethodOptions option
        SepaDebit: CheckoutSepaDebitPaymentMethodOptions option
        Sofort: CheckoutSofortPaymentMethodOptions option
        UsBankAccount: CheckoutUsBankAccountPaymentMethodOptions option
    }
    with
        static member New (?acssDebit: CheckoutAcssDebitPaymentMethodOptions, ?affirm: CheckoutAffirmPaymentMethodOptions, ?afterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions, ?alipay: CheckoutAlipayPaymentMethodOptions, ?auBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions, ?bacsDebit: CheckoutBacsDebitPaymentMethodOptions, ?bancontact: CheckoutBancontactPaymentMethodOptions, ?boleto: CheckoutBoletoPaymentMethodOptions, ?card: CheckoutCardPaymentMethodOptions, ?cashapp: CheckoutCashappPaymentMethodOptions, ?customerBalance: CheckoutCustomerBalancePaymentMethodOptions, ?eps: CheckoutEpsPaymentMethodOptions, ?fpx: CheckoutFpxPaymentMethodOptions, ?giropay: CheckoutGiropayPaymentMethodOptions, ?grabpay: CheckoutGrabPayPaymentMethodOptions, ?ideal: CheckoutIdealPaymentMethodOptions, ?klarna: CheckoutKlarnaPaymentMethodOptions, ?konbini: CheckoutKonbiniPaymentMethodOptions, ?link: CheckoutLinkPaymentMethodOptions, ?oxxo: CheckoutOxxoPaymentMethodOptions, ?p24: CheckoutP24PaymentMethodOptions, ?paynow: CheckoutPaynowPaymentMethodOptions, ?pix: CheckoutPixPaymentMethodOptions, ?sepaDebit: CheckoutSepaDebitPaymentMethodOptions, ?sofort: CheckoutSofortPaymentMethodOptions, ?usBankAccount: CheckoutUsBankAccountPaymentMethodOptions) =
            {
                CheckoutSessionPaymentMethodOptions.AcssDebit = acssDebit
                CheckoutSessionPaymentMethodOptions.Affirm = affirm
                CheckoutSessionPaymentMethodOptions.AfterpayClearpay = afterpayClearpay
                CheckoutSessionPaymentMethodOptions.Alipay = alipay
                CheckoutSessionPaymentMethodOptions.AuBecsDebit = auBecsDebit
                CheckoutSessionPaymentMethodOptions.BacsDebit = bacsDebit
                CheckoutSessionPaymentMethodOptions.Bancontact = bancontact
                CheckoutSessionPaymentMethodOptions.Boleto = boleto
                CheckoutSessionPaymentMethodOptions.Card = card
                CheckoutSessionPaymentMethodOptions.Cashapp = cashapp
                CheckoutSessionPaymentMethodOptions.CustomerBalance = customerBalance
                CheckoutSessionPaymentMethodOptions.Eps = eps
                CheckoutSessionPaymentMethodOptions.Fpx = fpx
                CheckoutSessionPaymentMethodOptions.Giropay = giropay
                CheckoutSessionPaymentMethodOptions.Grabpay = grabpay
                CheckoutSessionPaymentMethodOptions.Ideal = ideal
                CheckoutSessionPaymentMethodOptions.Klarna = klarna
                CheckoutSessionPaymentMethodOptions.Konbini = konbini
                CheckoutSessionPaymentMethodOptions.Link = link
                CheckoutSessionPaymentMethodOptions.Oxxo = oxxo
                CheckoutSessionPaymentMethodOptions.P24 = p24
                CheckoutSessionPaymentMethodOptions.Paynow = paynow
                CheckoutSessionPaymentMethodOptions.Pix = pix
                CheckoutSessionPaymentMethodOptions.SepaDebit = sepaDebit
                CheckoutSessionPaymentMethodOptions.Sofort = sofort
                CheckoutSessionPaymentMethodOptions.UsBankAccount = usBankAccount
            }

    and CheckoutSofortPaymentMethodOptions () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and CheckoutUsBankAccountPaymentMethodOptions = {
        FinancialConnections: LinkedAccountOptionsUsBankAccount option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage option
        ///Bank account verification method.
        VerificationMethod: CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod option
    }
    with
        static member New (?financialConnections: LinkedAccountOptionsUsBankAccount, ?setupFutureUsage: CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage, ?verificationMethod: CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod) =
            {
                CheckoutUsBankAccountPaymentMethodOptions.FinancialConnections = financialConnections
                CheckoutUsBankAccountPaymentMethodOptions.SetupFutureUsage = setupFutureUsage
                CheckoutUsBankAccountPaymentMethodOptions.VerificationMethod = verificationMethod
            }

    and CheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and CheckoutUsBankAccountPaymentMethodOptionsVerificationMethod =
        | Automatic
        | Instant

    and ConnectCollectionTransfer = {
        ///Amount transferred, in cents (or local equivalent).
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the account that funds are being collected for.
        Destination: ConnectCollectionTransferDestination'AnyOf
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "connect_collection_transfer"

        static member New (amount: int, currency: string, destination: ConnectCollectionTransferDestination'AnyOf, id: string, livemode: bool) =
            {
                ConnectCollectionTransfer.Amount = amount //required
                ConnectCollectionTransfer.Currency = currency //required
                ConnectCollectionTransfer.Destination = destination //required
                ConnectCollectionTransfer.Id = id //required
                ConnectCollectionTransfer.Livemode = livemode //required
            }

    and ConnectCollectionTransferDestination'AnyOf =
        | String of string
        | Account of Account

    ///Stripe needs to collect certain pieces of information about each account
    ///created. These requirements can differ depending on the account's country. The
    ///Country Specs API makes these rules available to your integration.
    ///You can also view the information from this API call as [an online
    ///guide](/docs/connect/required-verification-information).
    and CountrySpec = {
        ///The default currency for this country. This applies to both payment methods and bank accounts.
        DefaultCurrency: string
        ///Unique identifier for the object. Represented as the ISO country code for this country.
        Id: string
        ///Currencies that can be accepted in the specific country (for transfers).
        SupportedBankAccountCurrencies: Map<string, string list>
        ///Currencies that can be accepted in the specified country (for payments).
        SupportedPaymentCurrencies: string list
        ///Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
        SupportedPaymentMethods: string list
        ///Countries that can accept transfers from the specified country.
        SupportedTransferCountries: string list
        VerificationFields: CountrySpecVerificationFields
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "country_spec"

        static member New (defaultCurrency: string, id: string, supportedBankAccountCurrencies: Map<string, string list>, supportedPaymentCurrencies: string list, supportedPaymentMethods: string list, supportedTransferCountries: string list, verificationFields: CountrySpecVerificationFields) =
            {
                CountrySpec.DefaultCurrency = defaultCurrency //required
                CountrySpec.Id = id //required
                CountrySpec.SupportedBankAccountCurrencies = supportedBankAccountCurrencies //required
                CountrySpec.SupportedPaymentCurrencies = supportedPaymentCurrencies //required
                CountrySpec.SupportedPaymentMethods = supportedPaymentMethods //required
                CountrySpec.SupportedTransferCountries = supportedTransferCountries //required
                CountrySpec.VerificationFields = verificationFields //required
            }

    and CountrySpecVerificationFieldDetails = {
        ///Additional fields which are only required for some users.
        Additional: string list
        ///Fields which every account must eventually provide.
        Minimum: string list
    }
    with
        static member New (additional: string list, minimum: string list) =
            {
                CountrySpecVerificationFieldDetails.Additional = additional //required
                CountrySpecVerificationFieldDetails.Minimum = minimum //required
            }

    and CountrySpecVerificationFields = {
        Company: CountrySpecVerificationFieldDetails
        Individual: CountrySpecVerificationFieldDetails
    }
    with
        static member New (company: CountrySpecVerificationFieldDetails, individual: CountrySpecVerificationFieldDetails) =
            {
                CountrySpecVerificationFields.Company = company //required
                CountrySpecVerificationFields.Individual = individual //required
            }

    ///A coupon contains information about a percent-off or amount-off discount you
    ///might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
    ///[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
    and Coupon = {
        ///Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
        AmountOff: int option
        AppliesTo: CouponAppliesTo option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
        Currency: string option
        ///Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
        CurrencyOptions: Map<string, string list> option
        ///One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
        Duration: CouponDuration
        ///If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
        DurationInMonths: int option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        MaxRedemptions: int option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Name of the coupon displayed to customers on for instance invoices or receipts.
        Name: string option
        ///Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
        PercentOff: decimal option
        ///Date after which the coupon can no longer be redeemed.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]RedeemBy: DateTime option
        ///Number of times this coupon has been applied to a customer.
        TimesRedeemed: int
        ///Taking account of the above properties, whether this coupon can still be applied to a customer.
        Valid: bool
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "coupon"

        static member New (amountOff: int option, created: DateTime, currency: string option, duration: CouponDuration, durationInMonths: int option, id: string, livemode: bool, maxRedemptions: int option, metadata: Map<string, string> option, name: string option, percentOff: decimal option, redeemBy: DateTime option, timesRedeemed: int, valid: bool, ?appliesTo: CouponAppliesTo, ?currencyOptions: Map<string, string list>) =
            {
                Coupon.AmountOff = amountOff //required
                Coupon.Created = created //required
                Coupon.Currency = currency //required
                Coupon.Duration = duration //required
                Coupon.DurationInMonths = durationInMonths //required
                Coupon.Id = id //required
                Coupon.Livemode = livemode //required
                Coupon.MaxRedemptions = maxRedemptions //required
                Coupon.Metadata = metadata //required
                Coupon.Name = name //required
                Coupon.PercentOff = percentOff //required
                Coupon.RedeemBy = redeemBy //required
                Coupon.TimesRedeemed = timesRedeemed //required
                Coupon.Valid = valid //required
                Coupon.AppliesTo = appliesTo
                Coupon.CurrencyOptions = currencyOptions
            }

    and CouponDuration =
        | Forever
        | Once
        | Repeating

    and CouponAppliesTo = {
        ///A list of product IDs this coupon applies to
        Products: string list
    }
    with
        static member New (products: string list) =
            {
                CouponAppliesTo.Products = products //required
            }

    and CouponCurrencyOption = {
        ///Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
        AmountOff: int
    }
    with
        static member New (amountOff: int) =
            {
                CouponCurrencyOption.AmountOff = amountOff //required
            }

    ///Issue a credit note to adjust an invoice's amount after the invoice is finalized.
    ///Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
    and CreditNote = {
        ///The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.
        Amount: int
        ///This is the sum of all the shipping amounts.
        AmountShipping: int
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the customer.
        Customer: CreditNoteCustomer'AnyOf
        ///Customer balance transaction related to this credit note.
        CustomerBalanceTransaction: CreditNoteCustomerBalanceTransaction'AnyOf option
        ///The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.
        DiscountAmount: int
        ///The aggregate amounts calculated per discount for all line items.
        DiscountAmounts: DiscountsResourceDiscountAmount list
        ///The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EffectiveAt: DateTime option
        ///Unique identifier for the object.
        Id: string
        ///ID of the invoice.
        Invoice: CreditNoteInvoice'AnyOf
        ///Line items that make up the credit note
        Lines: CreditNoteLines
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Customer-facing text that appears on the credit note PDF.
        Memo: string option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
        Number: string
        ///Amount that was credited outside of Stripe.
        OutOfBandAmount: int option
        ///The link to download the PDF of the credit note.
        Pdf: string
        ///Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
        Reason: CreditNoteReason option
        ///Refund related to this credit note.
        Refund: CreditNoteRefund'AnyOf option
        ///The details of the cost of shipping, including the ShippingRate applied to the invoice.
        ShippingCost: InvoicesShippingCost option
        ///Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
        Status: CreditNoteStatus
        ///The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.
        Subtotal: int
        ///The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.
        SubtotalExcludingTax: int option
        ///The aggregate amounts calculated per tax rate for all line items.
        TaxAmounts: CreditNoteTaxAmount list
        ///The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.
        Total: int
        ///The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.
        TotalExcludingTax: int option
        ///Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
        Type: CreditNoteType
        ///The time that the credit note was voided.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]VoidedAt: DateTime option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "credit_note"

        static member New (amount: int, amountShipping: int, created: DateTime, currency: string, customer: CreditNoteCustomer'AnyOf, customerBalanceTransaction: CreditNoteCustomerBalanceTransaction'AnyOf option, discountAmount: int, discountAmounts: DiscountsResourceDiscountAmount list, effectiveAt: DateTime option, id: string, invoice: CreditNoteInvoice'AnyOf, lines: CreditNoteLines, livemode: bool, memo: string option, metadata: Map<string, string> option, number: string, outOfBandAmount: int option, pdf: string, reason: CreditNoteReason option, refund: CreditNoteRefund'AnyOf option, shippingCost: InvoicesShippingCost option, status: CreditNoteStatus, subtotal: int, subtotalExcludingTax: int option, taxAmounts: CreditNoteTaxAmount list, total: int, totalExcludingTax: int option, ``type``: CreditNoteType, voidedAt: DateTime option) =
            {
                CreditNote.Amount = amount //required
                CreditNote.AmountShipping = amountShipping //required
                CreditNote.Created = created //required
                CreditNote.Currency = currency //required
                CreditNote.Customer = customer //required
                CreditNote.CustomerBalanceTransaction = customerBalanceTransaction //required
                CreditNote.DiscountAmount = discountAmount //required
                CreditNote.DiscountAmounts = discountAmounts //required
                CreditNote.EffectiveAt = effectiveAt //required
                CreditNote.Id = id //required
                CreditNote.Invoice = invoice //required
                CreditNote.Lines = lines //required
                CreditNote.Livemode = livemode //required
                CreditNote.Memo = memo //required
                CreditNote.Metadata = metadata //required
                CreditNote.Number = number //required
                CreditNote.OutOfBandAmount = outOfBandAmount //required
                CreditNote.Pdf = pdf //required
                CreditNote.Reason = reason //required
                CreditNote.Refund = refund //required
                CreditNote.ShippingCost = shippingCost //required
                CreditNote.Status = status //required
                CreditNote.Subtotal = subtotal //required
                CreditNote.SubtotalExcludingTax = subtotalExcludingTax //required
                CreditNote.TaxAmounts = taxAmounts //required
                CreditNote.Total = total //required
                CreditNote.TotalExcludingTax = totalExcludingTax //required
                CreditNote.Type = ``type`` //required
                CreditNote.VoidedAt = voidedAt //required
            }

    and CreditNoteCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and CreditNoteCustomerBalanceTransaction'AnyOf =
        | String of string
        | CustomerBalanceTransaction of CustomerBalanceTransaction

    and CreditNoteInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and CreditNoteReason =
        | Duplicate
        | Fraudulent
        | OrderChange
        | ProductUnsatisfactory

    and CreditNoteRefund'AnyOf =
        | String of string
        | Refund of Refund

    and CreditNoteStatus =
        | Issued
        | Void

    and CreditNoteType =
        | PostPayment
        | PrePayment

    ///Line items that make up the credit note
    and CreditNoteLines = {
        ///Details about each object.
        Data: CreditNoteLineItem list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: CreditNoteLineItem list, hasMore: bool, url: string) =
            {
                CreditNoteLines.Data = data //required
                CreditNoteLines.HasMore = hasMore //required
                CreditNoteLines.Url = url //required
            }

    ///The credit note line item object
    and CreditNoteLineItem = {
        ///The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
        Amount: int
        ///The integer amount in cents (or local equivalent) representing the amount being credited for this line item, excluding all tax and discounts.
        AmountExcludingTax: int option
        ///Description of the item being credited.
        Description: string option
        ///The integer amount in cents (or local equivalent) representing the discount being credited for this line item.
        DiscountAmount: int
        ///The amount of discount calculated per discount for this line item
        DiscountAmounts: DiscountsResourceDiscountAmount list
        ///Unique identifier for the object.
        Id: string
        ///ID of the invoice line item being credited
        InvoiceLineItem: string option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The number of units of product being credited.
        Quantity: int option
        ///The amount of tax calculated per tax rate for this line item
        TaxAmounts: CreditNoteTaxAmount list
        ///The tax rates which apply to the line item.
        TaxRates: TaxRate list
        ///The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
        Type: CreditNoteLineItemType
        ///The cost of each unit of product being credited.
        UnitAmount: int option
        ///Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
        UnitAmountDecimal: string option
        ///The amount in cents (or local equivalent) representing the unit amount being credited for this line item, excluding all tax and discounts.
        UnitAmountExcludingTax: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "credit_note_line_item"

        static member New (amount: int, amountExcludingTax: int option, description: string option, discountAmount: int, discountAmounts: DiscountsResourceDiscountAmount list, id: string, livemode: bool, quantity: int option, taxAmounts: CreditNoteTaxAmount list, taxRates: TaxRate list, ``type``: CreditNoteLineItemType, unitAmount: int option, unitAmountDecimal: string option, unitAmountExcludingTax: string option, ?invoiceLineItem: string) =
            {
                CreditNoteLineItem.Amount = amount //required
                CreditNoteLineItem.AmountExcludingTax = amountExcludingTax //required
                CreditNoteLineItem.Description = description //required
                CreditNoteLineItem.DiscountAmount = discountAmount //required
                CreditNoteLineItem.DiscountAmounts = discountAmounts //required
                CreditNoteLineItem.Id = id //required
                CreditNoteLineItem.Livemode = livemode //required
                CreditNoteLineItem.Quantity = quantity //required
                CreditNoteLineItem.TaxAmounts = taxAmounts //required
                CreditNoteLineItem.TaxRates = taxRates //required
                CreditNoteLineItem.Type = ``type`` //required
                CreditNoteLineItem.UnitAmount = unitAmount //required
                CreditNoteLineItem.UnitAmountDecimal = unitAmountDecimal //required
                CreditNoteLineItem.UnitAmountExcludingTax = unitAmountExcludingTax //required
                CreditNoteLineItem.InvoiceLineItem = invoiceLineItem
            }

    and CreditNoteLineItemType =
        | CustomLineItem
        | InvoiceLineItem

    and CreditNoteTaxAmount = {
        ///The amount, in cents (or local equivalent), of the tax.
        Amount: int
        ///Whether this tax amount is inclusive or exclusive.
        Inclusive: bool
        ///The tax rate that was applied to get this tax amount.
        TaxRate: CreditNoteTaxAmountTaxRate'AnyOf
        ///The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
        TaxabilityReason: CreditNoteTaxAmountTaxabilityReason option
        ///The amount on which tax is calculated, in cents (or local equivalent).
        TaxableAmount: int option
    }
    with
        static member New (amount: int, inclusive: bool, taxRate: CreditNoteTaxAmountTaxRate'AnyOf, taxabilityReason: CreditNoteTaxAmountTaxabilityReason option, taxableAmount: int option) =
            {
                CreditNoteTaxAmount.Amount = amount //required
                CreditNoteTaxAmount.Inclusive = inclusive //required
                CreditNoteTaxAmount.TaxRate = taxRate //required
                CreditNoteTaxAmount.TaxabilityReason = taxabilityReason //required
                CreditNoteTaxAmount.TaxableAmount = taxableAmount //required
            }

    and CreditNoteTaxAmountTaxRate'AnyOf =
        | String of string
        | TaxRate of TaxRate

    and CreditNoteTaxAmountTaxabilityReason =
        | CustomerExempt
        | NotCollecting
        | NotSubjectToTax
        | NotSupported
        | PortionProductExempt
        | PortionReducedRated
        | PortionStandardRated
        | ProductExempt
        | ProductExemptHoliday
        | ProportionallyRated
        | ReducedRated
        | ReverseCharge
        | StandardRated
        | TaxableBasisReduced
        | ZeroRated

    and CurrencyOption = {
        ///When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
        CustomUnitAmount: CustomUnitAmount option
        ///Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
        TaxBehavior: CurrencyOptionTaxBehavior option
        ///Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
        Tiers: PriceTier list option
        ///The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
        UnitAmount: int option
        ///The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
        UnitAmountDecimal: string option
    }
    with
        static member New (customUnitAmount: CustomUnitAmount option, taxBehavior: CurrencyOptionTaxBehavior option, unitAmount: int option, unitAmountDecimal: string option, ?tiers: PriceTier list) =
            {
                CurrencyOption.CustomUnitAmount = customUnitAmount //required
                CurrencyOption.TaxBehavior = taxBehavior //required
                CurrencyOption.UnitAmount = unitAmount //required
                CurrencyOption.UnitAmountDecimal = unitAmountDecimal //required
                CurrencyOption.Tiers = tiers
            }

    and CurrencyOptionTaxBehavior =
        | Exclusive
        | Inclusive
        | Unspecified

    and CustomUnitAmount = {
        ///The maximum unit amount the customer can specify for this item.
        Maximum: int option
        ///The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
        Minimum: int option
        ///The starting unit amount which can be updated by the customer.
        Preset: int option
    }
    with
        static member New (maximum: int option, minimum: int option, preset: int option) =
            {
                CustomUnitAmount.Maximum = maximum //required
                CustomUnitAmount.Minimum = minimum //required
                CustomUnitAmount.Preset = preset //required
            }

    ///This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
    ///Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment)
    and Customer = {
        ///The customer's address.
        Address: Address option
        ///Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
        Balance: int option
        ///The current funds being held by Stripe on behalf of the customer. These funds can be applied towards payment intents with source "cash_balance". The settings[reconciliation_mode] field describes whether these funds are applied to such payment intents manually or automatically.
        CashBalance: CashBalance option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
        Currency: string option
        ///ID of the default payment source for the customer.
        ///If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
        DefaultSource: CustomerDefaultSource'AnyOf option
        ///When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
        ///If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
        Delinquent: bool option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Describes the current discount active on the customer, if there is one.
        Discount: Discount option
        ///The customer's email address.
        Email: string option
        ///Unique identifier for the object.
        Id: string
        ///The current multi-currency balances, if any, being stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that will be added to their next invoice denominated in that currency. These balances do not refer to any unpaid invoices. They solely track amounts that have yet to be successfully applied to any invoice. A balance in a particular currency is only applied to any invoice as an invoice in that currency is finalized.
        InvoiceCreditBalance: Map<string, string list> option
        ///The prefix for the customer used to generate unique invoice numbers.
        InvoicePrefix: string option
        InvoiceSettings: InvoiceSettingCustomerSetting option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The customer's full name or business name.
        Name: string option
        ///The suffix of the customer's next invoice number, e.g., 0001.
        NextInvoiceSequence: int option
        ///The customer's phone number.
        Phone: string option
        ///The customer's preferred locales (languages), ordered by preference.
        PreferredLocales: string list option
        ///Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
        Shipping: Shipping option
        ///The customer's payment sources, if any.
        Sources: CustomerSources option
        ///The customer's current subscriptions, if any.
        Subscriptions: CustomerSubscriptions option
        Tax: CustomerTax option
        ///Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
        TaxExempt: CustomerTaxExempt option
        ///The customer's tax IDs.
        TaxIds: CustomerTaxIds option
        ///ID of the test clock this customer belongs to.
        TestClock: CustomerTestClock'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "customer"

        static member New (created: DateTime, defaultSource: CustomerDefaultSource'AnyOf option, description: string option, email: string option, id: string, livemode: bool, shipping: Shipping option, ?address: Address option, ?balance: int, ?cashBalance: CashBalance option, ?currency: string option, ?delinquent: bool option, ?discount: Discount option, ?invoiceCreditBalance: Map<string, string list>, ?invoicePrefix: string option, ?invoiceSettings: InvoiceSettingCustomerSetting, ?metadata: Map<string, string>, ?name: string option, ?nextInvoiceSequence: int, ?phone: string option, ?preferredLocales: string list option, ?sources: CustomerSources, ?subscriptions: CustomerSubscriptions, ?tax: CustomerTax, ?taxExempt: CustomerTaxExempt option, ?taxIds: CustomerTaxIds, ?testClock: CustomerTestClock'AnyOf option) =
            {
                Customer.Created = created //required
                Customer.DefaultSource = defaultSource //required
                Customer.Description = description //required
                Customer.Email = email //required
                Customer.Id = id //required
                Customer.Livemode = livemode //required
                Customer.Shipping = shipping //required
                Customer.Address = address |> Option.flatten
                Customer.Balance = balance
                Customer.CashBalance = cashBalance |> Option.flatten
                Customer.Currency = currency |> Option.flatten
                Customer.Delinquent = delinquent |> Option.flatten
                Customer.Discount = discount |> Option.flatten
                Customer.InvoiceCreditBalance = invoiceCreditBalance
                Customer.InvoicePrefix = invoicePrefix |> Option.flatten
                Customer.InvoiceSettings = invoiceSettings
                Customer.Metadata = metadata
                Customer.Name = name |> Option.flatten
                Customer.NextInvoiceSequence = nextInvoiceSequence
                Customer.Phone = phone |> Option.flatten
                Customer.PreferredLocales = preferredLocales |> Option.flatten
                Customer.Sources = sources
                Customer.Subscriptions = subscriptions
                Customer.Tax = tax
                Customer.TaxExempt = taxExempt |> Option.flatten
                Customer.TaxIds = taxIds
                Customer.TestClock = testClock |> Option.flatten
            }

    and CustomerDefaultSource'AnyOf =
        | String of string
        | PaymentSource of PaymentSource

    and CustomerTaxExempt =
        | Exempt
        | [<JsonUnionCase("none")>] None'
        | Reverse

    and CustomerTestClock'AnyOf =
        | String of string
        | TestHelpersTestClock of TestHelpersTestClock

    ///The customer's payment sources, if any.
    and CustomerSources = {
        ///Details about each object.
        Data: PaymentSource list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: PaymentSource list, hasMore: bool, url: string) =
            {
                CustomerSources.Data = data //required
                CustomerSources.HasMore = hasMore //required
                CustomerSources.Url = url //required
            }

    ///The customer's current subscriptions, if any.
    and CustomerSubscriptions = {
        ///Details about each object.
        Data: Subscription list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: Subscription list, hasMore: bool, url: string) =
            {
                CustomerSubscriptions.Data = data //required
                CustomerSubscriptions.HasMore = hasMore //required
                CustomerSubscriptions.Url = url //required
            }

    ///The customer's tax IDs.
    and CustomerTaxIds = {
        ///Details about each object.
        Data: TaxId list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: TaxId list, hasMore: bool, url: string) =
            {
                CustomerTaxIds.Data = data //required
                CustomerTaxIds.HasMore = hasMore //required
                CustomerTaxIds.Url = url //required
            }

    and CustomerAcceptance = {
        ///The time at which the customer accepted the Mandate.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]AcceptedAt: DateTime option
        Offline: OfflineAcceptance option
        Online: OnlineAcceptance option
        ///The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
        Type: CustomerAcceptanceType
    }
    with
        static member New (acceptedAt: DateTime option, ``type``: CustomerAcceptanceType, ?offline: OfflineAcceptance, ?online: OnlineAcceptance) =
            {
                CustomerAcceptance.AcceptedAt = acceptedAt //required
                CustomerAcceptance.Type = ``type`` //required
                CustomerAcceptance.Offline = offline
                CustomerAcceptance.Online = online
            }

    and CustomerAcceptanceType =
        | Offline
        | Online

    and CustomerBalanceCustomerBalanceSettings = {
        ///The configuration for how funds that land in the customer cash balance are reconciled.
        ReconciliationMode: CustomerBalanceCustomerBalanceSettingsReconciliationMode
        ///A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance
        UsingMerchantDefault: bool
    }
    with
        static member New (reconciliationMode: CustomerBalanceCustomerBalanceSettingsReconciliationMode, usingMerchantDefault: bool) =
            {
                CustomerBalanceCustomerBalanceSettings.ReconciliationMode = reconciliationMode //required
                CustomerBalanceCustomerBalanceSettings.UsingMerchantDefault = usingMerchantDefault //required
            }

    and CustomerBalanceCustomerBalanceSettingsReconciliationMode =
        | Automatic
        | Manual

    and CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft = {
        ///The [Balance Transaction](docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance.
        BalanceTransaction: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftBalanceTransaction'AnyOf
        ///The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds.
        LinkedTransaction: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftLinkedTransaction'AnyOf
    }
    with
        static member New (balanceTransaction: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftBalanceTransaction'AnyOf, linkedTransaction: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftLinkedTransaction'AnyOf) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft.BalanceTransaction = balanceTransaction //required
                CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft.LinkedTransaction = linkedTransaction //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftLinkedTransaction'AnyOf =
        | String of string
        | CustomerCashBalanceTransaction of CustomerCashBalanceTransaction

    and CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction = {
        ///The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to.
        PaymentIntent: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionPaymentIntent'AnyOf
    }
    with
        static member New (paymentIntent: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionPaymentIntent'AnyOf) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction.PaymentIntent = paymentIntent //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction = {
        BankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
    }
    with
        static member New (bankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction.BankTransfer = bankTransfer //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer = {
        EuBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer option
        GbBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer option
        JpBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer option
        ///The user-supplied reference field on the bank transfer.
        Reference: string option
        ///The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
        Type: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType
        UsBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer option
    }
    with
        static member New (reference: string option, ``type``: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType, ?euBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer, ?gbBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer, ?jpBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer, ?usBankTransfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer.Reference = reference //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer.Type = ``type`` //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer.EuBankTransfer = euBankTransfer
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer.GbBankTransfer = gbBankTransfer
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer.JpBankTransfer = jpBankTransfer
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer.UsBankTransfer = usBankTransfer
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType =
        | EuBankTransfer
        | GbBankTransfer
        | JpBankTransfer
        | MxBankTransfer
        | UsBankTransfer

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer = {
        ///The BIC of the bank of the sender of the funding.
        Bic: string option
        ///The last 4 digits of the IBAN of the sender of the funding.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///The full name of the sender, as supplied by the sending bank.
        SenderName: string option
    }
    with
        static member New (bic: string option, ibanLast4: string option, senderName: string option) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer.Bic = bic //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer.IbanLast4 = ibanLast4 //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer.SenderName = senderName //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer = {
        ///The last 4 digits of the account number of the sender of the funding.
        [<JsonField(Name="account_number_last4")>]AccountNumberLast4: string option
        ///The full name of the sender, as supplied by the sending bank.
        SenderName: string option
        ///The sort code of the bank of the sender of the funding
        SortCode: string option
    }
    with
        static member New (accountNumberLast4: string option, senderName: string option, sortCode: string option) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer.AccountNumberLast4 = accountNumberLast4 //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer.SenderName = senderName //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer.SortCode = sortCode //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer = {
        ///The name of the bank of the sender of the funding.
        SenderBank: string option
        ///The name of the bank branch of the sender of the funding.
        SenderBranch: string option
        ///The full name of the sender, as supplied by the sending bank.
        SenderName: string option
    }
    with
        static member New (senderBank: string option, senderBranch: string option, senderName: string option) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer.SenderBank = senderBank //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer.SenderBranch = senderBranch //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer.SenderName = senderName //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer = {
        ///The banking network used for this funding.
        Network: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferNetwork option
        ///The full name of the sender, as supplied by the sending bank.
        SenderName: string option
    }
    with
        static member New (senderName: string option, ?network: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferNetwork) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer.SenderName = senderName //required
                CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer.Network = network
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferNetwork =
        | Ach
        | DomesticWireUs
        | Swift

    and CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction = {
        ///The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance.
        Refund: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'AnyOf
    }
    with
        static member New (refund: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'AnyOf) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction.Refund = refund //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'AnyOf =
        | String of string
        | Refund of Refund

    and CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction = {
        ///The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from.
        PaymentIntent: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'AnyOf
    }
    with
        static member New (paymentIntent: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'AnyOf) =
            {
                CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction.PaymentIntent = paymentIntent //required
            }

    and CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    ///Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
    ///which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
    ///You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
    ///or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
    ///Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
    and CustomerBalanceTransaction = {
        ///The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.
        Amount: int
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The ID of the credit note (if any) related to the transaction.
        CreditNote: CustomerBalanceTransactionCreditNote'AnyOf option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The ID of the customer the transaction belongs to.
        Customer: CustomerBalanceTransactionCustomer'AnyOf
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.
        EndingBalance: int
        ///Unique identifier for the object.
        Id: string
        ///The ID of the invoice (if any) related to the transaction.
        Invoice: CustomerBalanceTransactionInvoice'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
        Type: CustomerBalanceTransactionType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "customer_balance_transaction"

        static member New (amount: int, created: DateTime, creditNote: CustomerBalanceTransactionCreditNote'AnyOf option, currency: string, customer: CustomerBalanceTransactionCustomer'AnyOf, description: string option, endingBalance: int, id: string, invoice: CustomerBalanceTransactionInvoice'AnyOf option, livemode: bool, metadata: Map<string, string> option, ``type``: CustomerBalanceTransactionType) =
            {
                CustomerBalanceTransaction.Amount = amount //required
                CustomerBalanceTransaction.Created = created //required
                CustomerBalanceTransaction.CreditNote = creditNote //required
                CustomerBalanceTransaction.Currency = currency //required
                CustomerBalanceTransaction.Customer = customer //required
                CustomerBalanceTransaction.Description = description //required
                CustomerBalanceTransaction.EndingBalance = endingBalance //required
                CustomerBalanceTransaction.Id = id //required
                CustomerBalanceTransaction.Invoice = invoice //required
                CustomerBalanceTransaction.Livemode = livemode //required
                CustomerBalanceTransaction.Metadata = metadata //required
                CustomerBalanceTransaction.Type = ``type`` //required
            }

    and CustomerBalanceTransactionCreditNote'AnyOf =
        | String of string
        | CreditNote of CreditNote

    and CustomerBalanceTransactionCustomer'AnyOf =
        | String of string
        | Customer of Customer

    and CustomerBalanceTransactionInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and CustomerBalanceTransactionType =
        | Adjustment
        | AppliedToInvoice
        | CreditNote
        | Initial
        | InvoiceOverpaid
        | InvoiceTooLarge
        | InvoiceTooSmall
        | Migration
        | UnappliedFromInvoice
        | UnspentReceiverCredit

    ///Customers with certain payments enabled have a cash balance, representing funds that were paid
    ///by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
    ///represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
    ///to payments, and refunds to the customer.
    and CustomerCashBalanceTransaction = {
        AdjustedForOverdraft: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft option
        AppliedToPayment: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The customer whose available cash balance changed as a result of this transaction.
        Customer: CustomerCashBalanceTransactionCustomer'AnyOf
        ///The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        EndingBalance: int
        Funded: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
        NetAmount: int
        RefundedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction option
        ///The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
        Type: CustomerCashBalanceTransactionType
        UnappliedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "customer_cash_balance_transaction"

        static member New (created: DateTime, currency: string, customer: CustomerCashBalanceTransactionCustomer'AnyOf, endingBalance: int, id: string, livemode: bool, netAmount: int, ``type``: CustomerCashBalanceTransactionType, ?adjustedForOverdraft: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft, ?appliedToPayment: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction, ?funded: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction, ?refundedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction, ?unappliedFromPayment: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction) =
            {
                CustomerCashBalanceTransaction.Created = created //required
                CustomerCashBalanceTransaction.Currency = currency //required
                CustomerCashBalanceTransaction.Customer = customer //required
                CustomerCashBalanceTransaction.EndingBalance = endingBalance //required
                CustomerCashBalanceTransaction.Id = id //required
                CustomerCashBalanceTransaction.Livemode = livemode //required
                CustomerCashBalanceTransaction.NetAmount = netAmount //required
                CustomerCashBalanceTransaction.Type = ``type`` //required
                CustomerCashBalanceTransaction.AdjustedForOverdraft = adjustedForOverdraft
                CustomerCashBalanceTransaction.AppliedToPayment = appliedToPayment
                CustomerCashBalanceTransaction.Funded = funded
                CustomerCashBalanceTransaction.RefundedFromPayment = refundedFromPayment
                CustomerCashBalanceTransaction.UnappliedFromPayment = unappliedFromPayment
            }

    and CustomerCashBalanceTransactionCustomer'AnyOf =
        | String of string
        | Customer of Customer

    and CustomerCashBalanceTransactionType =
        | AdjustedForOverdraft
        | AppliedToPayment
        | Funded
        | FundingReversed
        | RefundedFromPayment
        | ReturnCanceled
        | ReturnInitiated
        | UnappliedFromPayment

    and CustomerTax = {
        ///Surfaces if automatic tax computation is possible given the current customer location information.
        AutomaticTax: CustomerTaxAutomaticTax
        ///A recent IP address of the customer used for tax reporting and tax location inference.
        IpAddress: string option
        ///The customer's location as identified by Stripe Tax.
        Location: CustomerTaxLocation option
    }
    with
        static member New (automaticTax: CustomerTaxAutomaticTax, ipAddress: string option, location: CustomerTaxLocation option) =
            {
                CustomerTax.AutomaticTax = automaticTax //required
                CustomerTax.IpAddress = ipAddress //required
                CustomerTax.Location = location //required
            }

    and CustomerTaxAutomaticTax =
        | Failed
        | NotCollecting
        | Supported
        | UnrecognizedLocation

    and CustomerTaxLocation = {
        ///The customer's country as identified by Stripe Tax.
        Country: string
        ///The data source used to infer the customer's location.
        Source: CustomerTaxLocationSource
        ///The customer's state, county, province, or region as identified by Stripe Tax.
        State: string option
    }
    with
        static member New (country: string, source: CustomerTaxLocationSource, state: string option) =
            {
                CustomerTaxLocation.Country = country //required
                CustomerTaxLocation.Source = source //required
                CustomerTaxLocation.State = state //required
            }

    and CustomerTaxLocationSource =
        | BillingAddress
        | IpAddress
        | PaymentMethod
        | ShippingDestination

    and DeletedAccount = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "account"

        static member New (deleted: bool, id: string) =
            {
                DeletedAccount.Deleted = deleted //required
                DeletedAccount.Id = id //required
            }

    and DeletedApplePayDomain = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "apple_pay_domain"

        static member New (deleted: bool, id: string) =
            {
                DeletedApplePayDomain.Deleted = deleted //required
                DeletedApplePayDomain.Id = id //required
            }

    and DeletedApplication = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
        ///The name of the application.
        Name: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "application"

        static member New (deleted: bool, id: string, name: string option) =
            {
                DeletedApplication.Deleted = deleted //required
                DeletedApplication.Id = id //required
                DeletedApplication.Name = name //required
            }

    and DeletedBankAccount = {
        ///Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
        Currency: string option
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "bank_account"

        static member New (deleted: bool, id: string, ?currency: string option) =
            {
                DeletedBankAccount.Deleted = deleted //required
                DeletedBankAccount.Id = id //required
                DeletedBankAccount.Currency = currency |> Option.flatten
            }

    and DeletedCard = {
        ///Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
        Currency: string option
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "card"

        static member New (deleted: bool, id: string, ?currency: string option) =
            {
                DeletedCard.Deleted = deleted //required
                DeletedCard.Id = id //required
                DeletedCard.Currency = currency |> Option.flatten
            }

    and DeletedCoupon = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "coupon"

        static member New (deleted: bool, id: string) =
            {
                DeletedCoupon.Deleted = deleted //required
                DeletedCoupon.Id = id //required
            }

    and DeletedCustomer = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "customer"

        static member New (deleted: bool, id: string) =
            {
                DeletedCustomer.Deleted = deleted //required
                DeletedCustomer.Id = id //required
            }

    and DeletedDiscount = {
        ///The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
        CheckoutSession: string option
        Coupon: Coupon
        ///The ID of the customer associated with this discount.
        Customer: DeletedDiscountCustomer'AnyOf option
        ///Always true for a deleted object
        Deleted: bool
        ///The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
        Id: string
        ///The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
        Invoice: string option
        ///The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
        InvoiceItem: string option
        ///The promotion code applied to create this discount.
        PromotionCode: DeletedDiscountPromotionCode'AnyOf option
        ///Date that the coupon was applied.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Start: DateTime
        ///The subscription that this coupon is applied to, if it is applied to a particular subscription.
        Subscription: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "discount"

        static member New (checkoutSession: string option, coupon: Coupon, customer: DeletedDiscountCustomer'AnyOf option, deleted: bool, id: string, invoice: string option, invoiceItem: string option, promotionCode: DeletedDiscountPromotionCode'AnyOf option, start: DateTime, subscription: string option) =
            {
                DeletedDiscount.CheckoutSession = checkoutSession //required
                DeletedDiscount.Coupon = coupon //required
                DeletedDiscount.Customer = customer //required
                DeletedDiscount.Deleted = deleted //required
                DeletedDiscount.Id = id //required
                DeletedDiscount.Invoice = invoice //required
                DeletedDiscount.InvoiceItem = invoiceItem //required
                DeletedDiscount.PromotionCode = promotionCode //required
                DeletedDiscount.Start = start //required
                DeletedDiscount.Subscription = subscription //required
            }

    and DeletedDiscountCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and DeletedDiscountPromotionCode'AnyOf =
        | String of string
        | PromotionCode of PromotionCode

    and DeletedExternalAccount =
        | DeletedBankAccount of DeletedBankAccount
        | DeletedCard of DeletedCard

    and DeletedInvoice = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "invoice"

        static member New (deleted: bool, id: string) =
            {
                DeletedInvoice.Deleted = deleted //required
                DeletedInvoice.Id = id //required
            }

    and DeletedInvoiceitem = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "invoiceitem"

        static member New (deleted: bool, id: string) =
            {
                DeletedInvoiceitem.Deleted = deleted //required
                DeletedInvoiceitem.Id = id //required
            }

    and DeletedPaymentSource =
        | DeletedBankAccount of DeletedBankAccount
        | DeletedCard of DeletedCard

    and DeletedPerson = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "person"

        static member New (deleted: bool, id: string) =
            {
                DeletedPerson.Deleted = deleted //required
                DeletedPerson.Id = id //required
            }

    and DeletedPlan = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "plan"

        static member New (deleted: bool, id: string) =
            {
                DeletedPlan.Deleted = deleted //required
                DeletedPlan.Id = id //required
            }

    and DeletedPrice = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "price"

        static member New (deleted: bool, id: string) =
            {
                DeletedPrice.Deleted = deleted //required
                DeletedPrice.Id = id //required
            }

    and DeletedProduct = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "product"

        static member New (deleted: bool, id: string) =
            {
                DeletedProduct.Deleted = deleted //required
                DeletedProduct.Id = id //required
            }

    and DeletedRadarValueList = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "radar.value_list"

        static member New (deleted: bool, id: string) =
            {
                DeletedRadarValueList.Deleted = deleted //required
                DeletedRadarValueList.Id = id //required
            }

    and DeletedRadarValueListItem = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "radar.value_list_item"

        static member New (deleted: bool, id: string) =
            {
                DeletedRadarValueListItem.Deleted = deleted //required
                DeletedRadarValueListItem.Id = id //required
            }

    and DeletedSubscriptionItem = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "subscription_item"

        static member New (deleted: bool, id: string) =
            {
                DeletedSubscriptionItem.Deleted = deleted //required
                DeletedSubscriptionItem.Id = id //required
            }

    and DeletedTaxId = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax_id"

        static member New (deleted: bool, id: string) =
            {
                DeletedTaxId.Deleted = deleted //required
                DeletedTaxId.Id = id //required
            }

    and DeletedTerminalConfiguration = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.configuration"

        static member New (deleted: bool, id: string) =
            {
                DeletedTerminalConfiguration.Deleted = deleted //required
                DeletedTerminalConfiguration.Id = id //required
            }

    and DeletedTerminalLocation = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.location"

        static member New (deleted: bool, id: string) =
            {
                DeletedTerminalLocation.Deleted = deleted //required
                DeletedTerminalLocation.Id = id //required
            }

    and DeletedTerminalReader = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.reader"

        static member New (deleted: bool, id: string) =
            {
                DeletedTerminalReader.Deleted = deleted //required
                DeletedTerminalReader.Id = id //required
            }

    and DeletedTestHelpersTestClock = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "test_helpers.test_clock"

        static member New (deleted: bool, id: string) =
            {
                DeletedTestHelpersTestClock.Deleted = deleted //required
                DeletedTestHelpersTestClock.Id = id //required
            }

    and DeletedWebhookEndpoint = {
        ///Always true for a deleted object
        Deleted: bool
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "webhook_endpoint"

        static member New (deleted: bool, id: string) =
            {
                DeletedWebhookEndpoint.Deleted = deleted //required
                DeletedWebhookEndpoint.Id = id //required
            }

    ///A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
    ///It contains information about when the discount began, when it will end, and what it is applied to.
    ///Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
    and Discount = {
        ///The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
        CheckoutSession: string option
        Coupon: Coupon
        ///The ID of the customer associated with this discount.
        Customer: DiscountCustomer'AnyOf option
        ///If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]End: DateTime option
        ///The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
        Id: string
        ///The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
        Invoice: string option
        ///The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
        InvoiceItem: string option
        ///The promotion code applied to create this discount.
        PromotionCode: DiscountPromotionCode'AnyOf option
        ///Date that the coupon was applied.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Start: DateTime
        ///The subscription that this coupon is applied to, if it is applied to a particular subscription.
        Subscription: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "discount"

        static member New (checkoutSession: string option, coupon: Coupon, customer: DiscountCustomer'AnyOf option, ``end``: DateTime option, id: string, invoice: string option, invoiceItem: string option, promotionCode: DiscountPromotionCode'AnyOf option, start: DateTime, subscription: string option) =
            {
                Discount.CheckoutSession = checkoutSession //required
                Discount.Coupon = coupon //required
                Discount.Customer = customer //required
                Discount.End = ``end`` //required
                Discount.Id = id //required
                Discount.Invoice = invoice //required
                Discount.InvoiceItem = invoiceItem //required
                Discount.PromotionCode = promotionCode //required
                Discount.Start = start //required
                Discount.Subscription = subscription //required
            }

    and DiscountCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and DiscountPromotionCode'AnyOf =
        | String of string
        | PromotionCode of PromotionCode

    and DiscountsResourceDiscountAmount = {
        ///The amount, in cents (or local equivalent), of the discount.
        Amount: int
        ///The discount that was applied to get this discount amount.
        Discount: DiscountsResourceDiscountAmountDiscount'AnyOf
    }
    with
        static member New (amount: int, discount: DiscountsResourceDiscountAmountDiscount'AnyOf) =
            {
                DiscountsResourceDiscountAmount.Amount = amount //required
                DiscountsResourceDiscountAmount.Discount = discount //required
            }

    and DiscountsResourceDiscountAmountDiscount'AnyOf =
        | String of string
        | Discount of Discount
        | DeletedDiscount of DeletedDiscount

    ///A dispute occurs when a customer questions your charge with their card issuer.
    ///When this happens, you're given the opportunity to respond to the dispute with
    ///evidence that shows that the charge is legitimate. You can find more
    ///information about the dispute process in our [Disputes and
    ///Fraud](/docs/disputes) documentation.
    ///Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
    and Dispute = {
        ///Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
        Amount: int
        ///List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
        BalanceTransactions: BalanceTransaction list
        ///ID of the charge that was disputed.
        Charge: DisputeCharge'AnyOf
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        Evidence: DisputeEvidence
        EvidenceDetails: DisputeEvidenceDetails
        ///Unique identifier for the object.
        Id: string
        ///If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
        IsChargeRefundable: bool
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Network-dependent reason code for the dispute.
        NetworkReasonCode: string option
        ///ID of the PaymentIntent that was disputed.
        PaymentIntent: DisputePaymentIntent'AnyOf option
        PaymentMethodDetails: DisputePaymentMethodDetails option
        ///Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
        Reason: DisputeReason
        ///Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.
        Status: DisputeStatus
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "dispute"

        static member New (amount: int, balanceTransactions: BalanceTransaction list, charge: DisputeCharge'AnyOf, created: DateTime, currency: string, evidence: DisputeEvidence, evidenceDetails: DisputeEvidenceDetails, id: string, isChargeRefundable: bool, livemode: bool, metadata: Map<string, string>, paymentIntent: DisputePaymentIntent'AnyOf option, reason: DisputeReason, status: DisputeStatus, ?networkReasonCode: string option, ?paymentMethodDetails: DisputePaymentMethodDetails) =
            {
                Dispute.Amount = amount //required
                Dispute.BalanceTransactions = balanceTransactions //required
                Dispute.Charge = charge //required
                Dispute.Created = created //required
                Dispute.Currency = currency //required
                Dispute.Evidence = evidence //required
                Dispute.EvidenceDetails = evidenceDetails //required
                Dispute.Id = id //required
                Dispute.IsChargeRefundable = isChargeRefundable //required
                Dispute.Livemode = livemode //required
                Dispute.Metadata = metadata //required
                Dispute.PaymentIntent = paymentIntent //required
                Dispute.Reason = reason //required
                Dispute.Status = status //required
                Dispute.NetworkReasonCode = networkReasonCode |> Option.flatten
                Dispute.PaymentMethodDetails = paymentMethodDetails
            }

    and DisputeCharge'AnyOf =
        | String of string
        | Charge of Charge

    and DisputePaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and DisputeReason =
        | BankCannotProcess
        | CheckReturned
        | CreditNotProcessed
        | CustomerInitiated
        | DebitNotAuthorized
        | Duplicate
        | Fraudulent
        | General
        | IncorrectAccountDetails
        | InsufficientFunds
        | ProductNotReceived
        | ProductUnacceptable
        | SubscriptionCanceled
        | Unrecognized

    and DisputeStatus =
        | Lost
        | NeedsResponse
        | UnderReview
        | WarningClosed
        | WarningNeedsResponse
        | WarningUnderReview
        | Won

    and DisputeEvidence = {
        ///Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
        AccessActivityLog: string option
        ///The billing address provided by the customer.
        BillingAddress: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
        CancellationPolicy: DisputeEvidenceCancellationPolicy'AnyOf option
        ///An explanation of how and when the customer was shown your refund policy prior to purchase.
        CancellationPolicyDisclosure: string option
        ///A justification for why the customer's subscription was not canceled.
        CancellationRebuttal: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
        CustomerCommunication: DisputeEvidenceCustomerCommunication'AnyOf option
        ///The email address of the customer.
        CustomerEmailAddress: string option
        ///The name of the customer.
        CustomerName: string option
        ///The IP address that the customer used when making the purchase.
        CustomerPurchaseIp: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
        CustomerSignature: DisputeEvidenceCustomerSignature'AnyOf option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
        DuplicateChargeDocumentation: DisputeEvidenceDuplicateChargeDocumentation'AnyOf option
        ///An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
        DuplicateChargeExplanation: string option
        ///The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
        DuplicateChargeId: string option
        ///A description of the product or service that was sold.
        ProductDescription: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
        Receipt: DisputeEvidenceReceipt'AnyOf option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
        RefundPolicy: DisputeEvidenceRefundPolicy'AnyOf option
        ///Documentation demonstrating that the customer was shown your refund policy prior to purchase.
        RefundPolicyDisclosure: string option
        ///A justification for why the customer is not entitled to a refund.
        RefundRefusalExplanation: string option
        ///The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
        ServiceDate: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
        ServiceDocumentation: DisputeEvidenceServiceDocumentation'AnyOf option
        ///The address to which a physical product was shipped. You should try to include as complete address information as possible.
        ShippingAddress: string option
        ///The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
        ShippingCarrier: string option
        ///The date on which a physical product began its route to the shipping address, in a clear human-readable format.
        ShippingDate: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
        ShippingDocumentation: DisputeEvidenceShippingDocumentation'AnyOf option
        ///The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
        ShippingTrackingNumber: string option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
        UncategorizedFile: DisputeEvidenceUncategorizedFile'AnyOf option
        ///Any additional evidence or statements.
        UncategorizedText: string option
    }
    with
        static member New (accessActivityLog: string option, billingAddress: string option, cancellationPolicy: DisputeEvidenceCancellationPolicy'AnyOf option, cancellationPolicyDisclosure: string option, cancellationRebuttal: string option, customerCommunication: DisputeEvidenceCustomerCommunication'AnyOf option, customerEmailAddress: string option, customerName: string option, customerPurchaseIp: string option, customerSignature: DisputeEvidenceCustomerSignature'AnyOf option, duplicateChargeDocumentation: DisputeEvidenceDuplicateChargeDocumentation'AnyOf option, duplicateChargeExplanation: string option, duplicateChargeId: string option, productDescription: string option, receipt: DisputeEvidenceReceipt'AnyOf option, refundPolicy: DisputeEvidenceRefundPolicy'AnyOf option, refundPolicyDisclosure: string option, refundRefusalExplanation: string option, serviceDate: string option, serviceDocumentation: DisputeEvidenceServiceDocumentation'AnyOf option, shippingAddress: string option, shippingCarrier: string option, shippingDate: string option, shippingDocumentation: DisputeEvidenceShippingDocumentation'AnyOf option, shippingTrackingNumber: string option, uncategorizedFile: DisputeEvidenceUncategorizedFile'AnyOf option, uncategorizedText: string option) =
            {
                DisputeEvidence.AccessActivityLog = accessActivityLog //required
                DisputeEvidence.BillingAddress = billingAddress //required
                DisputeEvidence.CancellationPolicy = cancellationPolicy //required
                DisputeEvidence.CancellationPolicyDisclosure = cancellationPolicyDisclosure //required
                DisputeEvidence.CancellationRebuttal = cancellationRebuttal //required
                DisputeEvidence.CustomerCommunication = customerCommunication //required
                DisputeEvidence.CustomerEmailAddress = customerEmailAddress //required
                DisputeEvidence.CustomerName = customerName //required
                DisputeEvidence.CustomerPurchaseIp = customerPurchaseIp //required
                DisputeEvidence.CustomerSignature = customerSignature //required
                DisputeEvidence.DuplicateChargeDocumentation = duplicateChargeDocumentation //required
                DisputeEvidence.DuplicateChargeExplanation = duplicateChargeExplanation //required
                DisputeEvidence.DuplicateChargeId = duplicateChargeId //required
                DisputeEvidence.ProductDescription = productDescription //required
                DisputeEvidence.Receipt = receipt //required
                DisputeEvidence.RefundPolicy = refundPolicy //required
                DisputeEvidence.RefundPolicyDisclosure = refundPolicyDisclosure //required
                DisputeEvidence.RefundRefusalExplanation = refundRefusalExplanation //required
                DisputeEvidence.ServiceDate = serviceDate //required
                DisputeEvidence.ServiceDocumentation = serviceDocumentation //required
                DisputeEvidence.ShippingAddress = shippingAddress //required
                DisputeEvidence.ShippingCarrier = shippingCarrier //required
                DisputeEvidence.ShippingDate = shippingDate //required
                DisputeEvidence.ShippingDocumentation = shippingDocumentation //required
                DisputeEvidence.ShippingTrackingNumber = shippingTrackingNumber //required
                DisputeEvidence.UncategorizedFile = uncategorizedFile //required
                DisputeEvidence.UncategorizedText = uncategorizedText //required
            }

    and DisputeEvidenceCancellationPolicy'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceCustomerCommunication'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceCustomerSignature'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceDuplicateChargeDocumentation'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceReceipt'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceRefundPolicy'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceServiceDocumentation'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceShippingDocumentation'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceUncategorizedFile'AnyOf =
        | String of string
        | File of File

    and DisputeEvidenceDetails = {
        ///Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]DueBy: DateTime option
        ///Whether evidence has been staged for this dispute.
        HasEvidence: bool
        ///Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
        PastDue: bool
        ///The number of times evidence has been submitted. Typically, you may only submit evidence once.
        SubmissionCount: int
    }
    with
        static member New (dueBy: DateTime option, hasEvidence: bool, pastDue: bool, submissionCount: int) =
            {
                DisputeEvidenceDetails.DueBy = dueBy //required
                DisputeEvidenceDetails.HasEvidence = hasEvidence //required
                DisputeEvidenceDetails.PastDue = pastDue //required
                DisputeEvidenceDetails.SubmissionCount = submissionCount //required
            }

    and DisputePaymentMethodDetails = {
        ///Card specific dispute details.
        Card: DisputePaymentMethodDetailsCard option
    }
    with
        ///Payment method type.
        member _.Type = "card"

        static member New (card: DisputePaymentMethodDetailsCard option) =
            {
                DisputePaymentMethodDetails.Card = card //required
            }

    and DisputePaymentMethodDetailsCard = {
        ///Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Brand: DisputePaymentMethodDetailsCardBrand
        ///The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network.
        NetworkReasonCode: string option
    }
    with
        static member New (brand: DisputePaymentMethodDetailsCardBrand, networkReasonCode: string option) =
            {
                DisputePaymentMethodDetailsCard.Brand = brand //required
                DisputePaymentMethodDetailsCard.NetworkReasonCode = networkReasonCode //required
            }

    and DisputePaymentMethodDetailsCardBrand =
        | Amex
        | Diners
        | Discover
        | EftposAu
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and EmailSent = {
        ///The timestamp when the email was sent.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EmailSentAt: DateTime
        ///The recipient's email address.
        EmailSentTo: string
    }
    with
        static member New (emailSentAt: DateTime, emailSentTo: string) =
            {
                EmailSent.EmailSentAt = emailSentAt //required
                EmailSent.EmailSentTo = emailSentTo //required
            }

    and EphemeralKey = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Time at which the key will expire. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Expires: DateTime
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The key's secret. You can use this value to make authorized requests to the Stripe API.
        Secret: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "ephemeral_key"

        static member New (created: DateTime, expires: DateTime, id: string, livemode: bool, ?secret: string) =
            {
                EphemeralKey.Created = created //required
                EphemeralKey.Expires = expires //required
                EphemeralKey.Id = id //required
                EphemeralKey.Livemode = livemode //required
                EphemeralKey.Secret = secret
            }

    ///An error response from the Stripe API
    and Error = {
        Error: ApiErrors
    }
    with
        static member New (error: ApiErrors) =
            {
                Error.Error = error //required
            }

    ///Events are our way of letting you know when something interesting happens in
    ///your account. When an interesting event occurs, we create a new `Event`
    ///object. For example, when a charge succeeds, we create a `charge.succeeded`
    ///event; and when an invoice payment attempt fails, we create an
    ///`invoice.payment_failed` event. Note that many API requests may cause multiple
    ///events to be created. For example, if you create a new subscription for a
    ///customer, you will receive both a `customer.subscription.created` event and a
    ///`charge.succeeded` event.
    ///Events occur when the state of another API resource changes. The state of that
    ///resource at the time of the change is embedded in the event's data field. For
    ///example, a `charge.succeeded` event will contain a charge, and an
    ///`invoice.payment_failed` event will contain an invoice.
    ///As with other API resources, you can use endpoints to retrieve an
    ///[individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
    ///from the API. We also have a separate
    ///[webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
    ///`Event` objects directly to an endpoint on your server. Webhooks are managed
    ///in your
    ///[account settings](https://dashboard.stripe.com/account/webhooks),
    ///and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
    ///When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
    ///events that occur in connected accounts. For these events, there will be an
    ///additional `account` attribute in the received `Event` object.
    ///**NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
    ///guaranteed only for 30 days.
    and Event = {
        ///The connected account that originated the event.
        Account: string option
        ///The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
        ApiVersion: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        Data: NotificationEventData
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
        PendingWebhooks: int
        ///Information on the API request that instigated the event.
        Request: NotificationEventRequest option
        ///Description of the event (e.g., `invoice.created` or `charge.refunded`).
        Type: EventType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "event"

        static member New (apiVersion: string option, created: DateTime, data: NotificationEventData, id: string, livemode: bool, pendingWebhooks: int, request: NotificationEventRequest option, ``type``: EventType, ?account: string) =
            {
                Event.ApiVersion = apiVersion //required
                Event.Created = created //required
                Event.Data = data //required
                Event.Id = id //required
                Event.Livemode = livemode //required
                Event.PendingWebhooks = pendingWebhooks //required
                Event.Request = request //required
                Event.Type = ``type`` //required
                Event.Account = account
            }

    and EventType =
        | [<JsonUnionCase("account.application.authorized")>] AccountApplicationAuthorized
        | [<JsonUnionCase("account.application.deauthorized")>] AccountApplicationDeauthorized
        | [<JsonUnionCase("account.external_account.created")>] AccountExternalAccountCreated
        | [<JsonUnionCase("account.external_account.deleted")>] AccountExternalAccountDeleted
        | [<JsonUnionCase("account.external_account.updated")>] AccountExternalAccountUpdated
        | [<JsonUnionCase("account.updated")>] AccountUpdated
        | [<JsonUnionCase("application_fee.created")>] ApplicationFeeCreated
        | [<JsonUnionCase("application_fee.refund.updated")>] ApplicationFeeRefundUpdated
        | [<JsonUnionCase("application_fee.refunded")>] ApplicationFeeRefunded
        | [<JsonUnionCase("balance.available")>] BalanceAvailable
        | [<JsonUnionCase("billing_portal.configuration.created")>] BillingPortalConfigurationCreated
        | [<JsonUnionCase("billing_portal.configuration.updated")>] BillingPortalConfigurationUpdated
        | [<JsonUnionCase("billing_portal.session.created")>] BillingPortalSessionCreated
        | [<JsonUnionCase("capability.updated")>] CapabilityUpdated
        | [<JsonUnionCase("cash_balance.funds_available")>] CashBalanceFundsAvailable
        | [<JsonUnionCase("charge.captured")>] ChargeCaptured
        | [<JsonUnionCase("charge.dispute.closed")>] ChargeDisputeClosed
        | [<JsonUnionCase("charge.dispute.created")>] ChargeDisputeCreated
        | [<JsonUnionCase("charge.dispute.funds_reinstated")>] ChargeDisputeFundsReinstated
        | [<JsonUnionCase("charge.dispute.funds_withdrawn")>] ChargeDisputeFundsWithdrawn
        | [<JsonUnionCase("charge.dispute.updated")>] ChargeDisputeUpdated
        | [<JsonUnionCase("charge.expired")>] ChargeExpired
        | [<JsonUnionCase("charge.failed")>] ChargeFailed
        | [<JsonUnionCase("charge.pending")>] ChargePending
        | [<JsonUnionCase("charge.refund.updated")>] ChargeRefundUpdated
        | [<JsonUnionCase("charge.refunded")>] ChargeRefunded
        | [<JsonUnionCase("charge.succeeded")>] ChargeSucceeded
        | [<JsonUnionCase("charge.updated")>] ChargeUpdated
        | [<JsonUnionCase("checkout.session.async_payment_failed")>] CheckoutSessionAsyncPaymentFailed
        | [<JsonUnionCase("checkout.session.async_payment_succeeded")>] CheckoutSessionAsyncPaymentSucceeded
        | [<JsonUnionCase("checkout.session.completed")>] CheckoutSessionCompleted
        | [<JsonUnionCase("checkout.session.expired")>] CheckoutSessionExpired
        | [<JsonUnionCase("coupon.created")>] CouponCreated
        | [<JsonUnionCase("coupon.deleted")>] CouponDeleted
        | [<JsonUnionCase("coupon.updated")>] CouponUpdated
        | [<JsonUnionCase("credit_note.created")>] CreditNoteCreated
        | [<JsonUnionCase("credit_note.updated")>] CreditNoteUpdated
        | [<JsonUnionCase("credit_note.voided")>] CreditNoteVoided
        | [<JsonUnionCase("customer.created")>] CustomerCreated
        | [<JsonUnionCase("customer.deleted")>] CustomerDeleted
        | [<JsonUnionCase("customer.discount.created")>] CustomerDiscountCreated
        | [<JsonUnionCase("customer.discount.deleted")>] CustomerDiscountDeleted
        | [<JsonUnionCase("customer.discount.updated")>] CustomerDiscountUpdated
        | [<JsonUnionCase("customer.source.created")>] CustomerSourceCreated
        | [<JsonUnionCase("customer.source.deleted")>] CustomerSourceDeleted
        | [<JsonUnionCase("customer.source.expiring")>] CustomerSourceExpiring
        | [<JsonUnionCase("customer.source.updated")>] CustomerSourceUpdated
        | [<JsonUnionCase("customer.subscription.created")>] CustomerSubscriptionCreated
        | [<JsonUnionCase("customer.subscription.deleted")>] CustomerSubscriptionDeleted
        | [<JsonUnionCase("customer.subscription.paused")>] CustomerSubscriptionPaused
        | [<JsonUnionCase("customer.subscription.pending_update_applied")>] CustomerSubscriptionPendingUpdateApplied
        | [<JsonUnionCase("customer.subscription.pending_update_expired")>] CustomerSubscriptionPendingUpdateExpired
        | [<JsonUnionCase("customer.subscription.resumed")>] CustomerSubscriptionResumed
        | [<JsonUnionCase("customer.subscription.trial_will_end")>] CustomerSubscriptionTrialWillEnd
        | [<JsonUnionCase("customer.subscription.updated")>] CustomerSubscriptionUpdated
        | [<JsonUnionCase("customer.tax_id.created")>] CustomerTaxIdCreated
        | [<JsonUnionCase("customer.tax_id.deleted")>] CustomerTaxIdDeleted
        | [<JsonUnionCase("customer.tax_id.updated")>] CustomerTaxIdUpdated
        | [<JsonUnionCase("customer.updated")>] CustomerUpdated
        | [<JsonUnionCase("customer_cash_balance_transaction.created")>] CustomerCashBalanceTransactionCreated
        | [<JsonUnionCase("file.created")>] FileCreated
        | [<JsonUnionCase("financial_connections.account.created")>] FinancialConnectionsAccountCreated
        | [<JsonUnionCase("financial_connections.account.deactivated")>] FinancialConnectionsAccountDeactivated
        | [<JsonUnionCase("financial_connections.account.disconnected")>] FinancialConnectionsAccountDisconnected
        | [<JsonUnionCase("financial_connections.account.reactivated")>] FinancialConnectionsAccountReactivated
        | [<JsonUnionCase("financial_connections.account.refreshed_balance")>] FinancialConnectionsAccountRefreshedBalance
        | [<JsonUnionCase("identity.verification_session.canceled")>] IdentityVerificationSessionCanceled
        | [<JsonUnionCase("identity.verification_session.created")>] IdentityVerificationSessionCreated
        | [<JsonUnionCase("identity.verification_session.processing")>] IdentityVerificationSessionProcessing
        | [<JsonUnionCase("identity.verification_session.redacted")>] IdentityVerificationSessionRedacted
        | [<JsonUnionCase("identity.verification_session.requires_input")>] IdentityVerificationSessionRequiresInput
        | [<JsonUnionCase("identity.verification_session.verified")>] IdentityVerificationSessionVerified
        | [<JsonUnionCase("invoice.created")>] InvoiceCreated
        | [<JsonUnionCase("invoice.deleted")>] InvoiceDeleted
        | [<JsonUnionCase("invoice.finalization_failed")>] InvoiceFinalizationFailed
        | [<JsonUnionCase("invoice.finalized")>] InvoiceFinalized
        | [<JsonUnionCase("invoice.marked_uncollectible")>] InvoiceMarkedUncollectible
        | [<JsonUnionCase("invoice.paid")>] InvoicePaid
        | [<JsonUnionCase("invoice.payment_action_required")>] InvoicePaymentActionRequired
        | [<JsonUnionCase("invoice.payment_failed")>] InvoicePaymentFailed
        | [<JsonUnionCase("invoice.payment_succeeded")>] InvoicePaymentSucceeded
        | [<JsonUnionCase("invoice.sent")>] InvoiceSent
        | [<JsonUnionCase("invoice.upcoming")>] InvoiceUpcoming
        | [<JsonUnionCase("invoice.updated")>] InvoiceUpdated
        | [<JsonUnionCase("invoice.voided")>] InvoiceVoided
        | [<JsonUnionCase("invoiceitem.created")>] InvoiceitemCreated
        | [<JsonUnionCase("invoiceitem.deleted")>] InvoiceitemDeleted
        | [<JsonUnionCase("invoiceitem.updated")>] InvoiceitemUpdated
        | [<JsonUnionCase("issuing_authorization.created")>] IssuingAuthorizationCreated
        | [<JsonUnionCase("issuing_authorization.request")>] IssuingAuthorizationRequest
        | [<JsonUnionCase("issuing_authorization.updated")>] IssuingAuthorizationUpdated
        | [<JsonUnionCase("issuing_card.created")>] IssuingCardCreated
        | [<JsonUnionCase("issuing_card.updated")>] IssuingCardUpdated
        | [<JsonUnionCase("issuing_cardholder.created")>] IssuingCardholderCreated
        | [<JsonUnionCase("issuing_cardholder.updated")>] IssuingCardholderUpdated
        | [<JsonUnionCase("issuing_dispute.closed")>] IssuingDisputeClosed
        | [<JsonUnionCase("issuing_dispute.created")>] IssuingDisputeCreated
        | [<JsonUnionCase("issuing_dispute.funds_reinstated")>] IssuingDisputeFundsReinstated
        | [<JsonUnionCase("issuing_dispute.submitted")>] IssuingDisputeSubmitted
        | [<JsonUnionCase("issuing_dispute.updated")>] IssuingDisputeUpdated
        | [<JsonUnionCase("issuing_transaction.created")>] IssuingTransactionCreated
        | [<JsonUnionCase("issuing_transaction.updated")>] IssuingTransactionUpdated
        | [<JsonUnionCase("mandate.updated")>] MandateUpdated
        | [<JsonUnionCase("order.created")>] OrderCreated
        | [<JsonUnionCase("payment_intent.amount_capturable_updated")>] PaymentIntentAmountCapturableUpdated
        | [<JsonUnionCase("payment_intent.canceled")>] PaymentIntentCanceled
        | [<JsonUnionCase("payment_intent.created")>] PaymentIntentCreated
        | [<JsonUnionCase("payment_intent.partially_funded")>] PaymentIntentPartiallyFunded
        | [<JsonUnionCase("payment_intent.payment_failed")>] PaymentIntentPaymentFailed
        | [<JsonUnionCase("payment_intent.processing")>] PaymentIntentProcessing
        | [<JsonUnionCase("payment_intent.requires_action")>] PaymentIntentRequiresAction
        | [<JsonUnionCase("payment_intent.succeeded")>] PaymentIntentSucceeded
        | [<JsonUnionCase("payment_link.created")>] PaymentLinkCreated
        | [<JsonUnionCase("payment_link.updated")>] PaymentLinkUpdated
        | [<JsonUnionCase("payment_method.attached")>] PaymentMethodAttached
        | [<JsonUnionCase("payment_method.automatically_updated")>] PaymentMethodAutomaticallyUpdated
        | [<JsonUnionCase("payment_method.detached")>] PaymentMethodDetached
        | [<JsonUnionCase("payment_method.updated")>] PaymentMethodUpdated
        | [<JsonUnionCase("payout.canceled")>] PayoutCanceled
        | [<JsonUnionCase("payout.created")>] PayoutCreated
        | [<JsonUnionCase("payout.failed")>] PayoutFailed
        | [<JsonUnionCase("payout.paid")>] PayoutPaid
        | [<JsonUnionCase("payout.reconciliation_completed")>] PayoutReconciliationCompleted
        | [<JsonUnionCase("payout.updated")>] PayoutUpdated
        | [<JsonUnionCase("person.created")>] PersonCreated
        | [<JsonUnionCase("person.deleted")>] PersonDeleted
        | [<JsonUnionCase("person.updated")>] PersonUpdated
        | [<JsonUnionCase("plan.created")>] PlanCreated
        | [<JsonUnionCase("plan.deleted")>] PlanDeleted
        | [<JsonUnionCase("plan.updated")>] PlanUpdated
        | [<JsonUnionCase("price.created")>] PriceCreated
        | [<JsonUnionCase("price.deleted")>] PriceDeleted
        | [<JsonUnionCase("price.updated")>] PriceUpdated
        | [<JsonUnionCase("product.created")>] ProductCreated
        | [<JsonUnionCase("product.deleted")>] ProductDeleted
        | [<JsonUnionCase("product.updated")>] ProductUpdated
        | [<JsonUnionCase("promotion_code.created")>] PromotionCodeCreated
        | [<JsonUnionCase("promotion_code.updated")>] PromotionCodeUpdated
        | [<JsonUnionCase("quote.accepted")>] QuoteAccepted
        | [<JsonUnionCase("quote.canceled")>] QuoteCanceled
        | [<JsonUnionCase("quote.created")>] QuoteCreated
        | [<JsonUnionCase("quote.finalized")>] QuoteFinalized
        | [<JsonUnionCase("radar.early_fraud_warning.created")>] RadarEarlyFraudWarningCreated
        | [<JsonUnionCase("radar.early_fraud_warning.updated")>] RadarEarlyFraudWarningUpdated
        | [<JsonUnionCase("recipient.created")>] RecipientCreated
        | [<JsonUnionCase("recipient.deleted")>] RecipientDeleted
        | [<JsonUnionCase("recipient.updated")>] RecipientUpdated
        | [<JsonUnionCase("refund.created")>] RefundCreated
        | [<JsonUnionCase("refund.updated")>] RefundUpdated
        | [<JsonUnionCase("reporting.report_run.failed")>] ReportingReportRunFailed
        | [<JsonUnionCase("reporting.report_run.succeeded")>] ReportingReportRunSucceeded
        | [<JsonUnionCase("reporting.report_type.updated")>] ReportingReportTypeUpdated
        | [<JsonUnionCase("review.closed")>] ReviewClosed
        | [<JsonUnionCase("review.opened")>] ReviewOpened
        | [<JsonUnionCase("setup_intent.canceled")>] SetupIntentCanceled
        | [<JsonUnionCase("setup_intent.created")>] SetupIntentCreated
        | [<JsonUnionCase("setup_intent.requires_action")>] SetupIntentRequiresAction
        | [<JsonUnionCase("setup_intent.setup_failed")>] SetupIntentSetupFailed
        | [<JsonUnionCase("setup_intent.succeeded")>] SetupIntentSucceeded
        | [<JsonUnionCase("sigma.scheduled_query_run.created")>] SigmaScheduledQueryRunCreated
        | [<JsonUnionCase("sku.created")>] SkuCreated
        | [<JsonUnionCase("sku.deleted")>] SkuDeleted
        | [<JsonUnionCase("sku.updated")>] SkuUpdated
        | [<JsonUnionCase("source.canceled")>] SourceCanceled
        | [<JsonUnionCase("source.chargeable")>] SourceChargeable
        | [<JsonUnionCase("source.failed")>] SourceFailed
        | [<JsonUnionCase("source.mandate_notification")>] SourceMandateNotification
        | [<JsonUnionCase("source.refund_attributes_required")>] SourceRefundAttributesRequired
        | [<JsonUnionCase("source.transaction.created")>] SourceTransactionCreated
        | [<JsonUnionCase("source.transaction.updated")>] SourceTransactionUpdated
        | [<JsonUnionCase("subscription_schedule.aborted")>] SubscriptionScheduleAborted
        | [<JsonUnionCase("subscription_schedule.canceled")>] SubscriptionScheduleCanceled
        | [<JsonUnionCase("subscription_schedule.completed")>] SubscriptionScheduleCompleted
        | [<JsonUnionCase("subscription_schedule.created")>] SubscriptionScheduleCreated
        | [<JsonUnionCase("subscription_schedule.expiring")>] SubscriptionScheduleExpiring
        | [<JsonUnionCase("subscription_schedule.released")>] SubscriptionScheduleReleased
        | [<JsonUnionCase("subscription_schedule.updated")>] SubscriptionScheduleUpdated
        | [<JsonUnionCase("tax.settings.updated")>] TaxSettingsUpdated
        | [<JsonUnionCase("tax_rate.created")>] TaxRateCreated
        | [<JsonUnionCase("tax_rate.updated")>] TaxRateUpdated
        | [<JsonUnionCase("terminal.reader.action_failed")>] TerminalReaderActionFailed
        | [<JsonUnionCase("terminal.reader.action_succeeded")>] TerminalReaderActionSucceeded
        | [<JsonUnionCase("test_helpers.test_clock.advancing")>] TestHelpersTestClockAdvancing
        | [<JsonUnionCase("test_helpers.test_clock.created")>] TestHelpersTestClockCreated
        | [<JsonUnionCase("test_helpers.test_clock.deleted")>] TestHelpersTestClockDeleted
        | [<JsonUnionCase("test_helpers.test_clock.internal_failure")>] TestHelpersTestClockInternalFailure
        | [<JsonUnionCase("test_helpers.test_clock.ready")>] TestHelpersTestClockReady
        | [<JsonUnionCase("topup.canceled")>] TopupCanceled
        | [<JsonUnionCase("topup.created")>] TopupCreated
        | [<JsonUnionCase("topup.failed")>] TopupFailed
        | [<JsonUnionCase("topup.reversed")>] TopupReversed
        | [<JsonUnionCase("topup.succeeded")>] TopupSucceeded
        | [<JsonUnionCase("transfer.created")>] TransferCreated
        | [<JsonUnionCase("transfer.reversed")>] TransferReversed
        | [<JsonUnionCase("transfer.updated")>] TransferUpdated

    ///`Exchange Rate` objects allow you to determine the rates that Stripe is
    ///currently using to convert from one currency to another. Since this number is
    ///variable throughout the day, there are various reasons why you might want to
    ///know the current rate (for example, to dynamically price an item for a user
    ///with a default payment in a foreign currency).
    ///If you want a guarantee that the charge is made with a certain exchange rate
    ///you expect is current, you can pass in `exchange_rate` to charges endpoints.
    ///If the value is no longer up to date, the charge won't go through. Please
    ///refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
    ///details.
    and ExchangeRate = {
        ///Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
        Id: string
        ///Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
        Rates: Map<string, string list>
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "exchange_rate"

        static member New (id: string, rates: Map<string, string list>) =
            {
                ExchangeRate.Id = id //required
                ExchangeRate.Rates = rates //required
            }

    and ExternalAccount =
        | BankAccount of BankAccount
        | Card of Card

    and ExternalAccountRequirements = {
        ///Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
        CurrentlyDue: string list option
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list option
        ///Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account.
        PastDue: string list option
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
        PendingVerification: string list option
    }
    with
        static member New (currentlyDue: string list option, errors: AccountRequirementsError list option, pastDue: string list option, pendingVerification: string list option) =
            {
                ExternalAccountRequirements.CurrentlyDue = currentlyDue //required
                ExternalAccountRequirements.Errors = errors //required
                ExternalAccountRequirements.PastDue = pastDue //required
                ExternalAccountRequirements.PendingVerification = pendingVerification //required
            }

    and Fee = {
        ///Amount of the fee, in cents.
        Amount: int
        ///ID of the Connect application that earned the fee.
        Application: string option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`.
        Type: FeeType
    }
    with
        static member New (amount: int, application: string option, currency: string, description: string option, ``type``: FeeType) =
            {
                Fee.Amount = amount //required
                Fee.Application = application //required
                Fee.Currency = currency //required
                Fee.Description = description //required
                Fee.Type = ``type`` //required
            }

    and FeeType =
        | ApplicationFee
        | StripeFee
        | Tax

    ///`Application Fee Refund` objects allow you to refund an application fee that
    ///has previously been created but not yet refunded. Funds will be refunded to
    ///the Stripe account from which the fee was originally collected.
    ///Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
    and FeeRefund = {
        ///Amount, in cents (or local equivalent).
        Amount: int
        ///Balance transaction that describes the impact on your account balance.
        BalanceTransaction: FeeRefundBalanceTransaction'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the application fee that was refunded.
        Fee: FeeRefundFee'AnyOf
        ///Unique identifier for the object.
        Id: string
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "fee_refund"

        static member New (amount: int, balanceTransaction: FeeRefundBalanceTransaction'AnyOf option, created: DateTime, currency: string, fee: FeeRefundFee'AnyOf, id: string, metadata: Map<string, string> option) =
            {
                FeeRefund.Amount = amount //required
                FeeRefund.BalanceTransaction = balanceTransaction //required
                FeeRefund.Created = created //required
                FeeRefund.Currency = currency //required
                FeeRefund.Fee = fee //required
                FeeRefund.Id = id //required
                FeeRefund.Metadata = metadata //required
            }

    and FeeRefundBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and FeeRefundFee'AnyOf =
        | String of string
        | ApplicationFee of ApplicationFee

    ///This is an object representing a file hosted on Stripe's servers. The
    ///file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
    ///request (for example, when uploading dispute evidence) or it may have
    ///been created by Stripe (for example, the results of a [Sigma scheduled
    ///query](#scheduled_queries)).
    ///Related guide: [File upload guide](https://stripe.com/docs/file-upload)
    and File = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The time at which the file expires and is no longer available in epoch seconds.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///A filename for the file, suitable for saving to a filesystem.
        Filename: string option
        ///Unique identifier for the object.
        Id: string
        ///A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
        Links: FileLinks option
        ///The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
        Purpose: FilePurpose
        ///The size in bytes of the file object.
        Size: int
        ///A user friendly title for the document.
        Title: string option
        ///The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
        Type: string option
        ///The URL from which the file can be downloaded using your live secret API key.
        Url: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "file"

        static member New (created: DateTime, expiresAt: DateTime option, filename: string option, id: string, purpose: FilePurpose, size: int, title: string option, ``type``: string option, url: string option, ?links: FileLinks option) =
            {
                File.Created = created //required
                File.ExpiresAt = expiresAt //required
                File.Filename = filename //required
                File.Id = id //required
                File.Purpose = purpose //required
                File.Size = size //required
                File.Title = title //required
                File.Type = ``type`` //required
                File.Url = url //required
                File.Links = links |> Option.flatten
            }

    and FilePurpose =
        | AccountRequirement
        | AdditionalVerification
        | BusinessIcon
        | BusinessLogo
        | CustomerSignature
        | DisputeEvidence
        | DocumentProviderIdentityDocument
        | FinanceReportRun
        | IdentityDocument
        | IdentityDocumentDownloadable
        | PciDocument
        | Selfie
        | SigmaScheduledQuery
        | TaxDocumentUserUpload
        | TerminalReaderSplashscreen

    ///A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
    and FileLinks = {
        ///Details about each object.
        Data: FileLink list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: FileLink list, hasMore: bool, url: string) =
            {
                FileLinks.Data = data //required
                FileLinks.HasMore = hasMore //required
                FileLinks.Url = url //required
            }

    ///To share the contents of a `File` object with non-Stripe users, you can
    ///create a `FileLink`. `FileLink`s contain a URL that can be used to
    ///retrieve the contents of the file without authentication.
    and FileLink = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Whether this link is already expired.
        Expired: bool
        ///Time at which the link expires.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///The file object this link points to.
        File: FileLinkFile'AnyOf
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The publicly accessible URL to download the file.
        Url: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "file_link"

        static member New (created: DateTime, expired: bool, expiresAt: DateTime option, file: FileLinkFile'AnyOf, id: string, livemode: bool, metadata: Map<string, string>, url: string option) =
            {
                FileLink.Created = created //required
                FileLink.Expired = expired //required
                FileLink.ExpiresAt = expiresAt //required
                FileLink.File = file //required
                FileLink.Id = id //required
                FileLink.Livemode = livemode //required
                FileLink.Metadata = metadata //required
                FileLink.Url = url //required
            }

    and FileLinkFile'AnyOf =
        | String of string
        | File of File

    ///A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
    and FinancialConnectionsAccount = {
        ///The account holder that this account belongs to.
        AccountHolder: BankConnectionsResourceAccountholder option
        ///The most recent information about the account's balance.
        Balance: BankConnectionsResourceBalance option
        ///The state of the most recent attempt to refresh the account balance.
        BalanceRefresh: BankConnectionsResourceBalanceRefresh option
        ///The type of the account. Account category is further divided in `subcategory`.
        Category: FinancialConnectionsAccountCategory
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///A human-readable name that has been assigned to this account, either by the account holder or by the institution.
        DisplayName: string option
        ///Unique identifier for the object.
        Id: string
        ///The name of the institution that holds this account.
        InstitutionName: string
        ///The last 4 digits of the account number. If present, this will be 4 numeric characters.
        [<JsonField(Name="last4")>]Last4: string option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The most recent information about the account's owners.
        Ownership: FinancialConnectionsAccountOwnership'AnyOf option
        ///The state of the most recent attempt to refresh the account owners.
        OwnershipRefresh: BankConnectionsResourceOwnershipRefresh option
        ///The list of permissions granted by this account.
        Permissions: FinancialConnectionsAccountPermissions list option
        ///The status of the link to the account.
        Status: FinancialConnectionsAccountStatus
        ///If `category` is `cash`, one of:
        /// - `checking`
        /// - `savings`
        /// - `other`
        ///If `category` is `credit`, one of:
        /// - `mortgage`
        /// - `line_of_credit`
        /// - `credit_card`
        /// - `other`
        ///If `category` is `investment` or `other`, this will be `other`.
        Subcategory: FinancialConnectionsAccountSubcategory
        ///The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
        SupportedPaymentMethodTypes: FinancialConnectionsAccountSupportedPaymentMethodTypes list
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "financial_connections.account"

        static member New (accountHolder: BankConnectionsResourceAccountholder option, balance: BankConnectionsResourceBalance option, balanceRefresh: BankConnectionsResourceBalanceRefresh option, category: FinancialConnectionsAccountCategory, created: DateTime, displayName: string option, id: string, institutionName: string, last4: string option, livemode: bool, ownership: FinancialConnectionsAccountOwnership'AnyOf option, ownershipRefresh: BankConnectionsResourceOwnershipRefresh option, permissions: FinancialConnectionsAccountPermissions list option, status: FinancialConnectionsAccountStatus, subcategory: FinancialConnectionsAccountSubcategory, supportedPaymentMethodTypes: FinancialConnectionsAccountSupportedPaymentMethodTypes list) =
            {
                FinancialConnectionsAccount.AccountHolder = accountHolder //required
                FinancialConnectionsAccount.Balance = balance //required
                FinancialConnectionsAccount.BalanceRefresh = balanceRefresh //required
                FinancialConnectionsAccount.Category = category //required
                FinancialConnectionsAccount.Created = created //required
                FinancialConnectionsAccount.DisplayName = displayName //required
                FinancialConnectionsAccount.Id = id //required
                FinancialConnectionsAccount.InstitutionName = institutionName //required
                FinancialConnectionsAccount.Last4 = last4 //required
                FinancialConnectionsAccount.Livemode = livemode //required
                FinancialConnectionsAccount.Ownership = ownership //required
                FinancialConnectionsAccount.OwnershipRefresh = ownershipRefresh //required
                FinancialConnectionsAccount.Permissions = permissions //required
                FinancialConnectionsAccount.Status = status //required
                FinancialConnectionsAccount.Subcategory = subcategory //required
                FinancialConnectionsAccount.SupportedPaymentMethodTypes = supportedPaymentMethodTypes //required
            }

    and FinancialConnectionsAccountCategory =
        | Cash
        | Credit
        | Investment
        | Other

    and FinancialConnectionsAccountOwnership'AnyOf =
        | String of string
        | FinancialConnectionsAccountOwnership of FinancialConnectionsAccountOwnership

    and FinancialConnectionsAccountStatus =
        | Active
        | Disconnected
        | Inactive

    and FinancialConnectionsAccountSubcategory =
        | Checking
        | CreditCard
        | LineOfCredit
        | Mortgage
        | Other
        | Savings

    and FinancialConnectionsAccountPermissions =
        | Balances
        | Ownership
        | PaymentMethod
        | Transactions

    and FinancialConnectionsAccountSupportedPaymentMethodTypes =
        | Link
        | UsBankAccount

    ///Describes an owner of an account.
    and FinancialConnectionsAccountOwner = {
        ///The email address of the owner.
        Email: string option
        ///Unique identifier for the object.
        Id: string
        ///The full name of the owner.
        Name: string
        ///The ownership object that this owner belongs to.
        Ownership: string
        ///The raw phone number of the owner.
        Phone: string option
        ///The raw physical address of the owner.
        RawAddress: string option
        ///The timestamp of the refresh that updated this owner.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]RefreshedAt: DateTime option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "financial_connections.account_owner"

        static member New (email: string option, id: string, name: string, ownership: string, phone: string option, rawAddress: string option, refreshedAt: DateTime option) =
            {
                FinancialConnectionsAccountOwner.Email = email //required
                FinancialConnectionsAccountOwner.Id = id //required
                FinancialConnectionsAccountOwner.Name = name //required
                FinancialConnectionsAccountOwner.Ownership = ownership //required
                FinancialConnectionsAccountOwner.Phone = phone //required
                FinancialConnectionsAccountOwner.RawAddress = rawAddress //required
                FinancialConnectionsAccountOwner.RefreshedAt = refreshedAt //required
            }

    ///Describes a snapshot of the owners of an account at a particular point in time.
    and FinancialConnectionsAccountOwnership = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Unique identifier for the object.
        Id: string
        ///A paginated list of owners for this account.
        Owners: FinancialConnectionsAccountOwnershipOwners
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "financial_connections.account_ownership"

        static member New (created: DateTime, id: string, owners: FinancialConnectionsAccountOwnershipOwners) =
            {
                FinancialConnectionsAccountOwnership.Created = created //required
                FinancialConnectionsAccountOwnership.Id = id //required
                FinancialConnectionsAccountOwnership.Owners = owners //required
            }

    ///A paginated list of owners for this account.
    and FinancialConnectionsAccountOwnershipOwners = {
        ///Details about each object.
        Data: FinancialConnectionsAccountOwner list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: FinancialConnectionsAccountOwner list, hasMore: bool, url: string) =
            {
                FinancialConnectionsAccountOwnershipOwners.Data = data //required
                FinancialConnectionsAccountOwnershipOwners.HasMore = hasMore //required
                FinancialConnectionsAccountOwnershipOwners.Url = url //required
            }

    ///A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
    and FinancialConnectionsSession = {
        ///The account holder for whom accounts are collected in this session.
        AccountHolder: BankConnectionsResourceAccountholder option
        ///The accounts that were collected as part of this Session.
        Accounts: FinancialConnectionsSessionAccounts
        ///A value that will be passed to the client to launch the authentication flow.
        ClientSecret: string
        Filters: BankConnectionsResourceLinkAccountSessionFilters option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Permissions requested for accounts collected during this session.
        Permissions: FinancialConnectionsSessionPermissions list
        ///Data features requested to be retrieved upon account creation.
        Prefetch: FinancialConnectionsSessionPrefetch list option
        ///For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
        ReturnUrl: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "financial_connections.session"

        static member New (accountHolder: BankConnectionsResourceAccountholder option, accounts: FinancialConnectionsSessionAccounts, clientSecret: string, id: string, livemode: bool, permissions: FinancialConnectionsSessionPermissions list, prefetch: FinancialConnectionsSessionPrefetch list option, ?filters: BankConnectionsResourceLinkAccountSessionFilters, ?returnUrl: string) =
            {
                FinancialConnectionsSession.AccountHolder = accountHolder //required
                FinancialConnectionsSession.Accounts = accounts //required
                FinancialConnectionsSession.ClientSecret = clientSecret //required
                FinancialConnectionsSession.Id = id //required
                FinancialConnectionsSession.Livemode = livemode //required
                FinancialConnectionsSession.Permissions = permissions //required
                FinancialConnectionsSession.Prefetch = prefetch //required
                FinancialConnectionsSession.Filters = filters
                FinancialConnectionsSession.ReturnUrl = returnUrl
            }

    ///The accounts that were collected as part of this Session.
    and FinancialConnectionsSessionAccounts = {
        ///Details about each object.
        Data: FinancialConnectionsAccount list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: FinancialConnectionsAccount list, hasMore: bool, url: string) =
            {
                FinancialConnectionsSessionAccounts.Data = data //required
                FinancialConnectionsSessionAccounts.HasMore = hasMore //required
                FinancialConnectionsSessionAccounts.Url = url //required
            }

    and FinancialConnectionsSessionPermissions =
        | Balances
        | Ownership
        | PaymentMethod
        | Transactions

    and FinancialConnectionsSessionPrefetch =
        | Balances
        | Ownership

    and FinancialReportingFinanceReportRunRunParameters = {
        ///The set of output columns requested for inclusion in the report run.
        Columns: string list option
        ///Connected account ID by which to filter the report run.
        ConnectedAccount: string option
        ///Currency of objects to be included in the report run.
        Currency: string option
        ///Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]IntervalEnd: DateTime option
        ///Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]IntervalStart: DateTime option
        ///Payout ID by which to filter the report run.
        Payout: string option
        ///Category of balance transactions to be included in the report run.
        ReportingCategory: string option
        ///Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
        Timezone: FinancialReportingFinanceReportRunRunParametersTimezone option
    }
    with
        static member New (?columns: string list, ?connectedAccount: string, ?currency: string, ?intervalEnd: DateTime, ?intervalStart: DateTime, ?payout: string, ?reportingCategory: string, ?timezone: FinancialReportingFinanceReportRunRunParametersTimezone) =
            {
                FinancialReportingFinanceReportRunRunParameters.Columns = columns
                FinancialReportingFinanceReportRunRunParameters.ConnectedAccount = connectedAccount
                FinancialReportingFinanceReportRunRunParameters.Currency = currency
                FinancialReportingFinanceReportRunRunParameters.IntervalEnd = intervalEnd
                FinancialReportingFinanceReportRunRunParameters.IntervalStart = intervalStart
                FinancialReportingFinanceReportRunRunParameters.Payout = payout
                FinancialReportingFinanceReportRunRunParameters.ReportingCategory = reportingCategory
                FinancialReportingFinanceReportRunRunParameters.Timezone = timezone
            }

    and FinancialReportingFinanceReportRunRunParametersTimezone =
        | IntervalStart
        | IntervalEnd

    ///Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
    ///automatically applied to future invoices and payments using the `customer_balance` payment method.
    ///Customers can fund this balance by initiating a bank transfer to any account in the
    ///`financial_addresses` field.
    ///Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
    and FundingInstructions = {
        BankTransfer: FundingInstructionsBankTransfer
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
    }
    with
        ///The `funding_type` of the returned instructions
        member _.FundingType = "bank_transfer"
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "funding_instructions"

        static member New (bankTransfer: FundingInstructionsBankTransfer, currency: string, livemode: bool) =
            {
                FundingInstructions.BankTransfer = bankTransfer //required
                FundingInstructions.Currency = currency //required
                FundingInstructions.Livemode = livemode //required
            }

    and FundingInstructionsBankTransfer = {
        ///The country of the bank account to fund
        Country: string
        ///A list of financial addresses that can be used to fund a particular balance
        FinancialAddresses: FundingInstructionsBankTransferFinancialAddress list
        ///The bank_transfer type
        Type: FundingInstructionsBankTransferType
    }
    with
        static member New (country: string, financialAddresses: FundingInstructionsBankTransferFinancialAddress list, ``type``: FundingInstructionsBankTransferType) =
            {
                FundingInstructionsBankTransfer.Country = country //required
                FundingInstructionsBankTransfer.FinancialAddresses = financialAddresses //required
                FundingInstructionsBankTransfer.Type = ``type`` //required
            }

    and FundingInstructionsBankTransferType =
        | EuBankTransfer
        | JpBankTransfer

    ///FinancialAddresses contain identifying information that resolves to a FinancialAccount.
    and FundingInstructionsBankTransferFinancialAddress = {
        Iban: FundingInstructionsBankTransferIbanRecord option
        SortCode: FundingInstructionsBankTransferSortCodeRecord option
        Spei: FundingInstructionsBankTransferSpeiRecord option
        ///The payment networks supported by this FinancialAddress
        SupportedNetworks: FundingInstructionsBankTransferFinancialAddressSupportedNetworks list option
        ///The type of financial address
        Type: FundingInstructionsBankTransferFinancialAddressType
        Zengin: FundingInstructionsBankTransferZenginRecord option
    }
    with
        static member New (``type``: FundingInstructionsBankTransferFinancialAddressType, ?iban: FundingInstructionsBankTransferIbanRecord, ?sortCode: FundingInstructionsBankTransferSortCodeRecord, ?spei: FundingInstructionsBankTransferSpeiRecord, ?supportedNetworks: FundingInstructionsBankTransferFinancialAddressSupportedNetworks list, ?zengin: FundingInstructionsBankTransferZenginRecord) =
            {
                FundingInstructionsBankTransferFinancialAddress.Type = ``type`` //required
                FundingInstructionsBankTransferFinancialAddress.Iban = iban
                FundingInstructionsBankTransferFinancialAddress.SortCode = sortCode
                FundingInstructionsBankTransferFinancialAddress.Spei = spei
                FundingInstructionsBankTransferFinancialAddress.SupportedNetworks = supportedNetworks
                FundingInstructionsBankTransferFinancialAddress.Zengin = zengin
            }

    and FundingInstructionsBankTransferFinancialAddressType =
        | Iban
        | SortCode
        | Spei
        | Zengin

    and FundingInstructionsBankTransferFinancialAddressSupportedNetworks =
        | Bacs
        | Fps
        | Sepa
        | Spei
        | Zengin

    ///Iban Records contain E.U. bank account details per the SEPA format.
    and FundingInstructionsBankTransferIbanRecord = {
        ///The name of the person or business that owns the bank account
        AccountHolderName: string
        ///The BIC/SWIFT code of the account.
        Bic: string
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string
        ///The IBAN of the account.
        Iban: string
    }
    with
        static member New (accountHolderName: string, bic: string, country: string, iban: string) =
            {
                FundingInstructionsBankTransferIbanRecord.AccountHolderName = accountHolderName //required
                FundingInstructionsBankTransferIbanRecord.Bic = bic //required
                FundingInstructionsBankTransferIbanRecord.Country = country //required
                FundingInstructionsBankTransferIbanRecord.Iban = iban //required
            }

    ///Sort Code Records contain U.K. bank account details per the sort code format.
    and FundingInstructionsBankTransferSortCodeRecord = {
        ///The name of the person or business that owns the bank account
        AccountHolderName: string
        ///The account number
        AccountNumber: string
        ///The six-digit sort code
        SortCode: string
    }
    with
        static member New (accountHolderName: string, accountNumber: string, sortCode: string) =
            {
                FundingInstructionsBankTransferSortCodeRecord.AccountHolderName = accountHolderName //required
                FundingInstructionsBankTransferSortCodeRecord.AccountNumber = accountNumber //required
                FundingInstructionsBankTransferSortCodeRecord.SortCode = sortCode //required
            }

    ///SPEI Records contain Mexico bank account details per the SPEI format.
    and FundingInstructionsBankTransferSpeiRecord = {
        ///The three-digit bank code
        BankCode: string
        ///The short banking institution name
        BankName: string
        ///The CLABE number
        Clabe: string
    }
    with
        static member New (bankCode: string, bankName: string, clabe: string) =
            {
                FundingInstructionsBankTransferSpeiRecord.BankCode = bankCode //required
                FundingInstructionsBankTransferSpeiRecord.BankName = bankName //required
                FundingInstructionsBankTransferSpeiRecord.Clabe = clabe //required
            }

    ///Zengin Records contain Japan bank account details per the Zengin format.
    and FundingInstructionsBankTransferZenginRecord = {
        ///The account holder name
        AccountHolderName: string option
        ///The account number
        AccountNumber: string option
        ///The bank account type. In Japan, this can only be `futsu` or `toza`.
        AccountType: FundingInstructionsBankTransferZenginRecordAccountType option
        ///The bank code of the account
        BankCode: string option
        ///The bank name of the account
        BankName: string option
        ///The branch code of the account
        BranchCode: string option
        ///The branch name of the account
        BranchName: string option
    }
    with
        static member New (accountHolderName: string option, accountNumber: string option, accountType: FundingInstructionsBankTransferZenginRecordAccountType option, bankCode: string option, bankName: string option, branchCode: string option, branchName: string option) =
            {
                FundingInstructionsBankTransferZenginRecord.AccountHolderName = accountHolderName //required
                FundingInstructionsBankTransferZenginRecord.AccountNumber = accountNumber //required
                FundingInstructionsBankTransferZenginRecord.AccountType = accountType //required
                FundingInstructionsBankTransferZenginRecord.BankCode = bankCode //required
                FundingInstructionsBankTransferZenginRecord.BankName = bankName //required
                FundingInstructionsBankTransferZenginRecord.BranchCode = branchCode //required
                FundingInstructionsBankTransferZenginRecord.BranchName = branchName //required
            }

    and FundingInstructionsBankTransferZenginRecordAccountType =
        | Futsu
        | Toza

    ///Point in Time
    and GelatoDataDocumentReportDateOfBirth = {
        ///Numerical day between 1 and 31.
        Day: int option
        ///Numerical month between 1 and 12.
        Month: int option
        ///The four-digit year.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                GelatoDataDocumentReportDateOfBirth.Day = day //required
                GelatoDataDocumentReportDateOfBirth.Month = month //required
                GelatoDataDocumentReportDateOfBirth.Year = year //required
            }

    ///Point in Time
    and GelatoDataDocumentReportExpirationDate = {
        ///Numerical day between 1 and 31.
        Day: int option
        ///Numerical month between 1 and 12.
        Month: int option
        ///The four-digit year.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                GelatoDataDocumentReportExpirationDate.Day = day //required
                GelatoDataDocumentReportExpirationDate.Month = month //required
                GelatoDataDocumentReportExpirationDate.Year = year //required
            }

    ///Point in Time
    and GelatoDataDocumentReportIssuedDate = {
        ///Numerical day between 1 and 31.
        Day: int option
        ///Numerical month between 1 and 12.
        Month: int option
        ///The four-digit year.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                GelatoDataDocumentReportIssuedDate.Day = day //required
                GelatoDataDocumentReportIssuedDate.Month = month //required
                GelatoDataDocumentReportIssuedDate.Year = year //required
            }

    ///Point in Time
    and GelatoDataIdNumberReportDate = {
        ///Numerical day between 1 and 31.
        Day: int option
        ///Numerical month between 1 and 12.
        Month: int option
        ///The four-digit year.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                GelatoDataIdNumberReportDate.Day = day //required
                GelatoDataIdNumberReportDate.Month = month //required
                GelatoDataIdNumberReportDate.Year = year //required
            }

    ///Point in Time
    and GelatoDataVerifiedOutputsDate = {
        ///Numerical day between 1 and 31.
        Day: int option
        ///Numerical month between 1 and 12.
        Month: int option
        ///The four-digit year.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                GelatoDataVerifiedOutputsDate.Day = day //required
                GelatoDataVerifiedOutputsDate.Month = month //required
                GelatoDataVerifiedOutputsDate.Year = year //required
            }

    ///Result from a document check
    and GelatoDocumentReport = {
        ///Address as it appears in the document.
        Address: Address option
        ///Date of birth as it appears in the document.
        Dob: GelatoDataDocumentReportDateOfBirth option
        ///Details on the verification error. Present when status is `unverified`.
        Error: GelatoDocumentReportError option
        ///Expiration date of the document.
        ExpirationDate: GelatoDataDocumentReportExpirationDate option
        ///Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
        Files: string list option
        ///First name as it appears in the document.
        FirstName: string option
        ///Issued date of the document.
        IssuedDate: GelatoDataDocumentReportIssuedDate option
        ///Issuing country of the document.
        IssuingCountry: string option
        ///Last name as it appears in the document.
        LastName: string option
        ///Document ID number.
        Number: string option
        ///Status of this `document` check.
        Status: GelatoDocumentReportStatus
        ///Type of the document.
        Type: GelatoDocumentReportType option
    }
    with
        static member New (address: Address option, dob: GelatoDataDocumentReportDateOfBirth option, error: GelatoDocumentReportError option, expirationDate: GelatoDataDocumentReportExpirationDate option, files: string list option, firstName: string option, issuedDate: GelatoDataDocumentReportIssuedDate option, issuingCountry: string option, lastName: string option, number: string option, status: GelatoDocumentReportStatus, ``type``: GelatoDocumentReportType option) =
            {
                GelatoDocumentReport.Address = address //required
                GelatoDocumentReport.Dob = dob //required
                GelatoDocumentReport.Error = error //required
                GelatoDocumentReport.ExpirationDate = expirationDate //required
                GelatoDocumentReport.Files = files //required
                GelatoDocumentReport.FirstName = firstName //required
                GelatoDocumentReport.IssuedDate = issuedDate //required
                GelatoDocumentReport.IssuingCountry = issuingCountry //required
                GelatoDocumentReport.LastName = lastName //required
                GelatoDocumentReport.Number = number //required
                GelatoDocumentReport.Status = status //required
                GelatoDocumentReport.Type = ``type`` //required
            }

    and GelatoDocumentReportStatus =
        | Unverified
        | Verified

    and GelatoDocumentReportType =
        | DrivingLicense
        | IdCard
        | Passport

    and GelatoDocumentReportError = {
        ///A short machine-readable string giving the reason for the verification failure.
        Code: GelatoDocumentReportErrorCode option
        ///A human-readable message giving the reason for the failure. These messages can be shown to your users.
        Reason: string option
    }
    with
        static member New (code: GelatoDocumentReportErrorCode option, reason: string option) =
            {
                GelatoDocumentReportError.Code = code //required
                GelatoDocumentReportError.Reason = reason //required
            }

    and GelatoDocumentReportErrorCode =
        | DocumentExpired
        | DocumentTypeNotSupported
        | DocumentUnverifiedOther

    ///Result from an id_number check
    and GelatoIdNumberReport = {
        ///Date of birth.
        Dob: GelatoDataIdNumberReportDate option
        ///Details on the verification error. Present when status is `unverified`.
        Error: GelatoIdNumberReportError option
        ///First name.
        FirstName: string option
        ///ID number.
        IdNumber: string option
        ///Type of ID number.
        IdNumberType: GelatoIdNumberReportIdNumberType option
        ///Last name.
        LastName: string option
        ///Status of this `id_number` check.
        Status: GelatoIdNumberReportStatus
    }
    with
        static member New (dob: GelatoDataIdNumberReportDate option, error: GelatoIdNumberReportError option, firstName: string option, idNumber: string option, idNumberType: GelatoIdNumberReportIdNumberType option, lastName: string option, status: GelatoIdNumberReportStatus) =
            {
                GelatoIdNumberReport.Dob = dob //required
                GelatoIdNumberReport.Error = error //required
                GelatoIdNumberReport.FirstName = firstName //required
                GelatoIdNumberReport.IdNumber = idNumber //required
                GelatoIdNumberReport.IdNumberType = idNumberType //required
                GelatoIdNumberReport.LastName = lastName //required
                GelatoIdNumberReport.Status = status //required
            }

    and GelatoIdNumberReportIdNumberType =
        | BrCpf
        | SgNric
        | UsSsn

    and GelatoIdNumberReportStatus =
        | Unverified
        | Verified

    and GelatoIdNumberReportError = {
        ///A short machine-readable string giving the reason for the verification failure.
        Code: GelatoIdNumberReportErrorCode option
        ///A human-readable message giving the reason for the failure. These messages can be shown to your users.
        Reason: string option
    }
    with
        static member New (code: GelatoIdNumberReportErrorCode option, reason: string option) =
            {
                GelatoIdNumberReportError.Code = code //required
                GelatoIdNumberReportError.Reason = reason //required
            }

    and GelatoIdNumberReportErrorCode =
        | IdNumberInsufficientDocumentData
        | IdNumberMismatch
        | IdNumberUnverifiedOther

    and GelatoReportDocumentOptions = {
        ///Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
        AllowedTypes: GelatoReportDocumentOptionsAllowedTypes list option
        ///Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
        RequireIdNumber: bool option
        ///Disable image uploads, identity document images have to be captured using the device’s camera.
        RequireLiveCapture: bool option
        ///Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
        RequireMatchingSelfie: bool option
    }
    with
        static member New (?allowedTypes: GelatoReportDocumentOptionsAllowedTypes list, ?requireIdNumber: bool, ?requireLiveCapture: bool, ?requireMatchingSelfie: bool) =
            {
                GelatoReportDocumentOptions.AllowedTypes = allowedTypes
                GelatoReportDocumentOptions.RequireIdNumber = requireIdNumber
                GelatoReportDocumentOptions.RequireLiveCapture = requireLiveCapture
                GelatoReportDocumentOptions.RequireMatchingSelfie = requireMatchingSelfie
            }

    and GelatoReportDocumentOptionsAllowedTypes =
        | DrivingLicense
        | IdCard
        | Passport

    and GelatoReportIdNumberOptions = {
        GelatoReportIdNumberOptions: string option
    }
    with
        static member New (?gelatoReportIdNumberOptions: string option) =
            {
                GelatoReportIdNumberOptions.GelatoReportIdNumberOptions = gelatoReportIdNumberOptions |> Option.flatten
            }

    ///Result from a selfie check
    and GelatoSelfieReport = {
        ///ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
        Document: string option
        ///Details on the verification error. Present when status is `unverified`.
        Error: GelatoSelfieReportError option
        ///ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
        Selfie: string option
        ///Status of this `selfie` check.
        Status: GelatoSelfieReportStatus
    }
    with
        static member New (document: string option, error: GelatoSelfieReportError option, selfie: string option, status: GelatoSelfieReportStatus) =
            {
                GelatoSelfieReport.Document = document //required
                GelatoSelfieReport.Error = error //required
                GelatoSelfieReport.Selfie = selfie //required
                GelatoSelfieReport.Status = status //required
            }

    and GelatoSelfieReportStatus =
        | Unverified
        | Verified

    and GelatoSelfieReportError = {
        ///A short machine-readable string giving the reason for the verification failure.
        Code: GelatoSelfieReportErrorCode option
        ///A human-readable message giving the reason for the failure. These messages can be shown to your users.
        Reason: string option
    }
    with
        static member New (code: GelatoSelfieReportErrorCode option, reason: string option) =
            {
                GelatoSelfieReportError.Code = code //required
                GelatoSelfieReportError.Reason = reason //required
            }

    and GelatoSelfieReportErrorCode =
        | SelfieDocumentMissingPhoto
        | SelfieFaceMismatch
        | SelfieManipulated
        | SelfieUnverifiedOther

    and GelatoSessionDocumentOptions = {
        ///Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
        AllowedTypes: GelatoSessionDocumentOptionsAllowedTypes list option
        ///Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
        RequireIdNumber: bool option
        ///Disable image uploads, identity document images have to be captured using the device’s camera.
        RequireLiveCapture: bool option
        ///Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
        RequireMatchingSelfie: bool option
    }
    with
        static member New (?allowedTypes: GelatoSessionDocumentOptionsAllowedTypes list, ?requireIdNumber: bool, ?requireLiveCapture: bool, ?requireMatchingSelfie: bool) =
            {
                GelatoSessionDocumentOptions.AllowedTypes = allowedTypes
                GelatoSessionDocumentOptions.RequireIdNumber = requireIdNumber
                GelatoSessionDocumentOptions.RequireLiveCapture = requireLiveCapture
                GelatoSessionDocumentOptions.RequireMatchingSelfie = requireMatchingSelfie
            }

    and GelatoSessionDocumentOptionsAllowedTypes =
        | DrivingLicense
        | IdCard
        | Passport

    and GelatoSessionIdNumberOptions = {
        GelatoSessionIdNumberOptions: string option
    }
    with
        static member New (?gelatoSessionIdNumberOptions: string option) =
            {
                GelatoSessionIdNumberOptions.GelatoSessionIdNumberOptions = gelatoSessionIdNumberOptions |> Option.flatten
            }

    ///Shows last VerificationSession error
    and GelatoSessionLastError = {
        ///A short machine-readable string giving the reason for the verification or user-session failure.
        Code: GelatoSessionLastErrorCode option
        ///A message that explains the reason for verification or user-session failure.
        Reason: string option
    }
    with
        static member New (code: GelatoSessionLastErrorCode option, reason: string option) =
            {
                GelatoSessionLastError.Code = code //required
                GelatoSessionLastError.Reason = reason //required
            }

    and GelatoSessionLastErrorCode =
        | Abandoned
        | ConsentDeclined
        | CountryNotSupported
        | DeviceNotSupported
        | DocumentExpired
        | DocumentTypeNotSupported
        | DocumentUnverifiedOther
        | IdNumberInsufficientDocumentData
        | IdNumberMismatch
        | IdNumberUnverifiedOther
        | SelfieDocumentMissingPhoto
        | SelfieFaceMismatch
        | SelfieManipulated
        | SelfieUnverifiedOther
        | UnderSupportedAge

    and GelatoVerificationReportOptions = {
        Document: GelatoReportDocumentOptions option
        IdNumber: GelatoReportIdNumberOptions option
    }
    with
        static member New (?document: GelatoReportDocumentOptions, ?idNumber: GelatoReportIdNumberOptions) =
            {
                GelatoVerificationReportOptions.Document = document
                GelatoVerificationReportOptions.IdNumber = idNumber
            }

    and GelatoVerificationSessionOptions = {
        Document: GelatoSessionDocumentOptions option
        IdNumber: GelatoSessionIdNumberOptions option
    }
    with
        static member New (?document: GelatoSessionDocumentOptions, ?idNumber: GelatoSessionIdNumberOptions) =
            {
                GelatoVerificationSessionOptions.Document = document
                GelatoVerificationSessionOptions.IdNumber = idNumber
            }

    and GelatoVerifiedOutputs = {
        ///The user's verified address.
        Address: Address option
        ///The user’s verified date of birth.
        Dob: GelatoDataVerifiedOutputsDate option
        ///The user's verified first name.
        FirstName: string option
        ///The user's verified id number.
        IdNumber: string option
        ///The user's verified id number type.
        IdNumberType: GelatoVerifiedOutputsIdNumberType option
        ///The user's verified last name.
        LastName: string option
    }
    with
        static member New (address: Address option, dob: GelatoDataVerifiedOutputsDate option, firstName: string option, idNumber: string option, idNumberType: GelatoVerifiedOutputsIdNumberType option, lastName: string option) =
            {
                GelatoVerifiedOutputs.Address = address //required
                GelatoVerifiedOutputs.Dob = dob //required
                GelatoVerifiedOutputs.FirstName = firstName //required
                GelatoVerifiedOutputs.IdNumber = idNumber //required
                GelatoVerifiedOutputs.IdNumberType = idNumberType //required
                GelatoVerifiedOutputs.LastName = lastName //required
            }

    and GelatoVerifiedOutputsIdNumberType =
        | BrCpf
        | SgNric
        | UsSsn

    ///A VerificationReport is the result of an attempt to collect and verify data from a user.
    ///The collection of verification checks performed is determined from the `type` and `options`
    ///parameters used. You can find the result of each verification check performed in the
    ///appropriate sub-resource: `document`, `id_number`, `selfie`.
    ///Each VerificationReport contains a copy of any data collected by the user as well as
    ///reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
    ///API. To configure and create VerificationReports, use the
    ///[VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
    ///Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
    and IdentityVerificationReport = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        Document: GelatoDocumentReport option
        ///Unique identifier for the object.
        Id: string
        IdNumber: GelatoIdNumberReport option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        Options: GelatoVerificationReportOptions option
        Selfie: GelatoSelfieReport option
        ///Type of report.
        Type: IdentityVerificationReportType option
        ///ID of the VerificationSession that created this report.
        VerificationSession: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "identity.verification_report"

        static member New (created: DateTime, id: string, livemode: bool, verificationSession: string option, ?document: GelatoDocumentReport, ?idNumber: GelatoIdNumberReport, ?options: GelatoVerificationReportOptions, ?selfie: GelatoSelfieReport, ?``type``: IdentityVerificationReportType) =
            {
                IdentityVerificationReport.Created = created //required
                IdentityVerificationReport.Id = id //required
                IdentityVerificationReport.Livemode = livemode //required
                IdentityVerificationReport.VerificationSession = verificationSession //required
                IdentityVerificationReport.Document = document
                IdentityVerificationReport.IdNumber = idNumber
                IdentityVerificationReport.Options = options
                IdentityVerificationReport.Selfie = selfie
                IdentityVerificationReport.Type = ``type``
            }

    and IdentityVerificationReportType =
        | Document
        | IdNumber

    ///A VerificationSession guides you through the process of collecting and verifying the identities
    ///of your users. It contains details about the type of verification, such as what [verification
    ///check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
    ///each verification in your system.
    ///A VerificationSession transitions through [multiple
    ///statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
    ///the verification flow. The VerificationSession contains the user's verified data after
    ///verification checks are complete.
    ///Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
    and IdentityVerificationSession = {
        ///The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
        ClientSecret: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Unique identifier for the object.
        Id: string
        ///If present, this property tells you the last error encountered when processing the verification.
        LastError: GelatoSessionLastError option
        ///ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
        LastVerificationReport: IdentityVerificationSessionLastVerificationReport'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///A set of options for the session’s verification checks.
        Options: GelatoVerificationSessionOptions option
        ///Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
        Redaction: VerificationSessionRedaction option
        ///Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
        Status: IdentityVerificationSessionStatus
        ///The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
        Type: IdentityVerificationSessionType option
        ///The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
        Url: string option
        ///The user’s verified data.
        VerifiedOutputs: GelatoVerifiedOutputs option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "identity.verification_session"

        static member New (clientSecret: string option, created: DateTime, id: string, lastError: GelatoSessionLastError option, lastVerificationReport: IdentityVerificationSessionLastVerificationReport'AnyOf option, livemode: bool, metadata: Map<string, string>, options: GelatoVerificationSessionOptions option, redaction: VerificationSessionRedaction option, status: IdentityVerificationSessionStatus, ``type``: IdentityVerificationSessionType option, url: string option, verifiedOutputs: GelatoVerifiedOutputs option) =
            {
                IdentityVerificationSession.ClientSecret = clientSecret //required
                IdentityVerificationSession.Created = created //required
                IdentityVerificationSession.Id = id //required
                IdentityVerificationSession.LastError = lastError //required
                IdentityVerificationSession.LastVerificationReport = lastVerificationReport //required
                IdentityVerificationSession.Livemode = livemode //required
                IdentityVerificationSession.Metadata = metadata //required
                IdentityVerificationSession.Options = options //required
                IdentityVerificationSession.Redaction = redaction //required
                IdentityVerificationSession.Status = status //required
                IdentityVerificationSession.Type = ``type`` //required
                IdentityVerificationSession.Url = url //required
                IdentityVerificationSession.VerifiedOutputs = verifiedOutputs //required
            }

    and IdentityVerificationSessionLastVerificationReport'AnyOf =
        | String of string
        | IdentityVerificationReport of IdentityVerificationReport

    and IdentityVerificationSessionStatus =
        | Canceled
        | Processing
        | RequiresInput
        | Verified

    and IdentityVerificationSessionType =
        | Document
        | IdNumber

    and InboundTransfers = {
        BillingDetails: TreasurySharedResourceBillingDetails
        UsBankAccount: InboundTransfersPaymentMethodDetailsUsBankAccount option
    }
    with
        ///The type of the payment method used in the InboundTransfer.
        member _.Type = "us_bank_account"

        static member New (billingDetails: TreasurySharedResourceBillingDetails, ?usBankAccount: InboundTransfersPaymentMethodDetailsUsBankAccount) =
            {
                InboundTransfers.BillingDetails = billingDetails //required
                InboundTransfers.UsBankAccount = usBankAccount
            }

    and InboundTransfersPaymentMethodDetailsUsBankAccount = {
        ///Account holder type: individual or company.
        AccountHolderType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType option
        ///Account type: checkings or savings. Defaults to checking if omitted.
        AccountType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountType option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///Routing number of the bank account.
        RoutingNumber: string option
    }
    with
        ///The US bank account network used to debit funds.
        member _.Network = "ach"

        static member New (accountHolderType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType option, accountType: InboundTransfersPaymentMethodDetailsUsBankAccountAccountType option, bankName: string option, fingerprint: string option, last4: string option, routingNumber: string option) =
            {
                InboundTransfersPaymentMethodDetailsUsBankAccount.AccountHolderType = accountHolderType //required
                InboundTransfersPaymentMethodDetailsUsBankAccount.AccountType = accountType //required
                InboundTransfersPaymentMethodDetailsUsBankAccount.BankName = bankName //required
                InboundTransfersPaymentMethodDetailsUsBankAccount.Fingerprint = fingerprint //required
                InboundTransfersPaymentMethodDetailsUsBankAccount.Last4 = last4 //required
                InboundTransfersPaymentMethodDetailsUsBankAccount.RoutingNumber = routingNumber //required
            }

    and InboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType =
        | Company
        | Individual

    and InboundTransfersPaymentMethodDetailsUsBankAccountAccountType =
        | Checking
        | Savings

    ///Invoices are statements of amounts owed by a customer, and are either
    ///generated one-off, or generated periodically from a subscription.
    ///They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
    ///that may be caused by subscription upgrades/downgrades (if necessary).
    ///If your invoice is configured to be billed through automatic charges,
    ///Stripe automatically finalizes your invoice and attempts payment. Note
    ///that finalizing the invoice,
    ///[when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
    ///not happen immediately as the invoice is created. Stripe waits
    ///until one hour after the last webhook was successfully sent (or the last
    ///webhook timed out after failing). If you (and the platforms you may have
    ///connected to) have no webhooks configured, Stripe waits one hour after
    ///creation to finalize the invoice.
    ///If your invoice is configured to be billed by sending an email, then based on your
    ///[email settings](https://dashboard.stripe.com/account/billing/automatic),
    ///Stripe will email the invoice to your customer and await payment. These
    ///emails can contain a link to a hosted page to pay the invoice.
    ///Stripe applies any customer credit on the account before determining the
    ///amount due for the invoice (i.e., the amount that will be actually
    ///charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
    ///per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
    ///invoice is automatically marked paid, and we add the amount due to the
    ///customer's credit balance which is applied to the next invoice.
    ///More details on the customer's credit balance are
    ///[here](https://stripe.com/docs/billing/customer/balance).
    ///Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
    and Invoice = {
        ///The country of the business associated with this invoice, most often the business creating the invoice.
        AccountCountry: string option
        ///The public name of the business associated with this invoice, most often the business creating the invoice.
        AccountName: string option
        ///The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
        AccountTaxIds: InvoiceAccountTaxIds'AnyOf list option
        ///Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
        AmountDue: int
        ///The amount, in cents (or local equivalent), that was paid.
        AmountPaid: int
        ///The difference between amount_due and amount_paid, in cents (or local equivalent).
        AmountRemaining: int
        ///This is the sum of all the shipping amounts.
        AmountShipping: int
        ///ID of the Connect Application that created the invoice.
        Application: InvoiceApplication'AnyOf option
        ///The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
        ApplicationFeeAmount: int option
        ///Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
        AttemptCount: int
        ///Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
        Attempted: bool
        ///Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
        AutoAdvance: bool option
        AutomaticTax: AutomaticTax
        ///Indicates the reason why the invoice was created.
        ///* `manual`: Unrelated to a subscription, for example, created via the invoice editor.
        ///* `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
        ///* `subscription_create`: A new subscription was created.
        ///* `subscription_cycle`: A subscription advanced into a new period.
        ///* `subscription_threshold`: A subscription reached a billing threshold.
        ///* `subscription_update`: A subscription was updated.
        ///* `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
        BillingReason: InvoiceBillingReason option
        ///ID of the latest charge generated for this invoice, if any.
        Charge: InvoiceCharge'AnyOf option
        ///Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
        CollectionMethod: InvoiceCollectionMethod
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Custom fields displayed on the invoice.
        CustomFields: InvoiceSettingCustomField list option
        ///The ID of the customer who will be billed.
        Customer: InvoiceCustomer'AnyOf option
        ///The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
        CustomerAddress: Address option
        ///The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
        CustomerEmail: string option
        ///The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
        CustomerName: string option
        ///The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
        CustomerPhone: string option
        ///The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
        CustomerShipping: Shipping option
        ///The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
        CustomerTaxExempt: InvoiceCustomerTaxExempt option
        ///The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
        CustomerTaxIds: InvoicesResourceInvoiceTaxId list option
        ///ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
        DefaultPaymentMethod: InvoiceDefaultPaymentMethod'AnyOf option
        ///ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
        DefaultSource: InvoiceDefaultSource'AnyOf option
        ///The tax rates applied to this invoice, if any.
        DefaultTaxRates: TaxRate list
        ///An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
        Description: string option
        ///Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts.
        Discount: Discount option
        ///The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
        Discounts: InvoiceDiscounts'AnyOf list option
        ///The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]DueDate: DateTime option
        ///The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EffectiveAt: DateTime option
        ///Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
        EndingBalance: int option
        ///Footer displayed on the invoice.
        Footer: string option
        ///Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details.
        FromInvoice: InvoicesFromInvoice option
        ///The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
        HostedInvoiceUrl: string option
        ///Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.
        Id: string option
        ///The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
        InvoicePdf: string option
        ///The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
        LastFinalizationError: ApiErrors option
        ///The ID of the most recent non-draft revision of this invoice
        LatestRevision: InvoiceLatestRevision'AnyOf option
        ///The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
        Lines: InvoiceLines
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]NextPaymentAttempt: DateTime option
        ///A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
        Number: string option
        ///The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
        OnBehalfOf: InvoiceOnBehalfOf'AnyOf option
        ///Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
        Paid: bool
        ///Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe.
        PaidOutOfBand: bool
        ///The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
        PaymentIntent: InvoicePaymentIntent'AnyOf option
        PaymentSettings: InvoicesPaymentSettings
        ///End of the usage period during which invoice items were added to this invoice.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PeriodEnd: DateTime
        ///Start of the usage period during which invoice items were added to this invoice.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PeriodStart: DateTime
        ///Total amount of all post-payment credit notes issued for this invoice.
        PostPaymentCreditNotesAmount: int
        ///Total amount of all pre-payment credit notes issued for this invoice.
        PrePaymentCreditNotesAmount: int
        ///The quote this invoice was generated from.
        Quote: InvoiceQuote'AnyOf option
        ///This is the transaction number that appears on email receipts sent for this invoice.
        ReceiptNumber: string option
        ///Options for invoice PDF rendering.
        RenderingOptions: InvoiceSettingRenderingOptions option
        ///The details of the cost of shipping, including the ShippingRate applied on the invoice.
        ShippingCost: InvoicesShippingCost option
        ///Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.
        ShippingDetails: Shipping option
        ///Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
        StartingBalance: int
        ///Extra information about an invoice for the customer's credit card statement.
        StatementDescriptor: string option
        ///The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
        Status: InvoiceStatus option
        StatusTransitions: InvoicesStatusTransitions
        ///The subscription that this invoice was prepared for, if any.
        Subscription: InvoiceSubscription'AnyOf option
        ///Details about the subscription that created this invoice.
        SubscriptionDetails: SubscriptionDetailsData option
        ///Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
        SubscriptionProrationDate: int option
        ///Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
        Subtotal: int
        ///The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
        SubtotalExcludingTax: int option
        ///The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
        Tax: int option
        ///ID of the test clock this invoice belongs to.
        TestClock: InvoiceTestClock'AnyOf option
        ThresholdReason: InvoiceThresholdReason option
        ///Total after discounts and taxes.
        Total: int
        ///The aggregate amounts calculated per discount across all line items.
        TotalDiscountAmounts: DiscountsResourceDiscountAmount list option
        ///The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
        TotalExcludingTax: int option
        ///The aggregate amounts calculated per tax rate for all line items.
        TotalTaxAmounts: InvoiceTaxAmount list
        ///The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice.
        TransferData: InvoiceTransferData option
        ///Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]WebhooksDeliveredAt: DateTime option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "invoice"

        static member New (accountCountry: string option, accountName: string option, accountTaxIds: InvoiceAccountTaxIds'AnyOf list option, amountDue: int, amountPaid: int, amountRemaining: int, amountShipping: int, application: InvoiceApplication'AnyOf option, applicationFeeAmount: int option, attemptCount: int, attempted: bool, automaticTax: AutomaticTax, billingReason: InvoiceBillingReason option, charge: InvoiceCharge'AnyOf option, collectionMethod: InvoiceCollectionMethod, created: DateTime, currency: string, customFields: InvoiceSettingCustomField list option, customer: InvoiceCustomer'AnyOf option, customerAddress: Address option, customerEmail: string option, customerName: string option, customerPhone: string option, customerShipping: Shipping option, customerTaxExempt: InvoiceCustomerTaxExempt option, defaultPaymentMethod: InvoiceDefaultPaymentMethod'AnyOf option, defaultSource: InvoiceDefaultSource'AnyOf option, defaultTaxRates: TaxRate list, description: string option, discount: Discount option, discounts: InvoiceDiscounts'AnyOf list option, dueDate: DateTime option, effectiveAt: DateTime option, endingBalance: int option, footer: string option, fromInvoice: InvoicesFromInvoice option, lastFinalizationError: ApiErrors option, latestRevision: InvoiceLatestRevision'AnyOf option, lines: InvoiceLines, livemode: bool, metadata: Map<string, string> option, nextPaymentAttempt: DateTime option, number: string option, onBehalfOf: InvoiceOnBehalfOf'AnyOf option, paid: bool, paidOutOfBand: bool, paymentIntent: InvoicePaymentIntent'AnyOf option, paymentSettings: InvoicesPaymentSettings, periodEnd: DateTime, periodStart: DateTime, postPaymentCreditNotesAmount: int, prePaymentCreditNotesAmount: int, quote: InvoiceQuote'AnyOf option, receiptNumber: string option, renderingOptions: InvoiceSettingRenderingOptions option, shippingCost: InvoicesShippingCost option, shippingDetails: Shipping option, startingBalance: int, statementDescriptor: string option, status: InvoiceStatus option, statusTransitions: InvoicesStatusTransitions, subscription: InvoiceSubscription'AnyOf option, subscriptionDetails: SubscriptionDetailsData option, subtotal: int, subtotalExcludingTax: int option, tax: int option, testClock: InvoiceTestClock'AnyOf option, total: int, totalDiscountAmounts: DiscountsResourceDiscountAmount list option, totalExcludingTax: int option, totalTaxAmounts: InvoiceTaxAmount list, transferData: InvoiceTransferData option, webhooksDeliveredAt: DateTime option, ?autoAdvance: bool, ?customerTaxIds: InvoicesResourceInvoiceTaxId list option, ?hostedInvoiceUrl: string option, ?id: string, ?invoicePdf: string option, ?subscriptionProrationDate: int, ?thresholdReason: InvoiceThresholdReason) =
            {
                Invoice.AccountCountry = accountCountry //required
                Invoice.AccountName = accountName //required
                Invoice.AccountTaxIds = accountTaxIds //required
                Invoice.AmountDue = amountDue //required
                Invoice.AmountPaid = amountPaid //required
                Invoice.AmountRemaining = amountRemaining //required
                Invoice.AmountShipping = amountShipping //required
                Invoice.Application = application //required
                Invoice.ApplicationFeeAmount = applicationFeeAmount //required
                Invoice.AttemptCount = attemptCount //required
                Invoice.Attempted = attempted //required
                Invoice.AutomaticTax = automaticTax //required
                Invoice.BillingReason = billingReason //required
                Invoice.Charge = charge //required
                Invoice.CollectionMethod = collectionMethod //required
                Invoice.Created = created //required
                Invoice.Currency = currency //required
                Invoice.CustomFields = customFields //required
                Invoice.Customer = customer //required
                Invoice.CustomerAddress = customerAddress //required
                Invoice.CustomerEmail = customerEmail //required
                Invoice.CustomerName = customerName //required
                Invoice.CustomerPhone = customerPhone //required
                Invoice.CustomerShipping = customerShipping //required
                Invoice.CustomerTaxExempt = customerTaxExempt //required
                Invoice.DefaultPaymentMethod = defaultPaymentMethod //required
                Invoice.DefaultSource = defaultSource //required
                Invoice.DefaultTaxRates = defaultTaxRates //required
                Invoice.Description = description //required
                Invoice.Discount = discount //required
                Invoice.Discounts = discounts //required
                Invoice.DueDate = dueDate //required
                Invoice.EffectiveAt = effectiveAt //required
                Invoice.EndingBalance = endingBalance //required
                Invoice.Footer = footer //required
                Invoice.FromInvoice = fromInvoice //required
                Invoice.LastFinalizationError = lastFinalizationError //required
                Invoice.LatestRevision = latestRevision //required
                Invoice.Lines = lines //required
                Invoice.Livemode = livemode //required
                Invoice.Metadata = metadata //required
                Invoice.NextPaymentAttempt = nextPaymentAttempt //required
                Invoice.Number = number //required
                Invoice.OnBehalfOf = onBehalfOf //required
                Invoice.Paid = paid //required
                Invoice.PaidOutOfBand = paidOutOfBand //required
                Invoice.PaymentIntent = paymentIntent //required
                Invoice.PaymentSettings = paymentSettings //required
                Invoice.PeriodEnd = periodEnd //required
                Invoice.PeriodStart = periodStart //required
                Invoice.PostPaymentCreditNotesAmount = postPaymentCreditNotesAmount //required
                Invoice.PrePaymentCreditNotesAmount = prePaymentCreditNotesAmount //required
                Invoice.Quote = quote //required
                Invoice.ReceiptNumber = receiptNumber //required
                Invoice.RenderingOptions = renderingOptions //required
                Invoice.ShippingCost = shippingCost //required
                Invoice.ShippingDetails = shippingDetails //required
                Invoice.StartingBalance = startingBalance //required
                Invoice.StatementDescriptor = statementDescriptor //required
                Invoice.Status = status //required
                Invoice.StatusTransitions = statusTransitions //required
                Invoice.Subscription = subscription //required
                Invoice.SubscriptionDetails = subscriptionDetails //required
                Invoice.Subtotal = subtotal //required
                Invoice.SubtotalExcludingTax = subtotalExcludingTax //required
                Invoice.Tax = tax //required
                Invoice.TestClock = testClock //required
                Invoice.Total = total //required
                Invoice.TotalDiscountAmounts = totalDiscountAmounts //required
                Invoice.TotalExcludingTax = totalExcludingTax //required
                Invoice.TotalTaxAmounts = totalTaxAmounts //required
                Invoice.TransferData = transferData //required
                Invoice.WebhooksDeliveredAt = webhooksDeliveredAt //required
                Invoice.AutoAdvance = autoAdvance
                Invoice.CustomerTaxIds = customerTaxIds |> Option.flatten
                Invoice.HostedInvoiceUrl = hostedInvoiceUrl |> Option.flatten
                Invoice.Id = id
                Invoice.InvoicePdf = invoicePdf |> Option.flatten
                Invoice.SubscriptionProrationDate = subscriptionProrationDate
                Invoice.ThresholdReason = thresholdReason
            }

    and InvoiceApplication'AnyOf =
        | String of string
        | Application of Application
        | DeletedApplication of DeletedApplication

    and InvoiceBillingReason =
        | AutomaticPendingInvoiceItemInvoice
        | Manual
        | QuoteAccept
        | Subscription
        | SubscriptionCreate
        | SubscriptionCycle
        | SubscriptionThreshold
        | SubscriptionUpdate
        | Upcoming

    and InvoiceCharge'AnyOf =
        | String of string
        | Charge of Charge

    and InvoiceCollectionMethod =
        | ChargeAutomatically
        | SendInvoice

    and InvoiceCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and InvoiceCustomerTaxExempt =
        | Exempt
        | [<JsonUnionCase("none")>] None'
        | Reverse

    and InvoiceDefaultPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and InvoiceDefaultSource'AnyOf =
        | String of string
        | PaymentSource of PaymentSource

    and InvoiceLatestRevision'AnyOf =
        | String of string
        | Invoice of Invoice

    and InvoiceOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and InvoicePaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and InvoiceQuote'AnyOf =
        | String of string
        | Quote of Quote

    and InvoiceStatus =
        | Draft
        | Open
        | Paid
        | Uncollectible
        | Void

    and InvoiceSubscription'AnyOf =
        | String of string
        | Subscription of Subscription

    and InvoiceTestClock'AnyOf =
        | String of string
        | TestHelpersTestClock of TestHelpersTestClock

    and InvoiceAccountTaxIds'AnyOf =
        | String of string
        | TaxId of TaxId
        | DeletedTaxId of DeletedTaxId

    and InvoiceDiscounts'AnyOf =
        | String of string
        | Discount of Discount
        | DeletedDiscount of DeletedDiscount

    ///The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
    and InvoiceLines = {
        ///Details about each object.
        Data: LineItem list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: LineItem list, hasMore: bool, url: string) =
            {
                InvoiceLines.Data = data //required
                InvoiceLines.HasMore = hasMore //required
                InvoiceLines.Url = url //required
            }

    and InvoiceInstallmentsCard = {
        ///Whether Installments are enabled for this Invoice.
        Enabled: bool option
    }
    with
        static member New (enabled: bool option) =
            {
                InvoiceInstallmentsCard.Enabled = enabled //required
            }

    and InvoiceItemThresholdReason = {
        ///The IDs of the line items that triggered the threshold invoice.
        LineItemIds: string list
        ///The quantity threshold boundary that applied to the given line item.
        UsageGte: int
    }
    with
        static member New (lineItemIds: string list, usageGte: int) =
            {
                InvoiceItemThresholdReason.LineItemIds = lineItemIds //required
                InvoiceItemThresholdReason.UsageGte = usageGte //required
            }

    and InvoiceLineItemPeriod = {
        ///The end of the period, which must be greater than or equal to the start. This value is inclusive.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]End: DateTime
        ///The start of the period. This value is inclusive.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Start: DateTime
    }
    with
        static member New (``end``: DateTime, start: DateTime) =
            {
                InvoiceLineItemPeriod.End = ``end`` //required
                InvoiceLineItemPeriod.Start = start //required
            }

    and InvoiceMandateOptionsCard = {
        ///Amount to be charged for future payments.
        Amount: int option
        ///One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
        AmountType: InvoiceMandateOptionsCardAmountType option
        ///A description of the mandate or subscription that is meant to be displayed to the customer.
        Description: string option
    }
    with
        static member New (amount: int option, amountType: InvoiceMandateOptionsCardAmountType option, description: string option) =
            {
                InvoiceMandateOptionsCard.Amount = amount //required
                InvoiceMandateOptionsCard.AmountType = amountType //required
                InvoiceMandateOptionsCard.Description = description //required
            }

    and InvoiceMandateOptionsCardAmountType =
        | Fixed
        | Maximum

    and InvoicePaymentMethodOptionsAcssDebit = {
        MandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions option
        ///Bank account verification method.
        VerificationMethod: InvoicePaymentMethodOptionsAcssDebitVerificationMethod option
    }
    with
        static member New (?mandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions, ?verificationMethod: InvoicePaymentMethodOptionsAcssDebitVerificationMethod) =
            {
                InvoicePaymentMethodOptionsAcssDebit.MandateOptions = mandateOptions
                InvoicePaymentMethodOptionsAcssDebit.VerificationMethod = verificationMethod
            }

    and InvoicePaymentMethodOptionsAcssDebitVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and InvoicePaymentMethodOptionsAcssDebitMandateOptions = {
        ///Transaction type of the mandate.
        TransactionType: InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType option
    }
    with
        static member New (transactionType: InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType option) =
            {
                InvoicePaymentMethodOptionsAcssDebitMandateOptions.TransactionType = transactionType //required
            }

    and InvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType =
        | Business
        | Personal

    and InvoicePaymentMethodOptionsBancontact = {
        ///Preferred language of the Bancontact authorization page that the customer is redirected to.
        PreferredLanguage: InvoicePaymentMethodOptionsBancontactPreferredLanguage
    }
    with
        static member New (preferredLanguage: InvoicePaymentMethodOptionsBancontactPreferredLanguage) =
            {
                InvoicePaymentMethodOptionsBancontact.PreferredLanguage = preferredLanguage //required
            }

    and InvoicePaymentMethodOptionsBancontactPreferredLanguage =
        | De
        | En
        | Fr
        | Nl

    and InvoicePaymentMethodOptionsCard = {
        Installments: InvoiceInstallmentsCard option
        ///We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
        RequestThreeDSecure: InvoicePaymentMethodOptionsCardRequestThreeDSecure option
    }
    with
        static member New (requestThreeDSecure: InvoicePaymentMethodOptionsCardRequestThreeDSecure option, ?installments: InvoiceInstallmentsCard) =
            {
                InvoicePaymentMethodOptionsCard.RequestThreeDSecure = requestThreeDSecure //required
                InvoicePaymentMethodOptionsCard.Installments = installments
            }

    and InvoicePaymentMethodOptionsCardRequestThreeDSecure =
        | Any
        | Automatic

    and InvoicePaymentMethodOptionsCustomerBalance = {
        BankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer option
    }
    with
        ///The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
        member _.FundingType = "bank_transfer"

        static member New (?bankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer) =
            {
                InvoicePaymentMethodOptionsCustomerBalance.BankTransfer = bankTransfer
            }

    and InvoicePaymentMethodOptionsCustomerBalanceBankTransfer = {
        EuBankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer option
        ///The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
        Type: InvoicePaymentMethodOptionsCustomerBalanceBankTransferType option
    }
    with
        static member New (``type``: InvoicePaymentMethodOptionsCustomerBalanceBankTransferType option, ?euBankTransfer: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer) =
            {
                InvoicePaymentMethodOptionsCustomerBalanceBankTransfer.Type = ``type`` //required
                InvoicePaymentMethodOptionsCustomerBalanceBankTransfer.EuBankTransfer = euBankTransfer
            }

    and InvoicePaymentMethodOptionsCustomerBalanceBankTransferType =
        | EuBankTransfer
        | GbBankTransfer
        | JpBankTransfer
        | MxBankTransfer
        | UsBankTransfer

    and InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer = {
        ///The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
        Country: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry
    }
    with
        static member New (country: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry) =
            {
                InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer.Country = country //required
            }

    and InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry =
        | [<JsonUnionCase("BE")>] BE
        | [<JsonUnionCase("DE")>] DE
        | [<JsonUnionCase("ES")>] ES
        | [<JsonUnionCase("FR")>] FR
        | [<JsonUnionCase("IE")>] IE
        | [<JsonUnionCase("NL")>] NL

    and InvoicePaymentMethodOptionsKonbini = {
        InvoicePaymentMethodOptionsKonbini: string option
    }
    with
        static member New (?invoicePaymentMethodOptionsKonbini: string option) =
            {
                InvoicePaymentMethodOptionsKonbini.InvoicePaymentMethodOptionsKonbini = invoicePaymentMethodOptionsKonbini |> Option.flatten
            }

    and InvoicePaymentMethodOptionsUsBankAccount = {
        FinancialConnections: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions option
        ///Bank account verification method.
        VerificationMethod: InvoicePaymentMethodOptionsUsBankAccountVerificationMethod option
    }
    with
        static member New (?financialConnections: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions, ?verificationMethod: InvoicePaymentMethodOptionsUsBankAccountVerificationMethod) =
            {
                InvoicePaymentMethodOptionsUsBankAccount.FinancialConnections = financialConnections
                InvoicePaymentMethodOptionsUsBankAccount.VerificationMethod = verificationMethod
            }

    and InvoicePaymentMethodOptionsUsBankAccountVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions = {
        ///The list of permissions to request. The `payment_method` permission must be included.
        Permissions: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions list option
        ///Data features requested to be retrieved upon account creation.
        Prefetch: string list option
    }
    with
        static member New (prefetch: string list option, ?permissions: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions list) =
            {
                InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions.Prefetch = prefetch //required
                InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions.Permissions = permissions
            }

    and InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions =
        | Balances
        | PaymentMethod
        | Transactions

    and InvoiceSettingCustomField = {
        ///The name of the custom field.
        Name: string
        ///The value of the custom field.
        Value: string
    }
    with
        static member New (name: string, value: string) =
            {
                InvoiceSettingCustomField.Name = name //required
                InvoiceSettingCustomField.Value = value //required
            }

    and InvoiceSettingCustomerSetting = {
        ///Default custom fields to be displayed on invoices for this customer.
        CustomFields: InvoiceSettingCustomField list option
        ///ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
        DefaultPaymentMethod: InvoiceSettingCustomerSettingDefaultPaymentMethod'AnyOf option
        ///Default footer to be displayed on invoices for this customer.
        Footer: string option
        ///Default options for invoice PDF rendering for this customer.
        RenderingOptions: InvoiceSettingRenderingOptions option
    }
    with
        static member New (customFields: InvoiceSettingCustomField list option, defaultPaymentMethod: InvoiceSettingCustomerSettingDefaultPaymentMethod'AnyOf option, footer: string option, renderingOptions: InvoiceSettingRenderingOptions option) =
            {
                InvoiceSettingCustomerSetting.CustomFields = customFields //required
                InvoiceSettingCustomerSetting.DefaultPaymentMethod = defaultPaymentMethod //required
                InvoiceSettingCustomerSetting.Footer = footer //required
                InvoiceSettingCustomerSetting.RenderingOptions = renderingOptions //required
            }

    and InvoiceSettingCustomerSettingDefaultPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and InvoiceSettingQuoteSetting = {
        ///Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
        DaysUntilDue: int option
    }
    with
        static member New (daysUntilDue: int option) =
            {
                InvoiceSettingQuoteSetting.DaysUntilDue = daysUntilDue //required
            }

    and InvoiceSettingRenderingOptions = {
        ///How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
        AmountTaxDisplay: string option
    }
    with
        static member New (amountTaxDisplay: string option) =
            {
                InvoiceSettingRenderingOptions.AmountTaxDisplay = amountTaxDisplay //required
            }

    and InvoiceSettingSubscriptionSchedulePhaseSetting = {
        ///Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
        DaysUntilDue: int option
    }
    with
        static member New (daysUntilDue: int option) =
            {
                InvoiceSettingSubscriptionSchedulePhaseSetting.DaysUntilDue = daysUntilDue //required
            }

    and InvoiceSettingSubscriptionScheduleSetting = {
        ///Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
        DaysUntilDue: int option
    }
    with
        static member New (daysUntilDue: int option) =
            {
                InvoiceSettingSubscriptionScheduleSetting.DaysUntilDue = daysUntilDue //required
            }

    and InvoiceTaxAmount = {
        ///The amount, in cents (or local equivalent), of the tax.
        Amount: int
        ///Whether this tax amount is inclusive or exclusive.
        Inclusive: bool
        ///The tax rate that was applied to get this tax amount.
        TaxRate: InvoiceTaxAmountTaxRate'AnyOf
        ///The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
        TaxabilityReason: InvoiceTaxAmountTaxabilityReason option
        ///The amount on which tax is calculated, in cents (or local equivalent).
        TaxableAmount: int option
    }
    with
        static member New (amount: int, inclusive: bool, taxRate: InvoiceTaxAmountTaxRate'AnyOf, taxabilityReason: InvoiceTaxAmountTaxabilityReason option, taxableAmount: int option) =
            {
                InvoiceTaxAmount.Amount = amount //required
                InvoiceTaxAmount.Inclusive = inclusive //required
                InvoiceTaxAmount.TaxRate = taxRate //required
                InvoiceTaxAmount.TaxabilityReason = taxabilityReason //required
                InvoiceTaxAmount.TaxableAmount = taxableAmount //required
            }

    and InvoiceTaxAmountTaxRate'AnyOf =
        | String of string
        | TaxRate of TaxRate

    and InvoiceTaxAmountTaxabilityReason =
        | CustomerExempt
        | NotCollecting
        | NotSubjectToTax
        | NotSupported
        | PortionProductExempt
        | PortionReducedRated
        | PortionStandardRated
        | ProductExempt
        | ProductExemptHoliday
        | ProportionallyRated
        | ReducedRated
        | ReverseCharge
        | StandardRated
        | TaxableBasisReduced
        | ZeroRated

    and InvoiceThresholdReason = {
        ///The total invoice amount threshold boundary if it triggered the threshold invoice.
        AmountGte: int option
        ///Indicates which line items triggered a threshold invoice.
        ItemReasons: InvoiceItemThresholdReason list
    }
    with
        static member New (amountGte: int option, itemReasons: InvoiceItemThresholdReason list) =
            {
                InvoiceThresholdReason.AmountGte = amountGte //required
                InvoiceThresholdReason.ItemReasons = itemReasons //required
            }

    and InvoiceTransferData = {
        ///The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
        Amount: int option
        ///The account where funds from the payment will be transferred to upon payment success.
        Destination: InvoiceTransferDataDestination'AnyOf
    }
    with
        static member New (amount: int option, destination: InvoiceTransferDataDestination'AnyOf) =
            {
                InvoiceTransferData.Amount = amount //required
                InvoiceTransferData.Destination = destination //required
            }

    and InvoiceTransferDataDestination'AnyOf =
        | String of string
        | Account of Account

    ///Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
    ///invoice by creating or updating it with an `invoice` field, at which point it will be included as
    ///[an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
    ///[invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
    ///Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
    ///with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
    ///or credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges
    ///(to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
    ///Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
    and Invoiceitem = {
        ///Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The ID of the customer who will be billed when this invoice item is billed.
        Customer: InvoiceitemCustomer'AnyOf
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Date: DateTime
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///If true, discounts will apply to this invoice item. Always false for prorations.
        Discountable: bool
        ///The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
        Discounts: InvoiceitemDiscounts'AnyOf list option
        ///Unique identifier for the object.
        Id: string
        ///The ID of the invoice this invoice item belongs to.
        Invoice: InvoiceitemInvoice'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        Period: InvoiceLineItemPeriod
        ///If the invoice item is a proration, the plan of the subscription that the proration was computed for.
        Plan: Plan option
        ///The price of the invoice item.
        Price: Price option
        ///Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
        Proration: bool
        ///Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
        Quantity: int
        ///The subscription that this invoice item has been created for, if any.
        Subscription: InvoiceitemSubscription'AnyOf option
        ///The subscription item that this invoice item has been created for, if any.
        SubscriptionItem: string option
        ///The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
        TaxRates: TaxRate list option
        ///ID of the test clock this invoice item belongs to.
        TestClock: InvoiceitemTestClock'AnyOf option
        ///Unit amount (in the `currency` specified) of the invoice item.
        UnitAmount: int option
        ///Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
        UnitAmountDecimal: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "invoiceitem"

        static member New (amount: int, currency: string, customer: InvoiceitemCustomer'AnyOf, date: DateTime, description: string option, discountable: bool, discounts: InvoiceitemDiscounts'AnyOf list option, id: string, invoice: InvoiceitemInvoice'AnyOf option, livemode: bool, metadata: Map<string, string> option, period: InvoiceLineItemPeriod, plan: Plan option, price: Price option, proration: bool, quantity: int, subscription: InvoiceitemSubscription'AnyOf option, taxRates: TaxRate list option, testClock: InvoiceitemTestClock'AnyOf option, unitAmount: int option, unitAmountDecimal: string option, ?subscriptionItem: string) =
            {
                Invoiceitem.Amount = amount //required
                Invoiceitem.Currency = currency //required
                Invoiceitem.Customer = customer //required
                Invoiceitem.Date = date //required
                Invoiceitem.Description = description //required
                Invoiceitem.Discountable = discountable //required
                Invoiceitem.Discounts = discounts //required
                Invoiceitem.Id = id //required
                Invoiceitem.Invoice = invoice //required
                Invoiceitem.Livemode = livemode //required
                Invoiceitem.Metadata = metadata //required
                Invoiceitem.Period = period //required
                Invoiceitem.Plan = plan //required
                Invoiceitem.Price = price //required
                Invoiceitem.Proration = proration //required
                Invoiceitem.Quantity = quantity //required
                Invoiceitem.Subscription = subscription //required
                Invoiceitem.TaxRates = taxRates //required
                Invoiceitem.TestClock = testClock //required
                Invoiceitem.UnitAmount = unitAmount //required
                Invoiceitem.UnitAmountDecimal = unitAmountDecimal //required
                Invoiceitem.SubscriptionItem = subscriptionItem
            }

    and InvoiceitemCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and InvoiceitemInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and InvoiceitemSubscription'AnyOf =
        | String of string
        | Subscription of Subscription

    and InvoiceitemTestClock'AnyOf =
        | String of string
        | TestHelpersTestClock of TestHelpersTestClock

    and InvoiceitemDiscounts'AnyOf =
        | String of string
        | Discount of Discount

    and InvoicesFromInvoice = {
        ///The relation between this invoice and the cloned invoice
        Action: string
        ///The invoice that was cloned.
        Invoice: InvoicesFromInvoiceInvoice'AnyOf
    }
    with
        static member New (action: string, invoice: InvoicesFromInvoiceInvoice'AnyOf) =
            {
                InvoicesFromInvoice.Action = action //required
                InvoicesFromInvoice.Invoice = invoice //required
            }

    and InvoicesFromInvoiceInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and InvoicesPaymentMethodOptions = {
        ///If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
        AcssDebit: InvoicePaymentMethodOptionsAcssDebit option
        ///If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
        Bancontact: InvoicePaymentMethodOptionsBancontact option
        ///If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
        Card: InvoicePaymentMethodOptionsCard option
        ///If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent.
        CustomerBalance: InvoicePaymentMethodOptionsCustomerBalance option
        ///If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent.
        Konbini: InvoicePaymentMethodOptionsKonbini option
        ///If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent.
        UsBankAccount: InvoicePaymentMethodOptionsUsBankAccount option
    }
    with
        static member New (acssDebit: InvoicePaymentMethodOptionsAcssDebit option, bancontact: InvoicePaymentMethodOptionsBancontact option, card: InvoicePaymentMethodOptionsCard option, customerBalance: InvoicePaymentMethodOptionsCustomerBalance option, konbini: InvoicePaymentMethodOptionsKonbini option, usBankAccount: InvoicePaymentMethodOptionsUsBankAccount option) =
            {
                InvoicesPaymentMethodOptions.AcssDebit = acssDebit //required
                InvoicesPaymentMethodOptions.Bancontact = bancontact //required
                InvoicesPaymentMethodOptions.Card = card //required
                InvoicesPaymentMethodOptions.CustomerBalance = customerBalance //required
                InvoicesPaymentMethodOptions.Konbini = konbini //required
                InvoicesPaymentMethodOptions.UsBankAccount = usBankAccount //required
            }

    and InvoicesPaymentSettings = {
        ///ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
        DefaultMandate: string option
        ///Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
        PaymentMethodOptions: InvoicesPaymentMethodOptions option
        ///The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
        PaymentMethodTypes: InvoicesPaymentSettingsPaymentMethodTypes list option
    }
    with
        static member New (defaultMandate: string option, paymentMethodOptions: InvoicesPaymentMethodOptions option, paymentMethodTypes: InvoicesPaymentSettingsPaymentMethodTypes list option) =
            {
                InvoicesPaymentSettings.DefaultMandate = defaultMandate //required
                InvoicesPaymentSettings.PaymentMethodOptions = paymentMethodOptions //required
                InvoicesPaymentSettings.PaymentMethodTypes = paymentMethodTypes //required
            }

    and InvoicesPaymentSettingsPaymentMethodTypes =
        | AchCreditTransfer
        | AchDebit
        | AcssDebit
        | AuBecsDebit
        | BacsDebit
        | Bancontact
        | Boleto
        | Card
        | Cashapp
        | CustomerBalance
        | Fpx
        | Giropay
        | Grabpay
        | Ideal
        | Konbini
        | Link
        | Paynow
        | Paypal
        | Promptpay
        | SepaCreditTransfer
        | SepaDebit
        | Sofort
        | UsBankAccount
        | WechatPay

    and InvoicesResourceInvoiceTaxId = {
        ///The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`
        Type: InvoicesResourceInvoiceTaxIdType
        ///The value of the tax ID.
        Value: string option
    }
    with
        static member New (``type``: InvoicesResourceInvoiceTaxIdType, value: string option) =
            {
                InvoicesResourceInvoiceTaxId.Type = ``type`` //required
                InvoicesResourceInvoiceTaxId.Value = value //required
            }

    and InvoicesResourceInvoiceTaxIdType =
        | AdNrt
        | AeTrn
        | ArCuit
        | AuAbn
        | AuArn
        | BgUic
        | BoTin
        | BrCnpj
        | BrCpf
        | CaBn
        | CaGstHst
        | CaPstBc
        | CaPstMb
        | CaPstSk
        | CaQst
        | ChVat
        | ClTin
        | CnTin
        | CoNit
        | CrTin
        | DoRcn
        | EcRuc
        | EgTin
        | EsCif
        | EuOssVat
        | EuVat
        | GbVat
        | GeVat
        | HkBr
        | HuTin
        | IdNpwp
        | IlVat
        | InGst
        | IsVat
        | JpCn
        | JpRn
        | JpTrn
        | KePin
        | KrBrn
        | LiUid
        | MxRfc
        | MyFrp
        | MyItn
        | MySst
        | NoVat
        | NzGst
        | PeRuc
        | PhTin
        | RoTin
        | RsPib
        | RuInn
        | RuKpp
        | SaVat
        | SgGst
        | SgUen
        | SiTin
        | SvNit
        | ThVat
        | TrTin
        | TwVat
        | UaVat
        | Unknown
        | UsEin
        | UyRuc
        | VeRif
        | VnTin
        | ZaVat

    and InvoicesResourceLineItemsCreditedItems = {
        ///Invoice containing the credited invoice line items
        Invoice: string
        ///Credited invoice line items
        InvoiceLineItems: string list
    }
    with
        static member New (invoice: string, invoiceLineItems: string list) =
            {
                InvoicesResourceLineItemsCreditedItems.Invoice = invoice //required
                InvoicesResourceLineItemsCreditedItems.InvoiceLineItems = invoiceLineItems //required
            }

    and InvoicesResourceLineItemsProrationDetails = {
        ///For a credit proration `line_item`, the original debit line_items to which the credit proration applies.
        CreditedItems: InvoicesResourceLineItemsCreditedItems option
    }
    with
        static member New (creditedItems: InvoicesResourceLineItemsCreditedItems option) =
            {
                InvoicesResourceLineItemsProrationDetails.CreditedItems = creditedItems //required
            }

    and InvoicesShippingCost = {
        ///Total shipping cost before any taxes are applied.
        AmountSubtotal: int
        ///Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
        AmountTax: int
        ///Total shipping cost after taxes are applied.
        AmountTotal: int
        ///The ID of the ShippingRate for this invoice.
        ShippingRate: InvoicesShippingCostShippingRate'AnyOf option
        ///The taxes applied to the shipping rate.
        Taxes: LineItemsTaxAmount list option
    }
    with
        static member New (amountSubtotal: int, amountTax: int, amountTotal: int, shippingRate: InvoicesShippingCostShippingRate'AnyOf option, ?taxes: LineItemsTaxAmount list) =
            {
                InvoicesShippingCost.AmountSubtotal = amountSubtotal //required
                InvoicesShippingCost.AmountTax = amountTax //required
                InvoicesShippingCost.AmountTotal = amountTotal //required
                InvoicesShippingCost.ShippingRate = shippingRate //required
                InvoicesShippingCost.Taxes = taxes
            }

    and InvoicesShippingCostShippingRate'AnyOf =
        | String of string
        | ShippingRate of ShippingRate

    and InvoicesStatusTransitions = {
        ///The time that the invoice draft was finalized.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]FinalizedAt: DateTime option
        ///The time that the invoice was marked uncollectible.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]MarkedUncollectibleAt: DateTime option
        ///The time that the invoice was paid.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PaidAt: DateTime option
        ///The time that the invoice was voided.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]VoidedAt: DateTime option
    }
    with
        static member New (finalizedAt: DateTime option, markedUncollectibleAt: DateTime option, paidAt: DateTime option, voidedAt: DateTime option) =
            {
                InvoicesStatusTransitions.FinalizedAt = finalizedAt //required
                InvoicesStatusTransitions.MarkedUncollectibleAt = markedUncollectibleAt //required
                InvoicesStatusTransitions.PaidAt = paidAt //required
                InvoicesStatusTransitions.VoidedAt = voidedAt //required
            }

    ///When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
    ///object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
    ///purchase to be completed successfully.
    ///Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
    and IssuingAuthorization = {
        ///The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        AmountDetails: IssuingAuthorizationAmountDetails option
        ///Whether the authorization has been approved.
        Approved: bool
        ///How the card details were provided.
        AuthorizationMethod: IssuingAuthorizationAuthorizationMethod
        ///List of balance transactions associated with this authorization.
        BalanceTransactions: BalanceTransaction list
        Card: IssuingCard
        ///The cardholder to whom this authorization belongs.
        Cardholder: IssuingAuthorizationCardholder'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        MerchantAmount: int
        ///The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        MerchantCurrency: string
        MerchantData: IssuingAuthorizationMerchantData
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Details about the authorization, such as identifiers, set by the card network.
        NetworkData: IssuingAuthorizationNetworkData option
        ///The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
        PendingRequest: IssuingAuthorizationPendingRequest option
        ///History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
        RequestHistory: IssuingAuthorizationRequest list
        ///The current status of the authorization in its lifecycle.
        Status: IssuingAuthorizationStatus
        ///List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
        Transactions: IssuingTransaction list
        ///[Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).
        Treasury: IssuingAuthorizationTreasury option
        VerificationData: IssuingAuthorizationVerificationData
        ///The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
        Wallet: IssuingAuthorizationWallet option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "issuing.authorization"

        static member New (amount: int, amountDetails: IssuingAuthorizationAmountDetails option, approved: bool, authorizationMethod: IssuingAuthorizationAuthorizationMethod, balanceTransactions: BalanceTransaction list, card: IssuingCard, cardholder: IssuingAuthorizationCardholder'AnyOf option, created: DateTime, currency: string, id: string, livemode: bool, merchantAmount: int, merchantCurrency: string, merchantData: IssuingAuthorizationMerchantData, metadata: Map<string, string>, networkData: IssuingAuthorizationNetworkData option, pendingRequest: IssuingAuthorizationPendingRequest option, requestHistory: IssuingAuthorizationRequest list, status: IssuingAuthorizationStatus, transactions: IssuingTransaction list, verificationData: IssuingAuthorizationVerificationData, wallet: IssuingAuthorizationWallet option, ?treasury: IssuingAuthorizationTreasury option) =
            {
                IssuingAuthorization.Amount = amount //required
                IssuingAuthorization.AmountDetails = amountDetails //required
                IssuingAuthorization.Approved = approved //required
                IssuingAuthorization.AuthorizationMethod = authorizationMethod //required
                IssuingAuthorization.BalanceTransactions = balanceTransactions //required
                IssuingAuthorization.Card = card //required
                IssuingAuthorization.Cardholder = cardholder //required
                IssuingAuthorization.Created = created //required
                IssuingAuthorization.Currency = currency //required
                IssuingAuthorization.Id = id //required
                IssuingAuthorization.Livemode = livemode //required
                IssuingAuthorization.MerchantAmount = merchantAmount //required
                IssuingAuthorization.MerchantCurrency = merchantCurrency //required
                IssuingAuthorization.MerchantData = merchantData //required
                IssuingAuthorization.Metadata = metadata //required
                IssuingAuthorization.NetworkData = networkData //required
                IssuingAuthorization.PendingRequest = pendingRequest //required
                IssuingAuthorization.RequestHistory = requestHistory //required
                IssuingAuthorization.Status = status //required
                IssuingAuthorization.Transactions = transactions //required
                IssuingAuthorization.VerificationData = verificationData //required
                IssuingAuthorization.Wallet = wallet //required
                IssuingAuthorization.Treasury = treasury |> Option.flatten
            }

    and IssuingAuthorizationAuthorizationMethod =
        | Chip
        | Contactless
        | KeyedIn
        | Online
        | Swipe

    and IssuingAuthorizationCardholder'AnyOf =
        | String of string
        | IssuingCardholder of IssuingCardholder

    and IssuingAuthorizationStatus =
        | Closed
        | Pending
        | Reversed

    and IssuingAuthorizationWallet =
        | ApplePay
        | GooglePay
        | SamsungPay

    ///You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
    and IssuingCard = {
        ///The brand of the card.
        Brand: string
        ///The reason why the card was canceled.
        CancellationReason: IssuingCardCancellationReason option
        Cardholder: IssuingCardholder
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.
        Currency: string
        ///The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
        Cvc: string option
        ///The expiration month of the card.
        ExpMonth: int
        ///The expiration year of the card.
        ExpYear: int
        ///The financial account this card is attached to.
        FinancialAccount: string option
        ///Unique identifier for the object.
        Id: string
        ///The last 4 digits of the card number.
        [<JsonField(Name="last4")>]Last4: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
        Number: string option
        ///The latest card that replaces this card, if any.
        ReplacedBy: IssuingCardReplacedBy'AnyOf option
        ///The card this card replaces, if any.
        ReplacementFor: IssuingCardReplacementFor'AnyOf option
        ///The reason why the previous card needed to be replaced.
        ReplacementReason: IssuingCardReplacementReason option
        ///Where and how the card will be shipped.
        Shipping: IssuingCardShipping option
        SpendingControls: IssuingCardAuthorizationControls
        ///Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
        Status: IssuingCardStatus
        ///The type of the card.
        Type: IssuingCardType
        ///Information relating to digital wallets (like Apple Pay and Google Pay).
        Wallets: IssuingCardWallets option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "issuing.card"

        static member New (brand: string, cancellationReason: IssuingCardCancellationReason option, cardholder: IssuingCardholder, created: DateTime, currency: string, expMonth: int, expYear: int, id: string, last4: string, livemode: bool, metadata: Map<string, string>, replacedBy: IssuingCardReplacedBy'AnyOf option, replacementFor: IssuingCardReplacementFor'AnyOf option, replacementReason: IssuingCardReplacementReason option, shipping: IssuingCardShipping option, spendingControls: IssuingCardAuthorizationControls, status: IssuingCardStatus, ``type``: IssuingCardType, wallets: IssuingCardWallets option, ?cvc: string, ?financialAccount: string option, ?number: string) =
            {
                IssuingCard.Brand = brand //required
                IssuingCard.CancellationReason = cancellationReason //required
                IssuingCard.Cardholder = cardholder //required
                IssuingCard.Created = created //required
                IssuingCard.Currency = currency //required
                IssuingCard.ExpMonth = expMonth //required
                IssuingCard.ExpYear = expYear //required
                IssuingCard.Id = id //required
                IssuingCard.Last4 = last4 //required
                IssuingCard.Livemode = livemode //required
                IssuingCard.Metadata = metadata //required
                IssuingCard.ReplacedBy = replacedBy //required
                IssuingCard.ReplacementFor = replacementFor //required
                IssuingCard.ReplacementReason = replacementReason //required
                IssuingCard.Shipping = shipping //required
                IssuingCard.SpendingControls = spendingControls //required
                IssuingCard.Status = status //required
                IssuingCard.Type = ``type`` //required
                IssuingCard.Wallets = wallets //required
                IssuingCard.Cvc = cvc
                IssuingCard.FinancialAccount = financialAccount |> Option.flatten
                IssuingCard.Number = number
            }

    and IssuingCardCancellationReason =
        | DesignRejected
        | Lost
        | Stolen

    and IssuingCardReplacedBy'AnyOf =
        | String of string
        | IssuingCard of IssuingCard

    and IssuingCardReplacementFor'AnyOf =
        | String of string
        | IssuingCard of IssuingCard

    and IssuingCardReplacementReason =
        | Damaged
        | Expired
        | Lost
        | Stolen

    and IssuingCardStatus =
        | Active
        | Canceled
        | Inactive

    and IssuingCardType =
        | Physical
        | Virtual

    ///An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
    ///Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
    and IssuingCardholder = {
        Billing: IssuingCardholderAddress
        ///Additional information about a `company` cardholder.
        Company: IssuingCardholderCompany option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The cardholder's email address.
        Email: string option
        ///Unique identifier for the object.
        Id: string
        ///Additional information about an `individual` cardholder.
        Individual: IssuingCardholderIndividual option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The cardholder's name. This will be printed on cards issued to them.
        Name: string
        ///The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
        PhoneNumber: string option
        ///The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
        /// This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
        PreferredLocales: IssuingCardholderPreferredLocales list option
        Requirements: IssuingCardholderRequirements
        ///Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
        SpendingControls: IssuingCardholderAuthorizationControls option
        ///Specifies whether to permit authorizations on this cardholder's cards.
        Status: IssuingCardholderStatus
        ///One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
        Type: IssuingCardholderType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "issuing.cardholder"

        static member New (billing: IssuingCardholderAddress, company: IssuingCardholderCompany option, created: DateTime, email: string option, id: string, individual: IssuingCardholderIndividual option, livemode: bool, metadata: Map<string, string>, name: string, phoneNumber: string option, preferredLocales: IssuingCardholderPreferredLocales list option, requirements: IssuingCardholderRequirements, spendingControls: IssuingCardholderAuthorizationControls option, status: IssuingCardholderStatus, ``type``: IssuingCardholderType) =
            {
                IssuingCardholder.Billing = billing //required
                IssuingCardholder.Company = company //required
                IssuingCardholder.Created = created //required
                IssuingCardholder.Email = email //required
                IssuingCardholder.Id = id //required
                IssuingCardholder.Individual = individual //required
                IssuingCardholder.Livemode = livemode //required
                IssuingCardholder.Metadata = metadata //required
                IssuingCardholder.Name = name //required
                IssuingCardholder.PhoneNumber = phoneNumber //required
                IssuingCardholder.PreferredLocales = preferredLocales //required
                IssuingCardholder.Requirements = requirements //required
                IssuingCardholder.SpendingControls = spendingControls //required
                IssuingCardholder.Status = status //required
                IssuingCardholder.Type = ``type`` //required
            }

    and IssuingCardholderStatus =
        | Active
        | Blocked
        | Inactive

    and IssuingCardholderType =
        | Company
        | Individual

    and IssuingCardholderPreferredLocales =
        | De
        | En
        | Es
        | Fr
        | It

    ///As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
    ///Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
    and IssuingDispute = {
        ///Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
        Amount: int
        ///List of balance transactions associated with the dispute.
        BalanceTransactions: BalanceTransaction list option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The currency the `transaction` was made in.
        Currency: string
        Evidence: IssuingDisputeEvidence
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Current status of the dispute.
        Status: IssuingDisputeStatus
        ///The transaction being disputed.
        Transaction: IssuingDisputeTransaction'AnyOf
        ///[Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
        Treasury: IssuingDisputeTreasury option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "issuing.dispute"

        static member New (amount: int, balanceTransactions: BalanceTransaction list option, created: DateTime, currency: string, evidence: IssuingDisputeEvidence, id: string, livemode: bool, metadata: Map<string, string>, status: IssuingDisputeStatus, transaction: IssuingDisputeTransaction'AnyOf, ?treasury: IssuingDisputeTreasury option) =
            {
                IssuingDispute.Amount = amount //required
                IssuingDispute.BalanceTransactions = balanceTransactions //required
                IssuingDispute.Created = created //required
                IssuingDispute.Currency = currency //required
                IssuingDispute.Evidence = evidence //required
                IssuingDispute.Id = id //required
                IssuingDispute.Livemode = livemode //required
                IssuingDispute.Metadata = metadata //required
                IssuingDispute.Status = status //required
                IssuingDispute.Transaction = transaction //required
                IssuingDispute.Treasury = treasury |> Option.flatten
            }

    and IssuingDisputeStatus =
        | Expired
        | Lost
        | Submitted
        | Unsubmitted
        | Won

    and IssuingDisputeTransaction'AnyOf =
        | String of string
        | IssuingTransaction of IssuingTransaction

    ///Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
    ///your Stripe account, such as a completed purchase or refund, is represented by an Issuing
    ///`Transaction` object.
    ///Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
    and IssuingTransaction = {
        ///The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        AmountDetails: IssuingTransactionAmountDetails option
        ///The `Authorization` object that led to this transaction.
        Authorization: IssuingTransactionAuthorization'AnyOf option
        ///ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
        BalanceTransaction: IssuingTransactionBalanceTransaction'AnyOf option
        ///The card used to make this transaction.
        Card: IssuingTransactionCard'AnyOf
        ///The cardholder to whom this transaction belongs.
        Cardholder: IssuingTransactionCardholder'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///If you've disputed the transaction, the ID of the dispute.
        Dispute: IssuingTransactionDispute'AnyOf option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
        MerchantAmount: int
        ///The currency with which the merchant is taking payment.
        MerchantCurrency: string
        MerchantData: IssuingAuthorizationMerchantData
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Additional purchase information that is optionally provided by the merchant.
        PurchaseDetails: IssuingTransactionPurchaseDetails option
        ///[Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
        Treasury: IssuingTransactionTreasury option
        ///The nature of the transaction.
        Type: IssuingTransactionType
        ///The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
        Wallet: IssuingTransactionWallet option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "issuing.transaction"

        static member New (amount: int, amountDetails: IssuingTransactionAmountDetails option, authorization: IssuingTransactionAuthorization'AnyOf option, balanceTransaction: IssuingTransactionBalanceTransaction'AnyOf option, card: IssuingTransactionCard'AnyOf, cardholder: IssuingTransactionCardholder'AnyOf option, created: DateTime, currency: string, dispute: IssuingTransactionDispute'AnyOf option, id: string, livemode: bool, merchantAmount: int, merchantCurrency: string, merchantData: IssuingAuthorizationMerchantData, metadata: Map<string, string>, purchaseDetails: IssuingTransactionPurchaseDetails option, ``type``: IssuingTransactionType, wallet: IssuingTransactionWallet option, ?treasury: IssuingTransactionTreasury option) =
            {
                IssuingTransaction.Amount = amount //required
                IssuingTransaction.AmountDetails = amountDetails //required
                IssuingTransaction.Authorization = authorization //required
                IssuingTransaction.BalanceTransaction = balanceTransaction //required
                IssuingTransaction.Card = card //required
                IssuingTransaction.Cardholder = cardholder //required
                IssuingTransaction.Created = created //required
                IssuingTransaction.Currency = currency //required
                IssuingTransaction.Dispute = dispute //required
                IssuingTransaction.Id = id //required
                IssuingTransaction.Livemode = livemode //required
                IssuingTransaction.MerchantAmount = merchantAmount //required
                IssuingTransaction.MerchantCurrency = merchantCurrency //required
                IssuingTransaction.MerchantData = merchantData //required
                IssuingTransaction.Metadata = metadata //required
                IssuingTransaction.PurchaseDetails = purchaseDetails //required
                IssuingTransaction.Type = ``type`` //required
                IssuingTransaction.Wallet = wallet //required
                IssuingTransaction.Treasury = treasury |> Option.flatten
            }

    and IssuingTransactionAuthorization'AnyOf =
        | String of string
        | IssuingAuthorization of IssuingAuthorization

    and IssuingTransactionBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and IssuingTransactionCard'AnyOf =
        | String of string
        | IssuingCard of IssuingCard

    and IssuingTransactionCardholder'AnyOf =
        | String of string
        | IssuingCardholder of IssuingCardholder

    and IssuingTransactionDispute'AnyOf =
        | String of string
        | IssuingDispute of IssuingDispute

    and IssuingTransactionType =
        | Capture
        | Refund

    and IssuingTransactionWallet =
        | ApplePay
        | GooglePay
        | SamsungPay

    and IssuingAuthorizationAmountDetails = {
        ///The fee charged by the ATM for the cash withdrawal.
        AtmFee: int option
    }
    with
        static member New (atmFee: int option) =
            {
                IssuingAuthorizationAmountDetails.AtmFee = atmFee //required
            }

    and IssuingAuthorizationMerchantData = {
        ///A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
        Category: string
        ///The merchant category code for the seller’s business
        CategoryCode: string
        ///City where the seller is located
        City: string option
        ///Country where the seller is located
        Country: string option
        ///Name of the seller
        Name: string option
        ///Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant.
        NetworkId: string
        ///Postal code where the seller is located
        PostalCode: string option
        ///State where the seller is located
        State: string option
        ///An ID assigned by the seller to the location of the sale.
        TerminalId: string option
    }
    with
        static member New (category: string, categoryCode: string, city: string option, country: string option, name: string option, networkId: string, postalCode: string option, state: string option, terminalId: string option) =
            {
                IssuingAuthorizationMerchantData.Category = category //required
                IssuingAuthorizationMerchantData.CategoryCode = categoryCode //required
                IssuingAuthorizationMerchantData.City = city //required
                IssuingAuthorizationMerchantData.Country = country //required
                IssuingAuthorizationMerchantData.Name = name //required
                IssuingAuthorizationMerchantData.NetworkId = networkId //required
                IssuingAuthorizationMerchantData.PostalCode = postalCode //required
                IssuingAuthorizationMerchantData.State = state //required
                IssuingAuthorizationMerchantData.TerminalId = terminalId //required
            }

    and IssuingAuthorizationNetworkData = {
        ///Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`.
        AcquiringInstitutionId: string option
    }
    with
        static member New (acquiringInstitutionId: string option) =
            {
                IssuingAuthorizationNetworkData.AcquiringInstitutionId = acquiringInstitutionId //required
            }

    and IssuingAuthorizationPendingRequest = {
        ///The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        AmountDetails: IssuingAuthorizationAmountDetails option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
        IsAmountControllable: bool
        ///The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        MerchantAmount: int
        ///The local currency the merchant is requesting to authorize.
        MerchantCurrency: string
    }
    with
        static member New (amount: int, amountDetails: IssuingAuthorizationAmountDetails option, currency: string, isAmountControllable: bool, merchantAmount: int, merchantCurrency: string) =
            {
                IssuingAuthorizationPendingRequest.Amount = amount //required
                IssuingAuthorizationPendingRequest.AmountDetails = amountDetails //required
                IssuingAuthorizationPendingRequest.Currency = currency //required
                IssuingAuthorizationPendingRequest.IsAmountControllable = isAmountControllable //required
                IssuingAuthorizationPendingRequest.MerchantAmount = merchantAmount //required
                IssuingAuthorizationPendingRequest.MerchantCurrency = merchantCurrency //required
            }

    and IssuingAuthorizationRequest = {
        ///The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
        Amount: int
        ///Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        AmountDetails: IssuingAuthorizationAmountDetails option
        ///Whether this request was approved.
        Approved: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        MerchantAmount: int
        ///The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        MerchantCurrency: string
        ///When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.
        Reason: IssuingAuthorizationRequestReason
        ///If approve/decline decision is directly responsed to the webhook with json payload and if the response is invalid (e.g., parsing errors), we surface the detailed message via this field.
        ReasonMessage: string option
    }
    with
        static member New (amount: int, amountDetails: IssuingAuthorizationAmountDetails option, approved: bool, created: DateTime, currency: string, merchantAmount: int, merchantCurrency: string, reason: IssuingAuthorizationRequestReason, reasonMessage: string option) =
            {
                IssuingAuthorizationRequest.Amount = amount //required
                IssuingAuthorizationRequest.AmountDetails = amountDetails //required
                IssuingAuthorizationRequest.Approved = approved //required
                IssuingAuthorizationRequest.Created = created //required
                IssuingAuthorizationRequest.Currency = currency //required
                IssuingAuthorizationRequest.MerchantAmount = merchantAmount //required
                IssuingAuthorizationRequest.MerchantCurrency = merchantCurrency //required
                IssuingAuthorizationRequest.Reason = reason //required
                IssuingAuthorizationRequest.ReasonMessage = reasonMessage //required
            }

    and IssuingAuthorizationRequestReason =
        | AccountDisabled
        | CardActive
        | CardInactive
        | CardholderInactive
        | CardholderVerificationRequired
        | InsufficientFunds
        | NotAllowed
        | SpendingControls
        | SuspectedFraud
        | VerificationFailed
        | WebhookApproved
        | WebhookDeclined
        | WebhookError
        | WebhookTimeout

    and IssuingAuthorizationTreasury = {
        ///The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization
        ReceivedCredits: string list
        ///The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization
        ReceivedDebits: string list
        ///The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization
        Transaction: string option
    }
    with
        static member New (receivedCredits: string list, receivedDebits: string list, transaction: string option) =
            {
                IssuingAuthorizationTreasury.ReceivedCredits = receivedCredits //required
                IssuingAuthorizationTreasury.ReceivedDebits = receivedDebits //required
                IssuingAuthorizationTreasury.Transaction = transaction //required
            }

    and IssuingAuthorizationVerificationData = {
        ///Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
        [<JsonField(Name="address_line1_check")>]AddressLine1Check: IssuingAuthorizationVerificationDataAddressLine1Check
        ///Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
        AddressPostalCodeCheck: IssuingAuthorizationVerificationDataAddressPostalCodeCheck
        ///Whether the cardholder provided a CVC and if it matched Stripe’s record.
        CvcCheck: IssuingAuthorizationVerificationDataCvcCheck
        ///Whether the cardholder provided an expiry date and if it matched Stripe’s record.
        ExpiryCheck: IssuingAuthorizationVerificationDataExpiryCheck
    }
    with
        static member New (addressLine1Check: IssuingAuthorizationVerificationDataAddressLine1Check, addressPostalCodeCheck: IssuingAuthorizationVerificationDataAddressPostalCodeCheck, cvcCheck: IssuingAuthorizationVerificationDataCvcCheck, expiryCheck: IssuingAuthorizationVerificationDataExpiryCheck) =
            {
                IssuingAuthorizationVerificationData.AddressLine1Check = addressLine1Check //required
                IssuingAuthorizationVerificationData.AddressPostalCodeCheck = addressPostalCodeCheck //required
                IssuingAuthorizationVerificationData.CvcCheck = cvcCheck //required
                IssuingAuthorizationVerificationData.ExpiryCheck = expiryCheck //required
            }

    and IssuingAuthorizationVerificationDataAddressLine1Check =
        | Match
        | Mismatch
        | NotProvided

    and IssuingAuthorizationVerificationDataAddressPostalCodeCheck =
        | Match
        | Mismatch
        | NotProvided

    and IssuingAuthorizationVerificationDataCvcCheck =
        | Match
        | Mismatch
        | NotProvided

    and IssuingAuthorizationVerificationDataExpiryCheck =
        | Match
        | Mismatch
        | NotProvided

    and IssuingCardApplePay = {
        ///Apple Pay Eligibility
        Eligible: bool
        ///Reason the card is ineligible for Apple Pay
        IneligibleReason: IssuingCardApplePayIneligibleReason option
    }
    with
        static member New (eligible: bool, ineligibleReason: IssuingCardApplePayIneligibleReason option) =
            {
                IssuingCardApplePay.Eligible = eligible //required
                IssuingCardApplePay.IneligibleReason = ineligibleReason //required
            }

    and IssuingCardApplePayIneligibleReason =
        | MissingAgreement
        | MissingCardholderContact
        | UnsupportedRegion

    and IssuingCardAuthorizationControls = {
        ///Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
        AllowedCategories: IssuingCardAuthorizationControlsAllowedCategories list option
        ///Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
        BlockedCategories: IssuingCardAuthorizationControlsBlockedCategories list option
        ///Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
        SpendingLimits: IssuingCardSpendingLimit list option
        ///Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
        SpendingLimitsCurrency: string option
    }
    with
        static member New (allowedCategories: IssuingCardAuthorizationControlsAllowedCategories list option, blockedCategories: IssuingCardAuthorizationControlsBlockedCategories list option, spendingLimits: IssuingCardSpendingLimit list option, spendingLimitsCurrency: string option) =
            {
                IssuingCardAuthorizationControls.AllowedCategories = allowedCategories //required
                IssuingCardAuthorizationControls.BlockedCategories = blockedCategories //required
                IssuingCardAuthorizationControls.SpendingLimits = spendingLimits //required
                IssuingCardAuthorizationControls.SpendingLimitsCurrency = spendingLimitsCurrency //required
            }

    and IssuingCardAuthorizationControlsAllowedCategories =
        | AcRefrigerationRepair
        | AccountingBookkeepingServices
        | AdvertisingServices
        | AgriculturalCooperative
        | AirlinesAirCarriers
        | AirportsFlyingFields
        | AmbulanceServices
        | AmusementParksCarnivals
        | AntiqueReproductions
        | AntiqueShops
        | Aquariums
        | ArchitecturalSurveyingServices
        | ArtDealersAndGalleries
        | ArtistsSupplyAndCraftShops
        | AutoAndHomeSupplyStores
        | AutoBodyRepairShops
        | AutoPaintShops
        | AutoServiceShops
        | AutomatedCashDisburse
        | AutomatedFuelDispensers
        | AutomobileAssociations
        | AutomotivePartsAndAccessoriesStores
        | AutomotiveTireStores
        | BailAndBondPayments
        | Bakeries
        | BandsOrchestras
        | BarberAndBeautyShops
        | BettingCasinoGambling
        | BicycleShops
        | BilliardPoolEstablishments
        | BoatDealers
        | BoatRentalsAndLeases
        | BookStores
        | BooksPeriodicalsAndNewspapers
        | BowlingAlleys
        | BusLines
        | BusinessSecretarialSchools
        | BuyingShoppingServices
        | CableSatelliteAndOtherPayTelevisionAndRadio
        | CameraAndPhotographicSupplyStores
        | CandyNutAndConfectioneryStores
        | CarAndTruckDealersNewUsed
        | CarAndTruckDealersUsedOnly
        | CarRentalAgencies
        | CarWashes
        | CarpentryServices
        | CarpetUpholsteryCleaning
        | Caterers
        | CharitableAndSocialServiceOrganizationsFundraising
        | ChemicalsAndAlliedProducts
        | ChildCareServices
        | ChildrensAndInfantsWearStores
        | ChiropodistsPodiatrists
        | Chiropractors
        | CigarStoresAndStands
        | CivicSocialFraternalAssociations
        | CleaningAndMaintenance
        | ClothingRental
        | CollegesUniversities
        | CommercialEquipment
        | CommercialFootwear
        | CommercialPhotographyArtAndGraphics
        | CommuterTransportAndFerries
        | ComputerNetworkServices
        | ComputerProgramming
        | ComputerRepair
        | ComputerSoftwareStores
        | ComputersPeripheralsAndSoftware
        | ConcreteWorkServices
        | ConstructionMaterials
        | ConsultingPublicRelations
        | CorrespondenceSchools
        | CosmeticStores
        | CounselingServices
        | CountryClubs
        | CourierServices
        | CourtCosts
        | CreditReportingAgencies
        | CruiseLines
        | DairyProductsStores
        | DanceHallStudiosSchools
        | DatingEscortServices
        | DentistsOrthodontists
        | DepartmentStores
        | DetectiveAgencies
        | DigitalGoodsApplications
        | DigitalGoodsGames
        | DigitalGoodsLargeVolume
        | DigitalGoodsMedia
        | DirectMarketingCatalogMerchant
        | DirectMarketingCombinationCatalogAndRetailMerchant
        | DirectMarketingInboundTelemarketing
        | DirectMarketingInsuranceServices
        | DirectMarketingOther
        | DirectMarketingOutboundTelemarketing
        | DirectMarketingSubscription
        | DirectMarketingTravel
        | DiscountStores
        | Doctors
        | DoorToDoorSales
        | DraperyWindowCoveringAndUpholsteryStores
        | DrinkingPlaces
        | DrugStoresAndPharmacies
        | DrugsDrugProprietariesAndDruggistSundries
        | DryCleaners
        | DurableGoods
        | DutyFreeStores
        | EatingPlacesRestaurants
        | EducationalServices
        | ElectricRazorStores
        | ElectricVehicleCharging
        | ElectricalPartsAndEquipment
        | ElectricalServices
        | ElectronicsRepairShops
        | ElectronicsStores
        | ElementarySecondarySchools
        | EmergencyServicesGcasVisaUseOnly
        | EmploymentTempAgencies
        | EquipmentRental
        | ExterminatingServices
        | FamilyClothingStores
        | FastFoodRestaurants
        | FinancialInstitutions
        | FinesGovernmentAdministrativeEntities
        | FireplaceFireplaceScreensAndAccessoriesStores
        | FloorCoveringStores
        | Florists
        | FloristsSuppliesNurseryStockAndFlowers
        | FreezerAndLockerMeatProvisioners
        | FuelDealersNonAutomotive
        | FuneralServicesCrematories
        | FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
        | FurnitureRepairRefinishing
        | FurriersAndFurShops
        | GeneralServices
        | GiftCardNoveltyAndSouvenirShops
        | GlassPaintAndWallpaperStores
        | GlasswareCrystalStores
        | GolfCoursesPublic
        | GovernmentLicensedHorseDogRacingUsRegionOnly
        | GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly
        | GovernmentOwnedLotteriesNonUsRegion
        | GovernmentOwnedLotteriesUsRegionOnly
        | GovernmentServices
        | GroceryStoresSupermarkets
        | HardwareEquipmentAndSupplies
        | HardwareStores
        | HealthAndBeautySpas
        | HearingAidsSalesAndSupplies
        | HeatingPlumbingAC
        | HobbyToyAndGameShops
        | HomeSupplyWarehouseStores
        | Hospitals
        | HotelsMotelsAndResorts
        | HouseholdApplianceStores
        | IndustrialSupplies
        | InformationRetrievalServices
        | InsuranceDefault
        | InsuranceUnderwritingPremiums
        | IntraCompanyPurchases
        | JewelryStoresWatchesClocksAndSilverwareStores
        | LandscapingServices
        | Laundries
        | LaundryCleaningServices
        | LegalServicesAttorneys
        | LuggageAndLeatherGoodsStores
        | LumberBuildingMaterialsStores
        | ManualCashDisburse
        | MarinasServiceAndSupplies
        | Marketplaces
        | MasonryStoneworkAndPlaster
        | MassageParlors
        | MedicalAndDentalLabs
        | MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
        | MedicalServices
        | MembershipOrganizations
        | MensAndBoysClothingAndAccessoriesStores
        | MensWomensClothingStores
        | MetalServiceCenters
        | Miscellaneous
        | MiscellaneousApparelAndAccessoryShops
        | MiscellaneousAutoDealers
        | MiscellaneousBusinessServices
        | MiscellaneousFoodStores
        | MiscellaneousGeneralMerchandise
        | MiscellaneousGeneralServices
        | MiscellaneousHomeFurnishingSpecialtyStores
        | MiscellaneousPublishingAndPrinting
        | MiscellaneousRecreationServices
        | MiscellaneousRepairShops
        | MiscellaneousSpecialtyRetail
        | MobileHomeDealers
        | MotionPictureTheaters
        | MotorFreightCarriersAndTrucking
        | MotorHomesDealers
        | MotorVehicleSuppliesAndNewParts
        | MotorcycleShopsAndDealers
        | MotorcycleShopsDealers
        | MusicStoresMusicalInstrumentsPianosAndSheetMusic
        | NewsDealersAndNewsstands
        | NonFiMoneyOrders
        | NonFiStoredValueCardPurchaseLoad
        | NondurableGoods
        | NurseriesLawnAndGardenSupplyStores
        | NursingPersonalCare
        | OfficeAndCommercialFurniture
        | OpticiansEyeglasses
        | OptometristsOphthalmologist
        | OrthopedicGoodsProstheticDevices
        | Osteopaths
        | PackageStoresBeerWineAndLiquor
        | PaintsVarnishesAndSupplies
        | ParkingLotsGarages
        | PassengerRailways
        | PawnShops
        | PetShopsPetFoodAndSupplies
        | PetroleumAndPetroleumProducts
        | PhotoDeveloping
        | PhotographicPhotocopyMicrofilmEquipmentAndSupplies
        | PhotographicStudios
        | PictureVideoProduction
        | PieceGoodsNotionsAndOtherDryGoods
        | PlumbingHeatingEquipmentAndSupplies
        | PoliticalOrganizations
        | PostalServicesGovernmentOnly
        | PreciousStonesAndMetalsWatchesAndJewelry
        | ProfessionalServices
        | PublicWarehousingAndStorage
        | QuickCopyReproAndBlueprint
        | Railroads
        | RealEstateAgentsAndManagersRentals
        | RecordStores
        | RecreationalVehicleRentals
        | ReligiousGoodsStores
        | ReligiousOrganizations
        | RoofingSidingSheetMetal
        | SecretarialSupportServices
        | SecurityBrokersDealers
        | ServiceStations
        | SewingNeedleworkFabricAndPieceGoodsStores
        | ShoeRepairHatCleaning
        | ShoeStores
        | SmallApplianceRepair
        | SnowmobileDealers
        | SpecialTradeServices
        | SpecialtyCleaning
        | SportingGoodsStores
        | SportingRecreationCamps
        | SportsAndRidingApparelStores
        | SportsClubsFields
        | StampAndCoinStores
        | StationaryOfficeSuppliesPrintingAndWritingPaper
        | StationeryStoresOfficeAndSchoolSupplyStores
        | SwimmingPoolsSales
        | TUiTravelGermany
        | TailorsAlterations
        | TaxPaymentsGovernmentAgencies
        | TaxPreparationServices
        | TaxicabsLimousines
        | TelecommunicationEquipmentAndTelephoneSales
        | TelecommunicationServices
        | TelegraphServices
        | TentAndAwningShops
        | TestingLaboratories
        | TheatricalTicketAgencies
        | Timeshares
        | TireRetreadingAndRepair
        | TollsBridgeFees
        | TouristAttractionsAndExhibits
        | TowingServices
        | TrailerParksCampgrounds
        | TransportationServices
        | TravelAgenciesTourOperators
        | TruckStopIteration
        | TruckUtilityTrailerRentals
        | TypesettingPlateMakingAndRelatedServices
        | TypewriterStores
        | USFederalGovernmentAgenciesOrDepartments
        | UniformsCommercialClothing
        | UsedMerchandiseAndSecondhandStores
        | Utilities
        | VarietyStores
        | VeterinaryServices
        | VideoAmusementGameSupplies
        | VideoGameArcades
        | VideoTapeRentalStores
        | VocationalTradeSchools
        | WatchJewelryRepair
        | WeldingRepair
        | WholesaleClubs
        | WigAndToupeeStores
        | WiresMoneyOrders
        | WomensAccessoryAndSpecialtyShops
        | WomensReadyToWearStores
        | WreckingAndSalvageYards

    and IssuingCardAuthorizationControlsBlockedCategories =
        | AcRefrigerationRepair
        | AccountingBookkeepingServices
        | AdvertisingServices
        | AgriculturalCooperative
        | AirlinesAirCarriers
        | AirportsFlyingFields
        | AmbulanceServices
        | AmusementParksCarnivals
        | AntiqueReproductions
        | AntiqueShops
        | Aquariums
        | ArchitecturalSurveyingServices
        | ArtDealersAndGalleries
        | ArtistsSupplyAndCraftShops
        | AutoAndHomeSupplyStores
        | AutoBodyRepairShops
        | AutoPaintShops
        | AutoServiceShops
        | AutomatedCashDisburse
        | AutomatedFuelDispensers
        | AutomobileAssociations
        | AutomotivePartsAndAccessoriesStores
        | AutomotiveTireStores
        | BailAndBondPayments
        | Bakeries
        | BandsOrchestras
        | BarberAndBeautyShops
        | BettingCasinoGambling
        | BicycleShops
        | BilliardPoolEstablishments
        | BoatDealers
        | BoatRentalsAndLeases
        | BookStores
        | BooksPeriodicalsAndNewspapers
        | BowlingAlleys
        | BusLines
        | BusinessSecretarialSchools
        | BuyingShoppingServices
        | CableSatelliteAndOtherPayTelevisionAndRadio
        | CameraAndPhotographicSupplyStores
        | CandyNutAndConfectioneryStores
        | CarAndTruckDealersNewUsed
        | CarAndTruckDealersUsedOnly
        | CarRentalAgencies
        | CarWashes
        | CarpentryServices
        | CarpetUpholsteryCleaning
        | Caterers
        | CharitableAndSocialServiceOrganizationsFundraising
        | ChemicalsAndAlliedProducts
        | ChildCareServices
        | ChildrensAndInfantsWearStores
        | ChiropodistsPodiatrists
        | Chiropractors
        | CigarStoresAndStands
        | CivicSocialFraternalAssociations
        | CleaningAndMaintenance
        | ClothingRental
        | CollegesUniversities
        | CommercialEquipment
        | CommercialFootwear
        | CommercialPhotographyArtAndGraphics
        | CommuterTransportAndFerries
        | ComputerNetworkServices
        | ComputerProgramming
        | ComputerRepair
        | ComputerSoftwareStores
        | ComputersPeripheralsAndSoftware
        | ConcreteWorkServices
        | ConstructionMaterials
        | ConsultingPublicRelations
        | CorrespondenceSchools
        | CosmeticStores
        | CounselingServices
        | CountryClubs
        | CourierServices
        | CourtCosts
        | CreditReportingAgencies
        | CruiseLines
        | DairyProductsStores
        | DanceHallStudiosSchools
        | DatingEscortServices
        | DentistsOrthodontists
        | DepartmentStores
        | DetectiveAgencies
        | DigitalGoodsApplications
        | DigitalGoodsGames
        | DigitalGoodsLargeVolume
        | DigitalGoodsMedia
        | DirectMarketingCatalogMerchant
        | DirectMarketingCombinationCatalogAndRetailMerchant
        | DirectMarketingInboundTelemarketing
        | DirectMarketingInsuranceServices
        | DirectMarketingOther
        | DirectMarketingOutboundTelemarketing
        | DirectMarketingSubscription
        | DirectMarketingTravel
        | DiscountStores
        | Doctors
        | DoorToDoorSales
        | DraperyWindowCoveringAndUpholsteryStores
        | DrinkingPlaces
        | DrugStoresAndPharmacies
        | DrugsDrugProprietariesAndDruggistSundries
        | DryCleaners
        | DurableGoods
        | DutyFreeStores
        | EatingPlacesRestaurants
        | EducationalServices
        | ElectricRazorStores
        | ElectricVehicleCharging
        | ElectricalPartsAndEquipment
        | ElectricalServices
        | ElectronicsRepairShops
        | ElectronicsStores
        | ElementarySecondarySchools
        | EmergencyServicesGcasVisaUseOnly
        | EmploymentTempAgencies
        | EquipmentRental
        | ExterminatingServices
        | FamilyClothingStores
        | FastFoodRestaurants
        | FinancialInstitutions
        | FinesGovernmentAdministrativeEntities
        | FireplaceFireplaceScreensAndAccessoriesStores
        | FloorCoveringStores
        | Florists
        | FloristsSuppliesNurseryStockAndFlowers
        | FreezerAndLockerMeatProvisioners
        | FuelDealersNonAutomotive
        | FuneralServicesCrematories
        | FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
        | FurnitureRepairRefinishing
        | FurriersAndFurShops
        | GeneralServices
        | GiftCardNoveltyAndSouvenirShops
        | GlassPaintAndWallpaperStores
        | GlasswareCrystalStores
        | GolfCoursesPublic
        | GovernmentLicensedHorseDogRacingUsRegionOnly
        | GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly
        | GovernmentOwnedLotteriesNonUsRegion
        | GovernmentOwnedLotteriesUsRegionOnly
        | GovernmentServices
        | GroceryStoresSupermarkets
        | HardwareEquipmentAndSupplies
        | HardwareStores
        | HealthAndBeautySpas
        | HearingAidsSalesAndSupplies
        | HeatingPlumbingAC
        | HobbyToyAndGameShops
        | HomeSupplyWarehouseStores
        | Hospitals
        | HotelsMotelsAndResorts
        | HouseholdApplianceStores
        | IndustrialSupplies
        | InformationRetrievalServices
        | InsuranceDefault
        | InsuranceUnderwritingPremiums
        | IntraCompanyPurchases
        | JewelryStoresWatchesClocksAndSilverwareStores
        | LandscapingServices
        | Laundries
        | LaundryCleaningServices
        | LegalServicesAttorneys
        | LuggageAndLeatherGoodsStores
        | LumberBuildingMaterialsStores
        | ManualCashDisburse
        | MarinasServiceAndSupplies
        | Marketplaces
        | MasonryStoneworkAndPlaster
        | MassageParlors
        | MedicalAndDentalLabs
        | MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
        | MedicalServices
        | MembershipOrganizations
        | MensAndBoysClothingAndAccessoriesStores
        | MensWomensClothingStores
        | MetalServiceCenters
        | Miscellaneous
        | MiscellaneousApparelAndAccessoryShops
        | MiscellaneousAutoDealers
        | MiscellaneousBusinessServices
        | MiscellaneousFoodStores
        | MiscellaneousGeneralMerchandise
        | MiscellaneousGeneralServices
        | MiscellaneousHomeFurnishingSpecialtyStores
        | MiscellaneousPublishingAndPrinting
        | MiscellaneousRecreationServices
        | MiscellaneousRepairShops
        | MiscellaneousSpecialtyRetail
        | MobileHomeDealers
        | MotionPictureTheaters
        | MotorFreightCarriersAndTrucking
        | MotorHomesDealers
        | MotorVehicleSuppliesAndNewParts
        | MotorcycleShopsAndDealers
        | MotorcycleShopsDealers
        | MusicStoresMusicalInstrumentsPianosAndSheetMusic
        | NewsDealersAndNewsstands
        | NonFiMoneyOrders
        | NonFiStoredValueCardPurchaseLoad
        | NondurableGoods
        | NurseriesLawnAndGardenSupplyStores
        | NursingPersonalCare
        | OfficeAndCommercialFurniture
        | OpticiansEyeglasses
        | OptometristsOphthalmologist
        | OrthopedicGoodsProstheticDevices
        | Osteopaths
        | PackageStoresBeerWineAndLiquor
        | PaintsVarnishesAndSupplies
        | ParkingLotsGarages
        | PassengerRailways
        | PawnShops
        | PetShopsPetFoodAndSupplies
        | PetroleumAndPetroleumProducts
        | PhotoDeveloping
        | PhotographicPhotocopyMicrofilmEquipmentAndSupplies
        | PhotographicStudios
        | PictureVideoProduction
        | PieceGoodsNotionsAndOtherDryGoods
        | PlumbingHeatingEquipmentAndSupplies
        | PoliticalOrganizations
        | PostalServicesGovernmentOnly
        | PreciousStonesAndMetalsWatchesAndJewelry
        | ProfessionalServices
        | PublicWarehousingAndStorage
        | QuickCopyReproAndBlueprint
        | Railroads
        | RealEstateAgentsAndManagersRentals
        | RecordStores
        | RecreationalVehicleRentals
        | ReligiousGoodsStores
        | ReligiousOrganizations
        | RoofingSidingSheetMetal
        | SecretarialSupportServices
        | SecurityBrokersDealers
        | ServiceStations
        | SewingNeedleworkFabricAndPieceGoodsStores
        | ShoeRepairHatCleaning
        | ShoeStores
        | SmallApplianceRepair
        | SnowmobileDealers
        | SpecialTradeServices
        | SpecialtyCleaning
        | SportingGoodsStores
        | SportingRecreationCamps
        | SportsAndRidingApparelStores
        | SportsClubsFields
        | StampAndCoinStores
        | StationaryOfficeSuppliesPrintingAndWritingPaper
        | StationeryStoresOfficeAndSchoolSupplyStores
        | SwimmingPoolsSales
        | TUiTravelGermany
        | TailorsAlterations
        | TaxPaymentsGovernmentAgencies
        | TaxPreparationServices
        | TaxicabsLimousines
        | TelecommunicationEquipmentAndTelephoneSales
        | TelecommunicationServices
        | TelegraphServices
        | TentAndAwningShops
        | TestingLaboratories
        | TheatricalTicketAgencies
        | Timeshares
        | TireRetreadingAndRepair
        | TollsBridgeFees
        | TouristAttractionsAndExhibits
        | TowingServices
        | TrailerParksCampgrounds
        | TransportationServices
        | TravelAgenciesTourOperators
        | TruckStopIteration
        | TruckUtilityTrailerRentals
        | TypesettingPlateMakingAndRelatedServices
        | TypewriterStores
        | USFederalGovernmentAgenciesOrDepartments
        | UniformsCommercialClothing
        | UsedMerchandiseAndSecondhandStores
        | Utilities
        | VarietyStores
        | VeterinaryServices
        | VideoAmusementGameSupplies
        | VideoGameArcades
        | VideoTapeRentalStores
        | VocationalTradeSchools
        | WatchJewelryRepair
        | WeldingRepair
        | WholesaleClubs
        | WigAndToupeeStores
        | WiresMoneyOrders
        | WomensAccessoryAndSpecialtyShops
        | WomensReadyToWearStores
        | WreckingAndSalvageYards

    and IssuingCardGooglePay = {
        ///Google Pay Eligibility
        Eligible: bool
        ///Reason the card is ineligible for Google Pay
        IneligibleReason: IssuingCardGooglePayIneligibleReason option
    }
    with
        static member New (eligible: bool, ineligibleReason: IssuingCardGooglePayIneligibleReason option) =
            {
                IssuingCardGooglePay.Eligible = eligible //required
                IssuingCardGooglePay.IneligibleReason = ineligibleReason //required
            }

    and IssuingCardGooglePayIneligibleReason =
        | MissingAgreement
        | MissingCardholderContact
        | UnsupportedRegion

    and IssuingCardShipping = {
        Address: Address
        ///The delivery company that shipped a card.
        Carrier: IssuingCardShippingCarrier option
        ///Additional information that may be required for clearing customs.
        Customs: IssuingCardShippingCustoms option
        ///A unix timestamp representing a best estimate of when the card will be delivered.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Eta: DateTime option
        ///Recipient name.
        Name: string
        ///The phone number of the receiver of the bulk shipment. This phone number will be provided to the shipping company, who might use it to contact the receiver in case of delivery issues.
        PhoneNumber: string option
        ///Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true.
        RequireSignature: bool option
        ///Shipment service, such as `standard` or `express`.
        Service: IssuingCardShippingService
        ///The delivery status of the card.
        Status: IssuingCardShippingStatus option
        ///A tracking number for a card shipment.
        TrackingNumber: string option
        ///A link to the shipping carrier's site where you can view detailed information about a card shipment.
        TrackingUrl: string option
        ///Packaging options.
        Type: IssuingCardShippingType
    }
    with
        static member New (address: Address, carrier: IssuingCardShippingCarrier option, customs: IssuingCardShippingCustoms option, eta: DateTime option, name: string, phoneNumber: string option, requireSignature: bool option, service: IssuingCardShippingService, status: IssuingCardShippingStatus option, trackingNumber: string option, trackingUrl: string option, ``type``: IssuingCardShippingType) =
            {
                IssuingCardShipping.Address = address //required
                IssuingCardShipping.Carrier = carrier //required
                IssuingCardShipping.Customs = customs //required
                IssuingCardShipping.Eta = eta //required
                IssuingCardShipping.Name = name //required
                IssuingCardShipping.PhoneNumber = phoneNumber //required
                IssuingCardShipping.RequireSignature = requireSignature //required
                IssuingCardShipping.Service = service //required
                IssuingCardShipping.Status = status //required
                IssuingCardShipping.TrackingNumber = trackingNumber //required
                IssuingCardShipping.TrackingUrl = trackingUrl //required
                IssuingCardShipping.Type = ``type`` //required
            }

    and IssuingCardShippingCarrier =
        | Dhl
        | Fedex
        | RoyalMail
        | Usps

    and IssuingCardShippingService =
        | Express
        | Priority
        | Standard

    and IssuingCardShippingStatus =
        | Canceled
        | Delivered
        | Failure
        | Pending
        | Returned
        | Shipped

    and IssuingCardShippingType =
        | Bulk
        | Individual

    and IssuingCardShippingCustoms = {
        ///A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU.
        EoriNumber: string option
    }
    with
        static member New (eoriNumber: string option) =
            {
                IssuingCardShippingCustoms.EoriNumber = eoriNumber //required
            }

    and IssuingCardSpendingLimit = {
        ///Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
        Categories: IssuingCardSpendingLimitCategories list option
        ///Interval (or event) to which the amount applies.
        Interval: IssuingCardSpendingLimitInterval
    }
    with
        static member New (amount: int, categories: IssuingCardSpendingLimitCategories list option, interval: IssuingCardSpendingLimitInterval) =
            {
                IssuingCardSpendingLimit.Amount = amount //required
                IssuingCardSpendingLimit.Categories = categories //required
                IssuingCardSpendingLimit.Interval = interval //required
            }

    and IssuingCardSpendingLimitInterval =
        | AllTime
        | Daily
        | Monthly
        | PerAuthorization
        | Weekly
        | Yearly

    and IssuingCardSpendingLimitCategories =
        | AcRefrigerationRepair
        | AccountingBookkeepingServices
        | AdvertisingServices
        | AgriculturalCooperative
        | AirlinesAirCarriers
        | AirportsFlyingFields
        | AmbulanceServices
        | AmusementParksCarnivals
        | AntiqueReproductions
        | AntiqueShops
        | Aquariums
        | ArchitecturalSurveyingServices
        | ArtDealersAndGalleries
        | ArtistsSupplyAndCraftShops
        | AutoAndHomeSupplyStores
        | AutoBodyRepairShops
        | AutoPaintShops
        | AutoServiceShops
        | AutomatedCashDisburse
        | AutomatedFuelDispensers
        | AutomobileAssociations
        | AutomotivePartsAndAccessoriesStores
        | AutomotiveTireStores
        | BailAndBondPayments
        | Bakeries
        | BandsOrchestras
        | BarberAndBeautyShops
        | BettingCasinoGambling
        | BicycleShops
        | BilliardPoolEstablishments
        | BoatDealers
        | BoatRentalsAndLeases
        | BookStores
        | BooksPeriodicalsAndNewspapers
        | BowlingAlleys
        | BusLines
        | BusinessSecretarialSchools
        | BuyingShoppingServices
        | CableSatelliteAndOtherPayTelevisionAndRadio
        | CameraAndPhotographicSupplyStores
        | CandyNutAndConfectioneryStores
        | CarAndTruckDealersNewUsed
        | CarAndTruckDealersUsedOnly
        | CarRentalAgencies
        | CarWashes
        | CarpentryServices
        | CarpetUpholsteryCleaning
        | Caterers
        | CharitableAndSocialServiceOrganizationsFundraising
        | ChemicalsAndAlliedProducts
        | ChildCareServices
        | ChildrensAndInfantsWearStores
        | ChiropodistsPodiatrists
        | Chiropractors
        | CigarStoresAndStands
        | CivicSocialFraternalAssociations
        | CleaningAndMaintenance
        | ClothingRental
        | CollegesUniversities
        | CommercialEquipment
        | CommercialFootwear
        | CommercialPhotographyArtAndGraphics
        | CommuterTransportAndFerries
        | ComputerNetworkServices
        | ComputerProgramming
        | ComputerRepair
        | ComputerSoftwareStores
        | ComputersPeripheralsAndSoftware
        | ConcreteWorkServices
        | ConstructionMaterials
        | ConsultingPublicRelations
        | CorrespondenceSchools
        | CosmeticStores
        | CounselingServices
        | CountryClubs
        | CourierServices
        | CourtCosts
        | CreditReportingAgencies
        | CruiseLines
        | DairyProductsStores
        | DanceHallStudiosSchools
        | DatingEscortServices
        | DentistsOrthodontists
        | DepartmentStores
        | DetectiveAgencies
        | DigitalGoodsApplications
        | DigitalGoodsGames
        | DigitalGoodsLargeVolume
        | DigitalGoodsMedia
        | DirectMarketingCatalogMerchant
        | DirectMarketingCombinationCatalogAndRetailMerchant
        | DirectMarketingInboundTelemarketing
        | DirectMarketingInsuranceServices
        | DirectMarketingOther
        | DirectMarketingOutboundTelemarketing
        | DirectMarketingSubscription
        | DirectMarketingTravel
        | DiscountStores
        | Doctors
        | DoorToDoorSales
        | DraperyWindowCoveringAndUpholsteryStores
        | DrinkingPlaces
        | DrugStoresAndPharmacies
        | DrugsDrugProprietariesAndDruggistSundries
        | DryCleaners
        | DurableGoods
        | DutyFreeStores
        | EatingPlacesRestaurants
        | EducationalServices
        | ElectricRazorStores
        | ElectricVehicleCharging
        | ElectricalPartsAndEquipment
        | ElectricalServices
        | ElectronicsRepairShops
        | ElectronicsStores
        | ElementarySecondarySchools
        | EmergencyServicesGcasVisaUseOnly
        | EmploymentTempAgencies
        | EquipmentRental
        | ExterminatingServices
        | FamilyClothingStores
        | FastFoodRestaurants
        | FinancialInstitutions
        | FinesGovernmentAdministrativeEntities
        | FireplaceFireplaceScreensAndAccessoriesStores
        | FloorCoveringStores
        | Florists
        | FloristsSuppliesNurseryStockAndFlowers
        | FreezerAndLockerMeatProvisioners
        | FuelDealersNonAutomotive
        | FuneralServicesCrematories
        | FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
        | FurnitureRepairRefinishing
        | FurriersAndFurShops
        | GeneralServices
        | GiftCardNoveltyAndSouvenirShops
        | GlassPaintAndWallpaperStores
        | GlasswareCrystalStores
        | GolfCoursesPublic
        | GovernmentLicensedHorseDogRacingUsRegionOnly
        | GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly
        | GovernmentOwnedLotteriesNonUsRegion
        | GovernmentOwnedLotteriesUsRegionOnly
        | GovernmentServices
        | GroceryStoresSupermarkets
        | HardwareEquipmentAndSupplies
        | HardwareStores
        | HealthAndBeautySpas
        | HearingAidsSalesAndSupplies
        | HeatingPlumbingAC
        | HobbyToyAndGameShops
        | HomeSupplyWarehouseStores
        | Hospitals
        | HotelsMotelsAndResorts
        | HouseholdApplianceStores
        | IndustrialSupplies
        | InformationRetrievalServices
        | InsuranceDefault
        | InsuranceUnderwritingPremiums
        | IntraCompanyPurchases
        | JewelryStoresWatchesClocksAndSilverwareStores
        | LandscapingServices
        | Laundries
        | LaundryCleaningServices
        | LegalServicesAttorneys
        | LuggageAndLeatherGoodsStores
        | LumberBuildingMaterialsStores
        | ManualCashDisburse
        | MarinasServiceAndSupplies
        | Marketplaces
        | MasonryStoneworkAndPlaster
        | MassageParlors
        | MedicalAndDentalLabs
        | MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
        | MedicalServices
        | MembershipOrganizations
        | MensAndBoysClothingAndAccessoriesStores
        | MensWomensClothingStores
        | MetalServiceCenters
        | Miscellaneous
        | MiscellaneousApparelAndAccessoryShops
        | MiscellaneousAutoDealers
        | MiscellaneousBusinessServices
        | MiscellaneousFoodStores
        | MiscellaneousGeneralMerchandise
        | MiscellaneousGeneralServices
        | MiscellaneousHomeFurnishingSpecialtyStores
        | MiscellaneousPublishingAndPrinting
        | MiscellaneousRecreationServices
        | MiscellaneousRepairShops
        | MiscellaneousSpecialtyRetail
        | MobileHomeDealers
        | MotionPictureTheaters
        | MotorFreightCarriersAndTrucking
        | MotorHomesDealers
        | MotorVehicleSuppliesAndNewParts
        | MotorcycleShopsAndDealers
        | MotorcycleShopsDealers
        | MusicStoresMusicalInstrumentsPianosAndSheetMusic
        | NewsDealersAndNewsstands
        | NonFiMoneyOrders
        | NonFiStoredValueCardPurchaseLoad
        | NondurableGoods
        | NurseriesLawnAndGardenSupplyStores
        | NursingPersonalCare
        | OfficeAndCommercialFurniture
        | OpticiansEyeglasses
        | OptometristsOphthalmologist
        | OrthopedicGoodsProstheticDevices
        | Osteopaths
        | PackageStoresBeerWineAndLiquor
        | PaintsVarnishesAndSupplies
        | ParkingLotsGarages
        | PassengerRailways
        | PawnShops
        | PetShopsPetFoodAndSupplies
        | PetroleumAndPetroleumProducts
        | PhotoDeveloping
        | PhotographicPhotocopyMicrofilmEquipmentAndSupplies
        | PhotographicStudios
        | PictureVideoProduction
        | PieceGoodsNotionsAndOtherDryGoods
        | PlumbingHeatingEquipmentAndSupplies
        | PoliticalOrganizations
        | PostalServicesGovernmentOnly
        | PreciousStonesAndMetalsWatchesAndJewelry
        | ProfessionalServices
        | PublicWarehousingAndStorage
        | QuickCopyReproAndBlueprint
        | Railroads
        | RealEstateAgentsAndManagersRentals
        | RecordStores
        | RecreationalVehicleRentals
        | ReligiousGoodsStores
        | ReligiousOrganizations
        | RoofingSidingSheetMetal
        | SecretarialSupportServices
        | SecurityBrokersDealers
        | ServiceStations
        | SewingNeedleworkFabricAndPieceGoodsStores
        | ShoeRepairHatCleaning
        | ShoeStores
        | SmallApplianceRepair
        | SnowmobileDealers
        | SpecialTradeServices
        | SpecialtyCleaning
        | SportingGoodsStores
        | SportingRecreationCamps
        | SportsAndRidingApparelStores
        | SportsClubsFields
        | StampAndCoinStores
        | StationaryOfficeSuppliesPrintingAndWritingPaper
        | StationeryStoresOfficeAndSchoolSupplyStores
        | SwimmingPoolsSales
        | TUiTravelGermany
        | TailorsAlterations
        | TaxPaymentsGovernmentAgencies
        | TaxPreparationServices
        | TaxicabsLimousines
        | TelecommunicationEquipmentAndTelephoneSales
        | TelecommunicationServices
        | TelegraphServices
        | TentAndAwningShops
        | TestingLaboratories
        | TheatricalTicketAgencies
        | Timeshares
        | TireRetreadingAndRepair
        | TollsBridgeFees
        | TouristAttractionsAndExhibits
        | TowingServices
        | TrailerParksCampgrounds
        | TransportationServices
        | TravelAgenciesTourOperators
        | TruckStopIteration
        | TruckUtilityTrailerRentals
        | TypesettingPlateMakingAndRelatedServices
        | TypewriterStores
        | USFederalGovernmentAgenciesOrDepartments
        | UniformsCommercialClothing
        | UsedMerchandiseAndSecondhandStores
        | Utilities
        | VarietyStores
        | VeterinaryServices
        | VideoAmusementGameSupplies
        | VideoGameArcades
        | VideoTapeRentalStores
        | VocationalTradeSchools
        | WatchJewelryRepair
        | WeldingRepair
        | WholesaleClubs
        | WigAndToupeeStores
        | WiresMoneyOrders
        | WomensAccessoryAndSpecialtyShops
        | WomensReadyToWearStores
        | WreckingAndSalvageYards

    and IssuingCardWallets = {
        ApplePay: IssuingCardApplePay
        GooglePay: IssuingCardGooglePay
        ///Unique identifier for a card used with digital wallets
        PrimaryAccountIdentifier: string option
    }
    with
        static member New (applePay: IssuingCardApplePay, googlePay: IssuingCardGooglePay, primaryAccountIdentifier: string option) =
            {
                IssuingCardWallets.ApplePay = applePay //required
                IssuingCardWallets.GooglePay = googlePay //required
                IssuingCardWallets.PrimaryAccountIdentifier = primaryAccountIdentifier //required
            }

    and IssuingCardholderAddress = {
        Address: Address
    }
    with
        static member New (address: Address) =
            {
                IssuingCardholderAddress.Address = address //required
            }

    and IssuingCardholderAuthorizationControls = {
        ///Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
        AllowedCategories: IssuingCardholderAuthorizationControlsAllowedCategories list option
        ///Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
        BlockedCategories: IssuingCardholderAuthorizationControlsBlockedCategories list option
        ///Limit spending with amount-based rules that apply across this cardholder's cards.
        SpendingLimits: IssuingCardholderSpendingLimit list option
        ///Currency of the amounts within `spending_limits`.
        SpendingLimitsCurrency: string option
    }
    with
        static member New (allowedCategories: IssuingCardholderAuthorizationControlsAllowedCategories list option, blockedCategories: IssuingCardholderAuthorizationControlsBlockedCategories list option, spendingLimits: IssuingCardholderSpendingLimit list option, spendingLimitsCurrency: string option) =
            {
                IssuingCardholderAuthorizationControls.AllowedCategories = allowedCategories //required
                IssuingCardholderAuthorizationControls.BlockedCategories = blockedCategories //required
                IssuingCardholderAuthorizationControls.SpendingLimits = spendingLimits //required
                IssuingCardholderAuthorizationControls.SpendingLimitsCurrency = spendingLimitsCurrency //required
            }

    and IssuingCardholderAuthorizationControlsAllowedCategories =
        | AcRefrigerationRepair
        | AccountingBookkeepingServices
        | AdvertisingServices
        | AgriculturalCooperative
        | AirlinesAirCarriers
        | AirportsFlyingFields
        | AmbulanceServices
        | AmusementParksCarnivals
        | AntiqueReproductions
        | AntiqueShops
        | Aquariums
        | ArchitecturalSurveyingServices
        | ArtDealersAndGalleries
        | ArtistsSupplyAndCraftShops
        | AutoAndHomeSupplyStores
        | AutoBodyRepairShops
        | AutoPaintShops
        | AutoServiceShops
        | AutomatedCashDisburse
        | AutomatedFuelDispensers
        | AutomobileAssociations
        | AutomotivePartsAndAccessoriesStores
        | AutomotiveTireStores
        | BailAndBondPayments
        | Bakeries
        | BandsOrchestras
        | BarberAndBeautyShops
        | BettingCasinoGambling
        | BicycleShops
        | BilliardPoolEstablishments
        | BoatDealers
        | BoatRentalsAndLeases
        | BookStores
        | BooksPeriodicalsAndNewspapers
        | BowlingAlleys
        | BusLines
        | BusinessSecretarialSchools
        | BuyingShoppingServices
        | CableSatelliteAndOtherPayTelevisionAndRadio
        | CameraAndPhotographicSupplyStores
        | CandyNutAndConfectioneryStores
        | CarAndTruckDealersNewUsed
        | CarAndTruckDealersUsedOnly
        | CarRentalAgencies
        | CarWashes
        | CarpentryServices
        | CarpetUpholsteryCleaning
        | Caterers
        | CharitableAndSocialServiceOrganizationsFundraising
        | ChemicalsAndAlliedProducts
        | ChildCareServices
        | ChildrensAndInfantsWearStores
        | ChiropodistsPodiatrists
        | Chiropractors
        | CigarStoresAndStands
        | CivicSocialFraternalAssociations
        | CleaningAndMaintenance
        | ClothingRental
        | CollegesUniversities
        | CommercialEquipment
        | CommercialFootwear
        | CommercialPhotographyArtAndGraphics
        | CommuterTransportAndFerries
        | ComputerNetworkServices
        | ComputerProgramming
        | ComputerRepair
        | ComputerSoftwareStores
        | ComputersPeripheralsAndSoftware
        | ConcreteWorkServices
        | ConstructionMaterials
        | ConsultingPublicRelations
        | CorrespondenceSchools
        | CosmeticStores
        | CounselingServices
        | CountryClubs
        | CourierServices
        | CourtCosts
        | CreditReportingAgencies
        | CruiseLines
        | DairyProductsStores
        | DanceHallStudiosSchools
        | DatingEscortServices
        | DentistsOrthodontists
        | DepartmentStores
        | DetectiveAgencies
        | DigitalGoodsApplications
        | DigitalGoodsGames
        | DigitalGoodsLargeVolume
        | DigitalGoodsMedia
        | DirectMarketingCatalogMerchant
        | DirectMarketingCombinationCatalogAndRetailMerchant
        | DirectMarketingInboundTelemarketing
        | DirectMarketingInsuranceServices
        | DirectMarketingOther
        | DirectMarketingOutboundTelemarketing
        | DirectMarketingSubscription
        | DirectMarketingTravel
        | DiscountStores
        | Doctors
        | DoorToDoorSales
        | DraperyWindowCoveringAndUpholsteryStores
        | DrinkingPlaces
        | DrugStoresAndPharmacies
        | DrugsDrugProprietariesAndDruggistSundries
        | DryCleaners
        | DurableGoods
        | DutyFreeStores
        | EatingPlacesRestaurants
        | EducationalServices
        | ElectricRazorStores
        | ElectricVehicleCharging
        | ElectricalPartsAndEquipment
        | ElectricalServices
        | ElectronicsRepairShops
        | ElectronicsStores
        | ElementarySecondarySchools
        | EmergencyServicesGcasVisaUseOnly
        | EmploymentTempAgencies
        | EquipmentRental
        | ExterminatingServices
        | FamilyClothingStores
        | FastFoodRestaurants
        | FinancialInstitutions
        | FinesGovernmentAdministrativeEntities
        | FireplaceFireplaceScreensAndAccessoriesStores
        | FloorCoveringStores
        | Florists
        | FloristsSuppliesNurseryStockAndFlowers
        | FreezerAndLockerMeatProvisioners
        | FuelDealersNonAutomotive
        | FuneralServicesCrematories
        | FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
        | FurnitureRepairRefinishing
        | FurriersAndFurShops
        | GeneralServices
        | GiftCardNoveltyAndSouvenirShops
        | GlassPaintAndWallpaperStores
        | GlasswareCrystalStores
        | GolfCoursesPublic
        | GovernmentLicensedHorseDogRacingUsRegionOnly
        | GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly
        | GovernmentOwnedLotteriesNonUsRegion
        | GovernmentOwnedLotteriesUsRegionOnly
        | GovernmentServices
        | GroceryStoresSupermarkets
        | HardwareEquipmentAndSupplies
        | HardwareStores
        | HealthAndBeautySpas
        | HearingAidsSalesAndSupplies
        | HeatingPlumbingAC
        | HobbyToyAndGameShops
        | HomeSupplyWarehouseStores
        | Hospitals
        | HotelsMotelsAndResorts
        | HouseholdApplianceStores
        | IndustrialSupplies
        | InformationRetrievalServices
        | InsuranceDefault
        | InsuranceUnderwritingPremiums
        | IntraCompanyPurchases
        | JewelryStoresWatchesClocksAndSilverwareStores
        | LandscapingServices
        | Laundries
        | LaundryCleaningServices
        | LegalServicesAttorneys
        | LuggageAndLeatherGoodsStores
        | LumberBuildingMaterialsStores
        | ManualCashDisburse
        | MarinasServiceAndSupplies
        | Marketplaces
        | MasonryStoneworkAndPlaster
        | MassageParlors
        | MedicalAndDentalLabs
        | MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
        | MedicalServices
        | MembershipOrganizations
        | MensAndBoysClothingAndAccessoriesStores
        | MensWomensClothingStores
        | MetalServiceCenters
        | Miscellaneous
        | MiscellaneousApparelAndAccessoryShops
        | MiscellaneousAutoDealers
        | MiscellaneousBusinessServices
        | MiscellaneousFoodStores
        | MiscellaneousGeneralMerchandise
        | MiscellaneousGeneralServices
        | MiscellaneousHomeFurnishingSpecialtyStores
        | MiscellaneousPublishingAndPrinting
        | MiscellaneousRecreationServices
        | MiscellaneousRepairShops
        | MiscellaneousSpecialtyRetail
        | MobileHomeDealers
        | MotionPictureTheaters
        | MotorFreightCarriersAndTrucking
        | MotorHomesDealers
        | MotorVehicleSuppliesAndNewParts
        | MotorcycleShopsAndDealers
        | MotorcycleShopsDealers
        | MusicStoresMusicalInstrumentsPianosAndSheetMusic
        | NewsDealersAndNewsstands
        | NonFiMoneyOrders
        | NonFiStoredValueCardPurchaseLoad
        | NondurableGoods
        | NurseriesLawnAndGardenSupplyStores
        | NursingPersonalCare
        | OfficeAndCommercialFurniture
        | OpticiansEyeglasses
        | OptometristsOphthalmologist
        | OrthopedicGoodsProstheticDevices
        | Osteopaths
        | PackageStoresBeerWineAndLiquor
        | PaintsVarnishesAndSupplies
        | ParkingLotsGarages
        | PassengerRailways
        | PawnShops
        | PetShopsPetFoodAndSupplies
        | PetroleumAndPetroleumProducts
        | PhotoDeveloping
        | PhotographicPhotocopyMicrofilmEquipmentAndSupplies
        | PhotographicStudios
        | PictureVideoProduction
        | PieceGoodsNotionsAndOtherDryGoods
        | PlumbingHeatingEquipmentAndSupplies
        | PoliticalOrganizations
        | PostalServicesGovernmentOnly
        | PreciousStonesAndMetalsWatchesAndJewelry
        | ProfessionalServices
        | PublicWarehousingAndStorage
        | QuickCopyReproAndBlueprint
        | Railroads
        | RealEstateAgentsAndManagersRentals
        | RecordStores
        | RecreationalVehicleRentals
        | ReligiousGoodsStores
        | ReligiousOrganizations
        | RoofingSidingSheetMetal
        | SecretarialSupportServices
        | SecurityBrokersDealers
        | ServiceStations
        | SewingNeedleworkFabricAndPieceGoodsStores
        | ShoeRepairHatCleaning
        | ShoeStores
        | SmallApplianceRepair
        | SnowmobileDealers
        | SpecialTradeServices
        | SpecialtyCleaning
        | SportingGoodsStores
        | SportingRecreationCamps
        | SportsAndRidingApparelStores
        | SportsClubsFields
        | StampAndCoinStores
        | StationaryOfficeSuppliesPrintingAndWritingPaper
        | StationeryStoresOfficeAndSchoolSupplyStores
        | SwimmingPoolsSales
        | TUiTravelGermany
        | TailorsAlterations
        | TaxPaymentsGovernmentAgencies
        | TaxPreparationServices
        | TaxicabsLimousines
        | TelecommunicationEquipmentAndTelephoneSales
        | TelecommunicationServices
        | TelegraphServices
        | TentAndAwningShops
        | TestingLaboratories
        | TheatricalTicketAgencies
        | Timeshares
        | TireRetreadingAndRepair
        | TollsBridgeFees
        | TouristAttractionsAndExhibits
        | TowingServices
        | TrailerParksCampgrounds
        | TransportationServices
        | TravelAgenciesTourOperators
        | TruckStopIteration
        | TruckUtilityTrailerRentals
        | TypesettingPlateMakingAndRelatedServices
        | TypewriterStores
        | USFederalGovernmentAgenciesOrDepartments
        | UniformsCommercialClothing
        | UsedMerchandiseAndSecondhandStores
        | Utilities
        | VarietyStores
        | VeterinaryServices
        | VideoAmusementGameSupplies
        | VideoGameArcades
        | VideoTapeRentalStores
        | VocationalTradeSchools
        | WatchJewelryRepair
        | WeldingRepair
        | WholesaleClubs
        | WigAndToupeeStores
        | WiresMoneyOrders
        | WomensAccessoryAndSpecialtyShops
        | WomensReadyToWearStores
        | WreckingAndSalvageYards

    and IssuingCardholderAuthorizationControlsBlockedCategories =
        | AcRefrigerationRepair
        | AccountingBookkeepingServices
        | AdvertisingServices
        | AgriculturalCooperative
        | AirlinesAirCarriers
        | AirportsFlyingFields
        | AmbulanceServices
        | AmusementParksCarnivals
        | AntiqueReproductions
        | AntiqueShops
        | Aquariums
        | ArchitecturalSurveyingServices
        | ArtDealersAndGalleries
        | ArtistsSupplyAndCraftShops
        | AutoAndHomeSupplyStores
        | AutoBodyRepairShops
        | AutoPaintShops
        | AutoServiceShops
        | AutomatedCashDisburse
        | AutomatedFuelDispensers
        | AutomobileAssociations
        | AutomotivePartsAndAccessoriesStores
        | AutomotiveTireStores
        | BailAndBondPayments
        | Bakeries
        | BandsOrchestras
        | BarberAndBeautyShops
        | BettingCasinoGambling
        | BicycleShops
        | BilliardPoolEstablishments
        | BoatDealers
        | BoatRentalsAndLeases
        | BookStores
        | BooksPeriodicalsAndNewspapers
        | BowlingAlleys
        | BusLines
        | BusinessSecretarialSchools
        | BuyingShoppingServices
        | CableSatelliteAndOtherPayTelevisionAndRadio
        | CameraAndPhotographicSupplyStores
        | CandyNutAndConfectioneryStores
        | CarAndTruckDealersNewUsed
        | CarAndTruckDealersUsedOnly
        | CarRentalAgencies
        | CarWashes
        | CarpentryServices
        | CarpetUpholsteryCleaning
        | Caterers
        | CharitableAndSocialServiceOrganizationsFundraising
        | ChemicalsAndAlliedProducts
        | ChildCareServices
        | ChildrensAndInfantsWearStores
        | ChiropodistsPodiatrists
        | Chiropractors
        | CigarStoresAndStands
        | CivicSocialFraternalAssociations
        | CleaningAndMaintenance
        | ClothingRental
        | CollegesUniversities
        | CommercialEquipment
        | CommercialFootwear
        | CommercialPhotographyArtAndGraphics
        | CommuterTransportAndFerries
        | ComputerNetworkServices
        | ComputerProgramming
        | ComputerRepair
        | ComputerSoftwareStores
        | ComputersPeripheralsAndSoftware
        | ConcreteWorkServices
        | ConstructionMaterials
        | ConsultingPublicRelations
        | CorrespondenceSchools
        | CosmeticStores
        | CounselingServices
        | CountryClubs
        | CourierServices
        | CourtCosts
        | CreditReportingAgencies
        | CruiseLines
        | DairyProductsStores
        | DanceHallStudiosSchools
        | DatingEscortServices
        | DentistsOrthodontists
        | DepartmentStores
        | DetectiveAgencies
        | DigitalGoodsApplications
        | DigitalGoodsGames
        | DigitalGoodsLargeVolume
        | DigitalGoodsMedia
        | DirectMarketingCatalogMerchant
        | DirectMarketingCombinationCatalogAndRetailMerchant
        | DirectMarketingInboundTelemarketing
        | DirectMarketingInsuranceServices
        | DirectMarketingOther
        | DirectMarketingOutboundTelemarketing
        | DirectMarketingSubscription
        | DirectMarketingTravel
        | DiscountStores
        | Doctors
        | DoorToDoorSales
        | DraperyWindowCoveringAndUpholsteryStores
        | DrinkingPlaces
        | DrugStoresAndPharmacies
        | DrugsDrugProprietariesAndDruggistSundries
        | DryCleaners
        | DurableGoods
        | DutyFreeStores
        | EatingPlacesRestaurants
        | EducationalServices
        | ElectricRazorStores
        | ElectricVehicleCharging
        | ElectricalPartsAndEquipment
        | ElectricalServices
        | ElectronicsRepairShops
        | ElectronicsStores
        | ElementarySecondarySchools
        | EmergencyServicesGcasVisaUseOnly
        | EmploymentTempAgencies
        | EquipmentRental
        | ExterminatingServices
        | FamilyClothingStores
        | FastFoodRestaurants
        | FinancialInstitutions
        | FinesGovernmentAdministrativeEntities
        | FireplaceFireplaceScreensAndAccessoriesStores
        | FloorCoveringStores
        | Florists
        | FloristsSuppliesNurseryStockAndFlowers
        | FreezerAndLockerMeatProvisioners
        | FuelDealersNonAutomotive
        | FuneralServicesCrematories
        | FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
        | FurnitureRepairRefinishing
        | FurriersAndFurShops
        | GeneralServices
        | GiftCardNoveltyAndSouvenirShops
        | GlassPaintAndWallpaperStores
        | GlasswareCrystalStores
        | GolfCoursesPublic
        | GovernmentLicensedHorseDogRacingUsRegionOnly
        | GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly
        | GovernmentOwnedLotteriesNonUsRegion
        | GovernmentOwnedLotteriesUsRegionOnly
        | GovernmentServices
        | GroceryStoresSupermarkets
        | HardwareEquipmentAndSupplies
        | HardwareStores
        | HealthAndBeautySpas
        | HearingAidsSalesAndSupplies
        | HeatingPlumbingAC
        | HobbyToyAndGameShops
        | HomeSupplyWarehouseStores
        | Hospitals
        | HotelsMotelsAndResorts
        | HouseholdApplianceStores
        | IndustrialSupplies
        | InformationRetrievalServices
        | InsuranceDefault
        | InsuranceUnderwritingPremiums
        | IntraCompanyPurchases
        | JewelryStoresWatchesClocksAndSilverwareStores
        | LandscapingServices
        | Laundries
        | LaundryCleaningServices
        | LegalServicesAttorneys
        | LuggageAndLeatherGoodsStores
        | LumberBuildingMaterialsStores
        | ManualCashDisburse
        | MarinasServiceAndSupplies
        | Marketplaces
        | MasonryStoneworkAndPlaster
        | MassageParlors
        | MedicalAndDentalLabs
        | MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
        | MedicalServices
        | MembershipOrganizations
        | MensAndBoysClothingAndAccessoriesStores
        | MensWomensClothingStores
        | MetalServiceCenters
        | Miscellaneous
        | MiscellaneousApparelAndAccessoryShops
        | MiscellaneousAutoDealers
        | MiscellaneousBusinessServices
        | MiscellaneousFoodStores
        | MiscellaneousGeneralMerchandise
        | MiscellaneousGeneralServices
        | MiscellaneousHomeFurnishingSpecialtyStores
        | MiscellaneousPublishingAndPrinting
        | MiscellaneousRecreationServices
        | MiscellaneousRepairShops
        | MiscellaneousSpecialtyRetail
        | MobileHomeDealers
        | MotionPictureTheaters
        | MotorFreightCarriersAndTrucking
        | MotorHomesDealers
        | MotorVehicleSuppliesAndNewParts
        | MotorcycleShopsAndDealers
        | MotorcycleShopsDealers
        | MusicStoresMusicalInstrumentsPianosAndSheetMusic
        | NewsDealersAndNewsstands
        | NonFiMoneyOrders
        | NonFiStoredValueCardPurchaseLoad
        | NondurableGoods
        | NurseriesLawnAndGardenSupplyStores
        | NursingPersonalCare
        | OfficeAndCommercialFurniture
        | OpticiansEyeglasses
        | OptometristsOphthalmologist
        | OrthopedicGoodsProstheticDevices
        | Osteopaths
        | PackageStoresBeerWineAndLiquor
        | PaintsVarnishesAndSupplies
        | ParkingLotsGarages
        | PassengerRailways
        | PawnShops
        | PetShopsPetFoodAndSupplies
        | PetroleumAndPetroleumProducts
        | PhotoDeveloping
        | PhotographicPhotocopyMicrofilmEquipmentAndSupplies
        | PhotographicStudios
        | PictureVideoProduction
        | PieceGoodsNotionsAndOtherDryGoods
        | PlumbingHeatingEquipmentAndSupplies
        | PoliticalOrganizations
        | PostalServicesGovernmentOnly
        | PreciousStonesAndMetalsWatchesAndJewelry
        | ProfessionalServices
        | PublicWarehousingAndStorage
        | QuickCopyReproAndBlueprint
        | Railroads
        | RealEstateAgentsAndManagersRentals
        | RecordStores
        | RecreationalVehicleRentals
        | ReligiousGoodsStores
        | ReligiousOrganizations
        | RoofingSidingSheetMetal
        | SecretarialSupportServices
        | SecurityBrokersDealers
        | ServiceStations
        | SewingNeedleworkFabricAndPieceGoodsStores
        | ShoeRepairHatCleaning
        | ShoeStores
        | SmallApplianceRepair
        | SnowmobileDealers
        | SpecialTradeServices
        | SpecialtyCleaning
        | SportingGoodsStores
        | SportingRecreationCamps
        | SportsAndRidingApparelStores
        | SportsClubsFields
        | StampAndCoinStores
        | StationaryOfficeSuppliesPrintingAndWritingPaper
        | StationeryStoresOfficeAndSchoolSupplyStores
        | SwimmingPoolsSales
        | TUiTravelGermany
        | TailorsAlterations
        | TaxPaymentsGovernmentAgencies
        | TaxPreparationServices
        | TaxicabsLimousines
        | TelecommunicationEquipmentAndTelephoneSales
        | TelecommunicationServices
        | TelegraphServices
        | TentAndAwningShops
        | TestingLaboratories
        | TheatricalTicketAgencies
        | Timeshares
        | TireRetreadingAndRepair
        | TollsBridgeFees
        | TouristAttractionsAndExhibits
        | TowingServices
        | TrailerParksCampgrounds
        | TransportationServices
        | TravelAgenciesTourOperators
        | TruckStopIteration
        | TruckUtilityTrailerRentals
        | TypesettingPlateMakingAndRelatedServices
        | TypewriterStores
        | USFederalGovernmentAgenciesOrDepartments
        | UniformsCommercialClothing
        | UsedMerchandiseAndSecondhandStores
        | Utilities
        | VarietyStores
        | VeterinaryServices
        | VideoAmusementGameSupplies
        | VideoGameArcades
        | VideoTapeRentalStores
        | VocationalTradeSchools
        | WatchJewelryRepair
        | WeldingRepair
        | WholesaleClubs
        | WigAndToupeeStores
        | WiresMoneyOrders
        | WomensAccessoryAndSpecialtyShops
        | WomensReadyToWearStores
        | WreckingAndSalvageYards

    and IssuingCardholderCardIssuing = {
        ///Information about cardholder acceptance of [Authorized User Terms](https://stripe.com/docs/issuing/cards).
        UserTermsAcceptance: IssuingCardholderUserTermsAcceptance option
    }
    with
        static member New (userTermsAcceptance: IssuingCardholderUserTermsAcceptance option) =
            {
                IssuingCardholderCardIssuing.UserTermsAcceptance = userTermsAcceptance //required
            }

    and IssuingCardholderCompany = {
        ///Whether the company's business ID number was provided.
        TaxIdProvided: bool
    }
    with
        static member New (taxIdProvided: bool) =
            {
                IssuingCardholderCompany.TaxIdProvided = taxIdProvided //required
            }

    and IssuingCardholderIdDocument = {
        ///The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
        Back: IssuingCardholderIdDocumentBack'AnyOf option
        ///The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
        Front: IssuingCardholderIdDocumentFront'AnyOf option
    }
    with
        static member New (back: IssuingCardholderIdDocumentBack'AnyOf option, front: IssuingCardholderIdDocumentFront'AnyOf option) =
            {
                IssuingCardholderIdDocument.Back = back //required
                IssuingCardholderIdDocument.Front = front //required
            }

    and IssuingCardholderIdDocumentBack'AnyOf =
        | String of string
        | File of File

    and IssuingCardholderIdDocumentFront'AnyOf =
        | String of string
        | File of File

    and IssuingCardholderIndividual = {
        ///Information related to the card_issuing program for this cardholder.
        CardIssuing: IssuingCardholderCardIssuing option
        ///The date of birth of this cardholder.
        Dob: IssuingCardholderIndividualDob option
        ///The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
        FirstName: string option
        ///The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
        LastName: string option
        ///Government-issued ID document for this cardholder.
        Verification: IssuingCardholderVerification option
    }
    with
        static member New (cardIssuing: IssuingCardholderCardIssuing option, dob: IssuingCardholderIndividualDob option, firstName: string option, lastName: string option, verification: IssuingCardholderVerification option) =
            {
                IssuingCardholderIndividual.CardIssuing = cardIssuing //required
                IssuingCardholderIndividual.Dob = dob //required
                IssuingCardholderIndividual.FirstName = firstName //required
                IssuingCardholderIndividual.LastName = lastName //required
                IssuingCardholderIndividual.Verification = verification //required
            }

    and IssuingCardholderIndividualDob = {
        ///The day of birth, between 1 and 31.
        Day: int option
        ///The month of birth, between 1 and 12.
        Month: int option
        ///The four-digit year of birth.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                IssuingCardholderIndividualDob.Day = day //required
                IssuingCardholderIndividualDob.Month = month //required
                IssuingCardholderIndividualDob.Year = year //required
            }

    and IssuingCardholderRequirements = {
        ///If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
        DisabledReason: IssuingCardholderRequirementsDisabledReason option
        ///Array of fields that need to be collected in order to verify and re-enable the cardholder.
        PastDue: IssuingCardholderRequirementsPastDue list option
    }
    with
        static member New (disabledReason: IssuingCardholderRequirementsDisabledReason option, pastDue: IssuingCardholderRequirementsPastDue list option) =
            {
                IssuingCardholderRequirements.DisabledReason = disabledReason //required
                IssuingCardholderRequirements.PastDue = pastDue //required
            }

    and IssuingCardholderRequirementsDisabledReason =
        | Listed
        | [<JsonUnionCase("rejected.listed")>] RejectedListed
        | [<JsonUnionCase("requirements.past_due")>] RequirementsPastDue
        | UnderReview

    and IssuingCardholderRequirementsPastDue =
        | [<JsonUnionCase("company.tax_id")>] CompanyTaxId
        | [<JsonUnionCase("individual.card_issuing.user_terms_acceptance.date")>] IndividualCardIssuingUserTermsAcceptanceDate
        | [<JsonUnionCase("individual.card_issuing.user_terms_acceptance.ip")>] IndividualCardIssuingUserTermsAcceptanceIp
        | [<JsonUnionCase("individual.dob.day")>] IndividualDobDay
        | [<JsonUnionCase("individual.dob.month")>] IndividualDobMonth
        | [<JsonUnionCase("individual.dob.year")>] IndividualDobYear
        | [<JsonUnionCase("individual.first_name")>] IndividualFirstName
        | [<JsonUnionCase("individual.last_name")>] IndividualLastName
        | [<JsonUnionCase("individual.verification.document")>] IndividualVerificationDocument

    and IssuingCardholderSpendingLimit = {
        ///Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
        Categories: IssuingCardholderSpendingLimitCategories list option
        ///Interval (or event) to which the amount applies.
        Interval: IssuingCardholderSpendingLimitInterval
    }
    with
        static member New (amount: int, categories: IssuingCardholderSpendingLimitCategories list option, interval: IssuingCardholderSpendingLimitInterval) =
            {
                IssuingCardholderSpendingLimit.Amount = amount //required
                IssuingCardholderSpendingLimit.Categories = categories //required
                IssuingCardholderSpendingLimit.Interval = interval //required
            }

    and IssuingCardholderSpendingLimitInterval =
        | AllTime
        | Daily
        | Monthly
        | PerAuthorization
        | Weekly
        | Yearly

    and IssuingCardholderSpendingLimitCategories =
        | AcRefrigerationRepair
        | AccountingBookkeepingServices
        | AdvertisingServices
        | AgriculturalCooperative
        | AirlinesAirCarriers
        | AirportsFlyingFields
        | AmbulanceServices
        | AmusementParksCarnivals
        | AntiqueReproductions
        | AntiqueShops
        | Aquariums
        | ArchitecturalSurveyingServices
        | ArtDealersAndGalleries
        | ArtistsSupplyAndCraftShops
        | AutoAndHomeSupplyStores
        | AutoBodyRepairShops
        | AutoPaintShops
        | AutoServiceShops
        | AutomatedCashDisburse
        | AutomatedFuelDispensers
        | AutomobileAssociations
        | AutomotivePartsAndAccessoriesStores
        | AutomotiveTireStores
        | BailAndBondPayments
        | Bakeries
        | BandsOrchestras
        | BarberAndBeautyShops
        | BettingCasinoGambling
        | BicycleShops
        | BilliardPoolEstablishments
        | BoatDealers
        | BoatRentalsAndLeases
        | BookStores
        | BooksPeriodicalsAndNewspapers
        | BowlingAlleys
        | BusLines
        | BusinessSecretarialSchools
        | BuyingShoppingServices
        | CableSatelliteAndOtherPayTelevisionAndRadio
        | CameraAndPhotographicSupplyStores
        | CandyNutAndConfectioneryStores
        | CarAndTruckDealersNewUsed
        | CarAndTruckDealersUsedOnly
        | CarRentalAgencies
        | CarWashes
        | CarpentryServices
        | CarpetUpholsteryCleaning
        | Caterers
        | CharitableAndSocialServiceOrganizationsFundraising
        | ChemicalsAndAlliedProducts
        | ChildCareServices
        | ChildrensAndInfantsWearStores
        | ChiropodistsPodiatrists
        | Chiropractors
        | CigarStoresAndStands
        | CivicSocialFraternalAssociations
        | CleaningAndMaintenance
        | ClothingRental
        | CollegesUniversities
        | CommercialEquipment
        | CommercialFootwear
        | CommercialPhotographyArtAndGraphics
        | CommuterTransportAndFerries
        | ComputerNetworkServices
        | ComputerProgramming
        | ComputerRepair
        | ComputerSoftwareStores
        | ComputersPeripheralsAndSoftware
        | ConcreteWorkServices
        | ConstructionMaterials
        | ConsultingPublicRelations
        | CorrespondenceSchools
        | CosmeticStores
        | CounselingServices
        | CountryClubs
        | CourierServices
        | CourtCosts
        | CreditReportingAgencies
        | CruiseLines
        | DairyProductsStores
        | DanceHallStudiosSchools
        | DatingEscortServices
        | DentistsOrthodontists
        | DepartmentStores
        | DetectiveAgencies
        | DigitalGoodsApplications
        | DigitalGoodsGames
        | DigitalGoodsLargeVolume
        | DigitalGoodsMedia
        | DirectMarketingCatalogMerchant
        | DirectMarketingCombinationCatalogAndRetailMerchant
        | DirectMarketingInboundTelemarketing
        | DirectMarketingInsuranceServices
        | DirectMarketingOther
        | DirectMarketingOutboundTelemarketing
        | DirectMarketingSubscription
        | DirectMarketingTravel
        | DiscountStores
        | Doctors
        | DoorToDoorSales
        | DraperyWindowCoveringAndUpholsteryStores
        | DrinkingPlaces
        | DrugStoresAndPharmacies
        | DrugsDrugProprietariesAndDruggistSundries
        | DryCleaners
        | DurableGoods
        | DutyFreeStores
        | EatingPlacesRestaurants
        | EducationalServices
        | ElectricRazorStores
        | ElectricVehicleCharging
        | ElectricalPartsAndEquipment
        | ElectricalServices
        | ElectronicsRepairShops
        | ElectronicsStores
        | ElementarySecondarySchools
        | EmergencyServicesGcasVisaUseOnly
        | EmploymentTempAgencies
        | EquipmentRental
        | ExterminatingServices
        | FamilyClothingStores
        | FastFoodRestaurants
        | FinancialInstitutions
        | FinesGovernmentAdministrativeEntities
        | FireplaceFireplaceScreensAndAccessoriesStores
        | FloorCoveringStores
        | Florists
        | FloristsSuppliesNurseryStockAndFlowers
        | FreezerAndLockerMeatProvisioners
        | FuelDealersNonAutomotive
        | FuneralServicesCrematories
        | FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
        | FurnitureRepairRefinishing
        | FurriersAndFurShops
        | GeneralServices
        | GiftCardNoveltyAndSouvenirShops
        | GlassPaintAndWallpaperStores
        | GlasswareCrystalStores
        | GolfCoursesPublic
        | GovernmentLicensedHorseDogRacingUsRegionOnly
        | GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly
        | GovernmentOwnedLotteriesNonUsRegion
        | GovernmentOwnedLotteriesUsRegionOnly
        | GovernmentServices
        | GroceryStoresSupermarkets
        | HardwareEquipmentAndSupplies
        | HardwareStores
        | HealthAndBeautySpas
        | HearingAidsSalesAndSupplies
        | HeatingPlumbingAC
        | HobbyToyAndGameShops
        | HomeSupplyWarehouseStores
        | Hospitals
        | HotelsMotelsAndResorts
        | HouseholdApplianceStores
        | IndustrialSupplies
        | InformationRetrievalServices
        | InsuranceDefault
        | InsuranceUnderwritingPremiums
        | IntraCompanyPurchases
        | JewelryStoresWatchesClocksAndSilverwareStores
        | LandscapingServices
        | Laundries
        | LaundryCleaningServices
        | LegalServicesAttorneys
        | LuggageAndLeatherGoodsStores
        | LumberBuildingMaterialsStores
        | ManualCashDisburse
        | MarinasServiceAndSupplies
        | Marketplaces
        | MasonryStoneworkAndPlaster
        | MassageParlors
        | MedicalAndDentalLabs
        | MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
        | MedicalServices
        | MembershipOrganizations
        | MensAndBoysClothingAndAccessoriesStores
        | MensWomensClothingStores
        | MetalServiceCenters
        | Miscellaneous
        | MiscellaneousApparelAndAccessoryShops
        | MiscellaneousAutoDealers
        | MiscellaneousBusinessServices
        | MiscellaneousFoodStores
        | MiscellaneousGeneralMerchandise
        | MiscellaneousGeneralServices
        | MiscellaneousHomeFurnishingSpecialtyStores
        | MiscellaneousPublishingAndPrinting
        | MiscellaneousRecreationServices
        | MiscellaneousRepairShops
        | MiscellaneousSpecialtyRetail
        | MobileHomeDealers
        | MotionPictureTheaters
        | MotorFreightCarriersAndTrucking
        | MotorHomesDealers
        | MotorVehicleSuppliesAndNewParts
        | MotorcycleShopsAndDealers
        | MotorcycleShopsDealers
        | MusicStoresMusicalInstrumentsPianosAndSheetMusic
        | NewsDealersAndNewsstands
        | NonFiMoneyOrders
        | NonFiStoredValueCardPurchaseLoad
        | NondurableGoods
        | NurseriesLawnAndGardenSupplyStores
        | NursingPersonalCare
        | OfficeAndCommercialFurniture
        | OpticiansEyeglasses
        | OptometristsOphthalmologist
        | OrthopedicGoodsProstheticDevices
        | Osteopaths
        | PackageStoresBeerWineAndLiquor
        | PaintsVarnishesAndSupplies
        | ParkingLotsGarages
        | PassengerRailways
        | PawnShops
        | PetShopsPetFoodAndSupplies
        | PetroleumAndPetroleumProducts
        | PhotoDeveloping
        | PhotographicPhotocopyMicrofilmEquipmentAndSupplies
        | PhotographicStudios
        | PictureVideoProduction
        | PieceGoodsNotionsAndOtherDryGoods
        | PlumbingHeatingEquipmentAndSupplies
        | PoliticalOrganizations
        | PostalServicesGovernmentOnly
        | PreciousStonesAndMetalsWatchesAndJewelry
        | ProfessionalServices
        | PublicWarehousingAndStorage
        | QuickCopyReproAndBlueprint
        | Railroads
        | RealEstateAgentsAndManagersRentals
        | RecordStores
        | RecreationalVehicleRentals
        | ReligiousGoodsStores
        | ReligiousOrganizations
        | RoofingSidingSheetMetal
        | SecretarialSupportServices
        | SecurityBrokersDealers
        | ServiceStations
        | SewingNeedleworkFabricAndPieceGoodsStores
        | ShoeRepairHatCleaning
        | ShoeStores
        | SmallApplianceRepair
        | SnowmobileDealers
        | SpecialTradeServices
        | SpecialtyCleaning
        | SportingGoodsStores
        | SportingRecreationCamps
        | SportsAndRidingApparelStores
        | SportsClubsFields
        | StampAndCoinStores
        | StationaryOfficeSuppliesPrintingAndWritingPaper
        | StationeryStoresOfficeAndSchoolSupplyStores
        | SwimmingPoolsSales
        | TUiTravelGermany
        | TailorsAlterations
        | TaxPaymentsGovernmentAgencies
        | TaxPreparationServices
        | TaxicabsLimousines
        | TelecommunicationEquipmentAndTelephoneSales
        | TelecommunicationServices
        | TelegraphServices
        | TentAndAwningShops
        | TestingLaboratories
        | TheatricalTicketAgencies
        | Timeshares
        | TireRetreadingAndRepair
        | TollsBridgeFees
        | TouristAttractionsAndExhibits
        | TowingServices
        | TrailerParksCampgrounds
        | TransportationServices
        | TravelAgenciesTourOperators
        | TruckStopIteration
        | TruckUtilityTrailerRentals
        | TypesettingPlateMakingAndRelatedServices
        | TypewriterStores
        | USFederalGovernmentAgenciesOrDepartments
        | UniformsCommercialClothing
        | UsedMerchandiseAndSecondhandStores
        | Utilities
        | VarietyStores
        | VeterinaryServices
        | VideoAmusementGameSupplies
        | VideoGameArcades
        | VideoTapeRentalStores
        | VocationalTradeSchools
        | WatchJewelryRepair
        | WeldingRepair
        | WholesaleClubs
        | WigAndToupeeStores
        | WiresMoneyOrders
        | WomensAccessoryAndSpecialtyShops
        | WomensReadyToWearStores
        | WreckingAndSalvageYards

    and IssuingCardholderUserTermsAcceptance = {
        ///The Unix timestamp marking when the cardholder accepted the Authorized User Terms. Required for Celtic Spend Card users.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Date: DateTime option
        ///The IP address from which the cardholder accepted the Authorized User Terms. Required for Celtic Spend Card users.
        Ip: string option
        ///The user agent of the browser from which the cardholder accepted the Authorized User Terms.
        UserAgent: string option
    }
    with
        static member New (date: DateTime option, ip: string option, userAgent: string option) =
            {
                IssuingCardholderUserTermsAcceptance.Date = date //required
                IssuingCardholderUserTermsAcceptance.Ip = ip //required
                IssuingCardholderUserTermsAcceptance.UserAgent = userAgent //required
            }

    and IssuingCardholderVerification = {
        ///An identifying document, either a passport or local ID card.
        Document: IssuingCardholderIdDocument option
    }
    with
        static member New (document: IssuingCardholderIdDocument option) =
            {
                IssuingCardholderVerification.Document = document //required
            }

    and IssuingDisputeCanceledEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeCanceledEvidenceAdditionalDocumentation'AnyOf option
        ///Date when order was canceled.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Whether the cardholder was provided with a cancellation policy.
        CancellationPolicyProvided: bool option
        ///Reason for canceling the order.
        CancellationReason: string option
        ///Date when the cardholder expected to receive the product.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpectedAt: DateTime option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
        ///Description of the merchandise or service that was purchased.
        ProductDescription: string option
        ///Whether the product was a merchandise or service.
        ProductType: IssuingDisputeCanceledEvidenceProductType option
        ///Result of cardholder's attempt to return the product.
        ReturnStatus: IssuingDisputeCanceledEvidenceReturnStatus option
        ///Date when the product was returned or attempted to be returned.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReturnedAt: DateTime option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeCanceledEvidenceAdditionalDocumentation'AnyOf option, canceledAt: DateTime option, cancellationPolicyProvided: bool option, cancellationReason: string option, expectedAt: DateTime option, explanation: string option, productDescription: string option, productType: IssuingDisputeCanceledEvidenceProductType option, returnStatus: IssuingDisputeCanceledEvidenceReturnStatus option, returnedAt: DateTime option) =
            {
                IssuingDisputeCanceledEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeCanceledEvidence.CanceledAt = canceledAt //required
                IssuingDisputeCanceledEvidence.CancellationPolicyProvided = cancellationPolicyProvided //required
                IssuingDisputeCanceledEvidence.CancellationReason = cancellationReason //required
                IssuingDisputeCanceledEvidence.ExpectedAt = expectedAt //required
                IssuingDisputeCanceledEvidence.Explanation = explanation //required
                IssuingDisputeCanceledEvidence.ProductDescription = productDescription //required
                IssuingDisputeCanceledEvidence.ProductType = productType //required
                IssuingDisputeCanceledEvidence.ReturnStatus = returnStatus //required
                IssuingDisputeCanceledEvidence.ReturnedAt = returnedAt //required
            }

    and IssuingDisputeCanceledEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeCanceledEvidenceProductType =
        | Merchandise
        | Service

    and IssuingDisputeCanceledEvidenceReturnStatus =
        | MerchantRejected
        | Successful

    and IssuingDisputeDuplicateEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeDuplicateEvidenceAdditionalDocumentation'AnyOf option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
        CardStatement: IssuingDisputeDuplicateEvidenceCardStatement'AnyOf option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
        CashReceipt: IssuingDisputeDuplicateEvidenceCashReceipt'AnyOf option
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
        CheckImage: IssuingDisputeDuplicateEvidenceCheckImage'AnyOf option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
        ///Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
        OriginalTransaction: string option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeDuplicateEvidenceAdditionalDocumentation'AnyOf option, cardStatement: IssuingDisputeDuplicateEvidenceCardStatement'AnyOf option, cashReceipt: IssuingDisputeDuplicateEvidenceCashReceipt'AnyOf option, checkImage: IssuingDisputeDuplicateEvidenceCheckImage'AnyOf option, explanation: string option, originalTransaction: string option) =
            {
                IssuingDisputeDuplicateEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeDuplicateEvidence.CardStatement = cardStatement //required
                IssuingDisputeDuplicateEvidence.CashReceipt = cashReceipt //required
                IssuingDisputeDuplicateEvidence.CheckImage = checkImage //required
                IssuingDisputeDuplicateEvidence.Explanation = explanation //required
                IssuingDisputeDuplicateEvidence.OriginalTransaction = originalTransaction //required
            }

    and IssuingDisputeDuplicateEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeDuplicateEvidenceCardStatement'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeDuplicateEvidenceCashReceipt'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeDuplicateEvidenceCheckImage'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeEvidence = {
        Canceled: IssuingDisputeCanceledEvidence option
        Duplicate: IssuingDisputeDuplicateEvidence option
        Fraudulent: IssuingDisputeFraudulentEvidence option
        MerchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence option
        NotReceived: IssuingDisputeNotReceivedEvidence option
        Other: IssuingDisputeOtherEvidence option
        ///The reason for filing the dispute. Its value will match the field containing the evidence.
        Reason: IssuingDisputeEvidenceReason
        ServiceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence option
    }
    with
        static member New (reason: IssuingDisputeEvidenceReason, ?canceled: IssuingDisputeCanceledEvidence, ?duplicate: IssuingDisputeDuplicateEvidence, ?fraudulent: IssuingDisputeFraudulentEvidence, ?merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence, ?notReceived: IssuingDisputeNotReceivedEvidence, ?other: IssuingDisputeOtherEvidence, ?serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence) =
            {
                IssuingDisputeEvidence.Reason = reason //required
                IssuingDisputeEvidence.Canceled = canceled
                IssuingDisputeEvidence.Duplicate = duplicate
                IssuingDisputeEvidence.Fraudulent = fraudulent
                IssuingDisputeEvidence.MerchandiseNotAsDescribed = merchandiseNotAsDescribed
                IssuingDisputeEvidence.NotReceived = notReceived
                IssuingDisputeEvidence.Other = other
                IssuingDisputeEvidence.ServiceNotAsDescribed = serviceNotAsDescribed
            }

    and IssuingDisputeEvidenceReason =
        | Canceled
        | Duplicate
        | Fraudulent
        | MerchandiseNotAsDescribed
        | NotReceived
        | Other
        | ServiceNotAsDescribed

    and IssuingDisputeFraudulentEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeFraudulentEvidenceAdditionalDocumentation'AnyOf option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeFraudulentEvidenceAdditionalDocumentation'AnyOf option, explanation: string option) =
            {
                IssuingDisputeFraudulentEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeFraudulentEvidence.Explanation = explanation //required
            }

    and IssuingDisputeFraudulentEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeMerchandiseNotAsDescribedEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentation'AnyOf option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
        ///Date when the product was received.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReceivedAt: DateTime option
        ///Description of the cardholder's attempt to return the product.
        ReturnDescription: string option
        ///Result of cardholder's attempt to return the product.
        ReturnStatus: IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus option
        ///Date when the product was returned or attempted to be returned.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReturnedAt: DateTime option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentation'AnyOf option, explanation: string option, receivedAt: DateTime option, returnDescription: string option, returnStatus: IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus option, returnedAt: DateTime option) =
            {
                IssuingDisputeMerchandiseNotAsDescribedEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeMerchandiseNotAsDescribedEvidence.Explanation = explanation //required
                IssuingDisputeMerchandiseNotAsDescribedEvidence.ReceivedAt = receivedAt //required
                IssuingDisputeMerchandiseNotAsDescribedEvidence.ReturnDescription = returnDescription //required
                IssuingDisputeMerchandiseNotAsDescribedEvidence.ReturnStatus = returnStatus //required
                IssuingDisputeMerchandiseNotAsDescribedEvidence.ReturnedAt = returnedAt //required
            }

    and IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus =
        | MerchantRejected
        | Successful

    and IssuingDisputeNotReceivedEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeNotReceivedEvidenceAdditionalDocumentation'AnyOf option
        ///Date when the cardholder expected to receive the product.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpectedAt: DateTime option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
        ///Description of the merchandise or service that was purchased.
        ProductDescription: string option
        ///Whether the product was a merchandise or service.
        ProductType: IssuingDisputeNotReceivedEvidenceProductType option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeNotReceivedEvidenceAdditionalDocumentation'AnyOf option, expectedAt: DateTime option, explanation: string option, productDescription: string option, productType: IssuingDisputeNotReceivedEvidenceProductType option) =
            {
                IssuingDisputeNotReceivedEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeNotReceivedEvidence.ExpectedAt = expectedAt //required
                IssuingDisputeNotReceivedEvidence.Explanation = explanation //required
                IssuingDisputeNotReceivedEvidence.ProductDescription = productDescription //required
                IssuingDisputeNotReceivedEvidence.ProductType = productType //required
            }

    and IssuingDisputeNotReceivedEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeNotReceivedEvidenceProductType =
        | Merchandise
        | Service

    and IssuingDisputeOtherEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeOtherEvidenceAdditionalDocumentation'AnyOf option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
        ///Description of the merchandise or service that was purchased.
        ProductDescription: string option
        ///Whether the product was a merchandise or service.
        ProductType: IssuingDisputeOtherEvidenceProductType option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeOtherEvidenceAdditionalDocumentation'AnyOf option, explanation: string option, productDescription: string option, productType: IssuingDisputeOtherEvidenceProductType option) =
            {
                IssuingDisputeOtherEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeOtherEvidence.Explanation = explanation //required
                IssuingDisputeOtherEvidence.ProductDescription = productDescription //required
                IssuingDisputeOtherEvidence.ProductType = productType //required
            }

    and IssuingDisputeOtherEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeOtherEvidenceProductType =
        | Merchandise
        | Service

    and IssuingDisputeServiceNotAsDescribedEvidence = {
        ///(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
        AdditionalDocumentation: IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'AnyOf option
        ///Date when order was canceled.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Reason for canceling the order.
        CancellationReason: string option
        ///Explanation of why the cardholder is disputing this transaction.
        Explanation: string option
        ///Date when the product was received.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReceivedAt: DateTime option
    }
    with
        static member New (additionalDocumentation: IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'AnyOf option, canceledAt: DateTime option, cancellationReason: string option, explanation: string option, receivedAt: DateTime option) =
            {
                IssuingDisputeServiceNotAsDescribedEvidence.AdditionalDocumentation = additionalDocumentation //required
                IssuingDisputeServiceNotAsDescribedEvidence.CanceledAt = canceledAt //required
                IssuingDisputeServiceNotAsDescribedEvidence.CancellationReason = cancellationReason //required
                IssuingDisputeServiceNotAsDescribedEvidence.Explanation = explanation //required
                IssuingDisputeServiceNotAsDescribedEvidence.ReceivedAt = receivedAt //required
            }

    and IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'AnyOf =
        | String of string
        | File of File

    and IssuingDisputeTreasury = {
        ///The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute
        DebitReversal: string option
        ///The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed.
        ReceivedDebit: string
    }
    with
        static member New (debitReversal: string option, receivedDebit: string) =
            {
                IssuingDisputeTreasury.DebitReversal = debitReversal //required
                IssuingDisputeTreasury.ReceivedDebit = receivedDebit //required
            }

    and IssuingTransactionAmountDetails = {
        ///The fee charged by the ATM for the cash withdrawal.
        AtmFee: int option
    }
    with
        static member New (atmFee: int option) =
            {
                IssuingTransactionAmountDetails.AtmFee = atmFee //required
            }

    and IssuingTransactionFlightData = {
        ///The time that the flight departed.
        DepartureAt: int option
        ///The name of the passenger.
        PassengerName: string option
        ///Whether the ticket is refundable.
        Refundable: bool option
        ///The legs of the trip.
        Segments: IssuingTransactionFlightDataLeg list option
        ///The travel agency that issued the ticket.
        TravelAgency: string option
    }
    with
        static member New (departureAt: int option, passengerName: string option, refundable: bool option, segments: IssuingTransactionFlightDataLeg list option, travelAgency: string option) =
            {
                IssuingTransactionFlightData.DepartureAt = departureAt //required
                IssuingTransactionFlightData.PassengerName = passengerName //required
                IssuingTransactionFlightData.Refundable = refundable //required
                IssuingTransactionFlightData.Segments = segments //required
                IssuingTransactionFlightData.TravelAgency = travelAgency //required
            }

    and IssuingTransactionFlightDataLeg = {
        ///The three-letter IATA airport code of the flight's destination.
        ArrivalAirportCode: string option
        ///The airline carrier code.
        Carrier: string option
        ///The three-letter IATA airport code that the flight departed from.
        DepartureAirportCode: string option
        ///The flight number.
        FlightNumber: string option
        ///The flight's service class.
        ServiceClass: string option
        ///Whether a stopover is allowed on this flight.
        StopoverAllowed: bool option
    }
    with
        static member New (arrivalAirportCode: string option, carrier: string option, departureAirportCode: string option, flightNumber: string option, serviceClass: string option, stopoverAllowed: bool option) =
            {
                IssuingTransactionFlightDataLeg.ArrivalAirportCode = arrivalAirportCode //required
                IssuingTransactionFlightDataLeg.Carrier = carrier //required
                IssuingTransactionFlightDataLeg.DepartureAirportCode = departureAirportCode //required
                IssuingTransactionFlightDataLeg.FlightNumber = flightNumber //required
                IssuingTransactionFlightDataLeg.ServiceClass = serviceClass //required
                IssuingTransactionFlightDataLeg.StopoverAllowed = stopoverAllowed //required
            }

    and IssuingTransactionFuelData = {
        ///The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
        Type: IssuingTransactionFuelDataType
        ///The units for `volume_decimal`. One of `us_gallon` or `liter`.
        Unit: IssuingTransactionFuelDataUnit
        ///The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
        UnitCostDecimal: string
        ///The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
        VolumeDecimal: string option
    }
    with
        static member New (``type``: IssuingTransactionFuelDataType, unit: IssuingTransactionFuelDataUnit, unitCostDecimal: string, volumeDecimal: string option) =
            {
                IssuingTransactionFuelData.Type = ``type`` //required
                IssuingTransactionFuelData.Unit = unit //required
                IssuingTransactionFuelData.UnitCostDecimal = unitCostDecimal //required
                IssuingTransactionFuelData.VolumeDecimal = volumeDecimal //required
            }

    and IssuingTransactionFuelDataType =
        | Diesel
        | UnleadedPlus
        | UnleadedRegular
        | UnleadedSuper
        | Other

    and IssuingTransactionFuelDataUnit =
        | UsGallon
        | Liter

    and IssuingTransactionLodgingData = {
        ///The time of checking into the lodging.
        CheckInAt: int option
        ///The number of nights stayed at the lodging.
        Nights: int option
    }
    with
        static member New (checkInAt: int option, nights: int option) =
            {
                IssuingTransactionLodgingData.CheckInAt = checkInAt //required
                IssuingTransactionLodgingData.Nights = nights //required
            }

    and IssuingTransactionPurchaseDetails = {
        ///Information about the flight that was purchased with this transaction.
        Flight: IssuingTransactionFlightData option
        ///Information about fuel that was purchased with this transaction.
        Fuel: IssuingTransactionFuelData option
        ///Information about lodging that was purchased with this transaction.
        Lodging: IssuingTransactionLodgingData option
        ///The line items in the purchase.
        Receipt: IssuingTransactionReceiptData list option
        ///A merchant-specific order number.
        Reference: string option
    }
    with
        static member New (flight: IssuingTransactionFlightData option, fuel: IssuingTransactionFuelData option, lodging: IssuingTransactionLodgingData option, receipt: IssuingTransactionReceiptData list option, reference: string option) =
            {
                IssuingTransactionPurchaseDetails.Flight = flight //required
                IssuingTransactionPurchaseDetails.Fuel = fuel //required
                IssuingTransactionPurchaseDetails.Lodging = lodging //required
                IssuingTransactionPurchaseDetails.Receipt = receipt //required
                IssuingTransactionPurchaseDetails.Reference = reference //required
            }

    and IssuingTransactionReceiptData = {
        ///The description of the item. The maximum length of this field is 26 characters.
        Description: string option
        ///The quantity of the item.
        Quantity: decimal option
        ///The total for this line item in cents.
        Total: int option
        ///The unit cost of the item in cents.
        UnitCost: int option
    }
    with
        static member New (description: string option, quantity: decimal option, total: int option, unitCost: int option) =
            {
                IssuingTransactionReceiptData.Description = description //required
                IssuingTransactionReceiptData.Quantity = quantity //required
                IssuingTransactionReceiptData.Total = total //required
                IssuingTransactionReceiptData.UnitCost = unitCost //required
            }

    and IssuingTransactionTreasury = {
        ///The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund
        ReceivedCredit: string option
        ///The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture
        ReceivedDebit: string option
    }
    with
        static member New (receivedCredit: string option, receivedDebit: string option) =
            {
                IssuingTransactionTreasury.ReceivedCredit = receivedCredit //required
                IssuingTransactionTreasury.ReceivedDebit = receivedDebit //required
            }

    ///A line item.
    and Item = {
        ///Total discount amount applied. If no discounts were applied, defaults to 0.
        AmountDiscount: int
        ///Total before any discounts or taxes are applied.
        AmountSubtotal: int
        ///Total tax amount applied. If no tax was applied, defaults to 0.
        AmountTax: int
        ///Total after discounts and taxes.
        AmountTotal: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
        Description: string
        ///The discounts applied to the line item.
        Discounts: LineItemsDiscountAmount list option
        ///Unique identifier for the object.
        Id: string
        ///The price used to generate the line item.
        Price: Price option
        ///The quantity of products being purchased.
        Quantity: int option
        ///The taxes applied to the line item.
        Taxes: LineItemsTaxAmount list option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "item"

        static member New (amountDiscount: int, amountSubtotal: int, amountTax: int, amountTotal: int, currency: string, description: string, id: string, price: Price option, quantity: int option, ?discounts: LineItemsDiscountAmount list, ?taxes: LineItemsTaxAmount list) =
            {
                Item.AmountDiscount = amountDiscount //required
                Item.AmountSubtotal = amountSubtotal //required
                Item.AmountTax = amountTax //required
                Item.AmountTotal = amountTotal //required
                Item.Currency = currency //required
                Item.Description = description //required
                Item.Id = id //required
                Item.Price = price //required
                Item.Quantity = quantity //required
                Item.Discounts = discounts
                Item.Taxes = taxes
            }

    and LegalEntityCompany = {
        Address: Address option
        ///The Kana variation of the company's primary address (Japan only).
        AddressKana: LegalEntityJapanAddress option
        ///The Kanji variation of the company's primary address (Japan only).
        AddressKanji: LegalEntityJapanAddress option
        ///Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
        DirectorsProvided: bool option
        ///Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
        ExecutivesProvided: bool option
        ///The export license ID number of the company, also referred as Import Export Code (India only).
        ExportLicenseId: string option
        ///The purpose code to use for export transactions (India only).
        ExportPurposeCode: string option
        ///The company's legal name.
        Name: string option
        ///The Kana variation of the company's legal name (Japan only).
        NameKana: string option
        ///The Kanji variation of the company's legal name (Japan only).
        NameKanji: string option
        ///Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
        OwnersProvided: bool option
        ///This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
        OwnershipDeclaration: LegalEntityUboDeclaration option
        ///The company's phone number (used for verification).
        Phone: string option
        ///The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
        Structure: LegalEntityCompanyStructure option
        ///Whether the company's business ID number was provided.
        TaxIdProvided: bool option
        ///The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
        TaxIdRegistrar: string option
        ///Whether the company's business VAT number was provided.
        VatIdProvided: bool option
        ///Information on the verification state of the company.
        Verification: LegalEntityCompanyVerification option
    }
    with
        static member New (?address: Address, ?addressKana: LegalEntityJapanAddress option, ?addressKanji: LegalEntityJapanAddress option, ?directorsProvided: bool, ?executivesProvided: bool, ?exportLicenseId: string, ?exportPurposeCode: string, ?name: string option, ?nameKana: string option, ?nameKanji: string option, ?ownersProvided: bool, ?ownershipDeclaration: LegalEntityUboDeclaration option, ?phone: string option, ?structure: LegalEntityCompanyStructure, ?taxIdProvided: bool, ?taxIdRegistrar: string, ?vatIdProvided: bool, ?verification: LegalEntityCompanyVerification option) =
            {
                LegalEntityCompany.Address = address
                LegalEntityCompany.AddressKana = addressKana |> Option.flatten
                LegalEntityCompany.AddressKanji = addressKanji |> Option.flatten
                LegalEntityCompany.DirectorsProvided = directorsProvided
                LegalEntityCompany.ExecutivesProvided = executivesProvided
                LegalEntityCompany.ExportLicenseId = exportLicenseId
                LegalEntityCompany.ExportPurposeCode = exportPurposeCode
                LegalEntityCompany.Name = name |> Option.flatten
                LegalEntityCompany.NameKana = nameKana |> Option.flatten
                LegalEntityCompany.NameKanji = nameKanji |> Option.flatten
                LegalEntityCompany.OwnersProvided = ownersProvided
                LegalEntityCompany.OwnershipDeclaration = ownershipDeclaration |> Option.flatten
                LegalEntityCompany.Phone = phone |> Option.flatten
                LegalEntityCompany.Structure = structure
                LegalEntityCompany.TaxIdProvided = taxIdProvided
                LegalEntityCompany.TaxIdRegistrar = taxIdRegistrar
                LegalEntityCompany.VatIdProvided = vatIdProvided
                LegalEntityCompany.Verification = verification |> Option.flatten
            }

    and LegalEntityCompanyStructure =
        | FreeZoneEstablishment
        | FreeZoneLlc
        | GovernmentInstrumentality
        | GovernmentalUnit
        | IncorporatedNonProfit
        | IncorporatedPartnership
        | LimitedLiabilityPartnership
        | Llc
        | MultiMemberLlc
        | PrivateCompany
        | PrivateCorporation
        | PrivatePartnership
        | PublicCompany
        | PublicCorporation
        | PublicPartnership
        | SingleMemberLlc
        | SoleEstablishment
        | SoleProprietorship
        | TaxExemptGovernmentInstrumentality
        | UnincorporatedAssociation
        | UnincorporatedNonProfit
        | UnincorporatedPartnership

    and LegalEntityCompanyVerification = {
        Document: LegalEntityCompanyVerificationDocument
    }
    with
        static member New (document: LegalEntityCompanyVerificationDocument) =
            {
                LegalEntityCompanyVerification.Document = document //required
            }

    and LegalEntityCompanyVerificationDocument = {
        ///The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
        Back: LegalEntityCompanyVerificationDocumentBack'AnyOf option
        ///A user-displayable string describing the verification state of this document.
        Details: string option
        ///One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
        DetailsCode: LegalEntityCompanyVerificationDocumentDetailsCode option
        ///The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
        Front: LegalEntityCompanyVerificationDocumentFront'AnyOf option
    }
    with
        static member New (back: LegalEntityCompanyVerificationDocumentBack'AnyOf option, details: string option, detailsCode: LegalEntityCompanyVerificationDocumentDetailsCode option, front: LegalEntityCompanyVerificationDocumentFront'AnyOf option) =
            {
                LegalEntityCompanyVerificationDocument.Back = back //required
                LegalEntityCompanyVerificationDocument.Details = details //required
                LegalEntityCompanyVerificationDocument.DetailsCode = detailsCode //required
                LegalEntityCompanyVerificationDocument.Front = front //required
            }

    and LegalEntityCompanyVerificationDocumentBack'AnyOf =
        | String of string
        | File of File

    and LegalEntityCompanyVerificationDocumentDetailsCode =
        | DocumentCorrupt
        | DocumentExpired
        | DocumentFailedCopy
        | DocumentFailedGreyscale
        | DocumentFailedOther
        | DocumentFailedTestMode
        | DocumentFraudulent
        | DocumentIncomplete
        | DocumentInvalid
        | DocumentManipulated
        | DocumentNotReadable
        | DocumentNotUploaded
        | DocumentTypeNotSupported
        | DocumentTooLarge

    and LegalEntityCompanyVerificationDocumentFront'AnyOf =
        | String of string
        | File of File

    and LegalEntityDob = {
        ///The day of birth, between 1 and 31.
        Day: int option
        ///The month of birth, between 1 and 12.
        Month: int option
        ///The four-digit year of birth.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                LegalEntityDob.Day = day //required
                LegalEntityDob.Month = month //required
                LegalEntityDob.Year = year //required
            }

    and LegalEntityJapanAddress = {
        ///City/Ward.
        City: string option
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string option
        ///Block/Building number.
        [<JsonField(Name="line1")>]Line1: string option
        ///Building details.
        [<JsonField(Name="line2")>]Line2: string option
        ///ZIP or postal code.
        PostalCode: string option
        ///Prefecture.
        State: string option
        ///Town/cho-me.
        Town: string option
    }
    with
        static member New (city: string option, country: string option, line1: string option, line2: string option, postalCode: string option, state: string option, town: string option) =
            {
                LegalEntityJapanAddress.City = city //required
                LegalEntityJapanAddress.Country = country //required
                LegalEntityJapanAddress.Line1 = line1 //required
                LegalEntityJapanAddress.Line2 = line2 //required
                LegalEntityJapanAddress.PostalCode = postalCode //required
                LegalEntityJapanAddress.State = state //required
                LegalEntityJapanAddress.Town = town //required
            }

    and LegalEntityPersonVerification = {
        ///A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
        AdditionalDocument: LegalEntityPersonVerificationDocument option
        ///A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
        Details: string option
        ///One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
        DetailsCode: LegalEntityPersonVerificationDetailsCode option
        Document: LegalEntityPersonVerificationDocument option
        ///The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
        Status: LegalEntityPersonVerificationStatus
    }
    with
        static member New (status: LegalEntityPersonVerificationStatus, ?additionalDocument: LegalEntityPersonVerificationDocument option, ?details: string option, ?detailsCode: LegalEntityPersonVerificationDetailsCode option, ?document: LegalEntityPersonVerificationDocument) =
            {
                LegalEntityPersonVerification.Status = status //required
                LegalEntityPersonVerification.AdditionalDocument = additionalDocument |> Option.flatten
                LegalEntityPersonVerification.Details = details |> Option.flatten
                LegalEntityPersonVerification.DetailsCode = detailsCode |> Option.flatten
                LegalEntityPersonVerification.Document = document
            }

    and LegalEntityPersonVerificationDetailsCode =
        | DocumentAddressMismatch
        | DocumentDobMismatch
        | DocumentDuplicateType
        | DocumentIdNumberMismatch
        | DocumentNameMismatch
        | DocumentNationalityMismatch
        | FailedKeyedIdentity
        | FailedOther

    and LegalEntityPersonVerificationStatus =
        | Unverified
        | Pending
        | Verified

    and LegalEntityPersonVerificationDocument = {
        ///The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
        Back: LegalEntityPersonVerificationDocumentBack'AnyOf option
        ///A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
        Details: string option
        ///One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
        DetailsCode: LegalEntityPersonVerificationDocumentDetailsCode option
        ///The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
        Front: LegalEntityPersonVerificationDocumentFront'AnyOf option
    }
    with
        static member New (back: LegalEntityPersonVerificationDocumentBack'AnyOf option, details: string option, detailsCode: LegalEntityPersonVerificationDocumentDetailsCode option, front: LegalEntityPersonVerificationDocumentFront'AnyOf option) =
            {
                LegalEntityPersonVerificationDocument.Back = back //required
                LegalEntityPersonVerificationDocument.Details = details //required
                LegalEntityPersonVerificationDocument.DetailsCode = detailsCode //required
                LegalEntityPersonVerificationDocument.Front = front //required
            }

    and LegalEntityPersonVerificationDocumentBack'AnyOf =
        | String of string
        | File of File

    and LegalEntityPersonVerificationDocumentDetailsCode =
        | DocumentCorrupt
        | DocumentCountryNotSupported
        | DocumentExpired
        | DocumentFailedCopy
        | DocumentFailedOther
        | DocumentFailedTestMode
        | DocumentFraudulent
        | DocumentFailedGreyscale
        | DocumentIncomplete
        | DocumentInvalid
        | DocumentManipulated
        | DocumentMissingBack
        | DocumentMissingFront
        | DocumentNotReadable
        | DocumentNotUploaded
        | DocumentPhotoMismatch
        | DocumentTooLarge
        | DocumentTypeNotSupported

    and LegalEntityPersonVerificationDocumentFront'AnyOf =
        | String of string
        | File of File

    and LegalEntityUboDeclaration = {
        ///The Unix timestamp marking when the beneficial owner attestation was made.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Date: DateTime option
        ///The IP address from which the beneficial owner attestation was made.
        Ip: string option
        ///The user-agent string from the browser where the beneficial owner attestation was made.
        UserAgent: string option
    }
    with
        static member New (date: DateTime option, ip: string option, userAgent: string option) =
            {
                LegalEntityUboDeclaration.Date = date //required
                LegalEntityUboDeclaration.Ip = ip //required
                LegalEntityUboDeclaration.UserAgent = userAgent //required
            }

    and Level3 = {
        CustomerReference: string option
        LineItems: Level3LineItems list
        MerchantReference: string
        ShippingAddressZip: string option
        ShippingAmount: int option
        ShippingFromZip: string option
    }
    with
        static member New (lineItems: Level3LineItems list, merchantReference: string, ?customerReference: string, ?shippingAddressZip: string, ?shippingAmount: int, ?shippingFromZip: string) =
            {
                Level3.LineItems = lineItems //required
                Level3.MerchantReference = merchantReference //required
                Level3.CustomerReference = customerReference
                Level3.ShippingAddressZip = shippingAddressZip
                Level3.ShippingAmount = shippingAmount
                Level3.ShippingFromZip = shippingFromZip
            }

    and Level3LineItems = {
        DiscountAmount: int option
        ProductCode: string
        ProductDescription: string
        Quantity: int option
        TaxAmount: int option
        UnitCost: int option
    }
    with
        static member New (discountAmount: int option, productCode: string, productDescription: string, quantity: int option, taxAmount: int option, unitCost: int option) =
            {
                Level3LineItems.DiscountAmount = discountAmount //required
                Level3LineItems.ProductCode = productCode //required
                Level3LineItems.ProductDescription = productDescription //required
                Level3LineItems.Quantity = quantity //required
                Level3LineItems.TaxAmount = taxAmount //required
                Level3LineItems.UnitCost = unitCost //required
            }

    and LineItem = {
        ///The amount, in cents (or local equivalent).
        Amount: int
        ///The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts.
        AmountExcludingTax: int option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///The amount of discount calculated per discount for this line item.
        DiscountAmounts: DiscountsResourceDiscountAmount list option
        ///If true, discounts will apply to this line item. Always false for prorations.
        Discountable: bool
        ///The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
        Discounts: LineItemDiscounts'AnyOf list option
        ///Unique identifier for the object.
        Id: string
        ///The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
        InvoiceItem: LineItemInvoiceItem'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
        Metadata: Map<string, string>
        Period: InvoiceLineItemPeriod
        ///The plan of the subscription, if the line item is a subscription or a proration.
        Plan: Plan option
        ///The price of the line item.
        Price: Price option
        ///Whether this is a proration.
        Proration: bool
        ///Additional details for proration line items
        ProrationDetails: InvoicesResourceLineItemsProrationDetails option
        ///The quantity of the subscription, if the line item is a subscription or a proration.
        Quantity: int option
        ///The subscription that the invoice item pertains to, if any.
        Subscription: LineItemSubscription'AnyOf option
        ///The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription.
        SubscriptionItem: LineItemSubscriptionItem'AnyOf option
        ///The amount of tax calculated per tax rate for this line item
        TaxAmounts: InvoiceTaxAmount list option
        ///The tax rates which apply to the line item.
        TaxRates: TaxRate list option
        ///A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
        Type: LineItemType
        ///The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts.
        UnitAmountExcludingTax: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "line_item"

        static member New (amount: int, amountExcludingTax: int option, currency: string, description: string option, discountAmounts: DiscountsResourceDiscountAmount list option, discountable: bool, discounts: LineItemDiscounts'AnyOf list option, id: string, livemode: bool, metadata: Map<string, string>, period: InvoiceLineItemPeriod, plan: Plan option, price: Price option, proration: bool, prorationDetails: InvoicesResourceLineItemsProrationDetails option, quantity: int option, subscription: LineItemSubscription'AnyOf option, ``type``: LineItemType, unitAmountExcludingTax: string option, ?invoiceItem: LineItemInvoiceItem'AnyOf, ?subscriptionItem: LineItemSubscriptionItem'AnyOf, ?taxAmounts: InvoiceTaxAmount list, ?taxRates: TaxRate list) =
            {
                LineItem.Amount = amount //required
                LineItem.AmountExcludingTax = amountExcludingTax //required
                LineItem.Currency = currency //required
                LineItem.Description = description //required
                LineItem.DiscountAmounts = discountAmounts //required
                LineItem.Discountable = discountable //required
                LineItem.Discounts = discounts //required
                LineItem.Id = id //required
                LineItem.Livemode = livemode //required
                LineItem.Metadata = metadata //required
                LineItem.Period = period //required
                LineItem.Plan = plan //required
                LineItem.Price = price //required
                LineItem.Proration = proration //required
                LineItem.ProrationDetails = prorationDetails //required
                LineItem.Quantity = quantity //required
                LineItem.Subscription = subscription //required
                LineItem.Type = ``type`` //required
                LineItem.UnitAmountExcludingTax = unitAmountExcludingTax //required
                LineItem.InvoiceItem = invoiceItem
                LineItem.SubscriptionItem = subscriptionItem
                LineItem.TaxAmounts = taxAmounts
                LineItem.TaxRates = taxRates
            }

    and LineItemInvoiceItem'AnyOf =
        | String of string
        | Invoiceitem of Invoiceitem

    and LineItemSubscription'AnyOf =
        | String of string
        | Subscription of Subscription

    and LineItemSubscriptionItem'AnyOf =
        | String of string
        | SubscriptionItem of SubscriptionItem

    and LineItemType =
        | Invoiceitem
        | Subscription

    and LineItemDiscounts'AnyOf =
        | String of string
        | Discount of Discount

    and LineItemsDiscountAmount = {
        ///The amount discounted.
        Amount: int
        Discount: Discount
    }
    with
        static member New (amount: int, discount: Discount) =
            {
                LineItemsDiscountAmount.Amount = amount //required
                LineItemsDiscountAmount.Discount = discount //required
            }

    and LineItemsTaxAmount = {
        ///Amount of tax applied for this rate.
        Amount: int
        Rate: TaxRate
        ///The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
        TaxabilityReason: LineItemsTaxAmountTaxabilityReason option
        ///The amount on which tax is calculated, in cents (or local equivalent).
        TaxableAmount: int option
    }
    with
        static member New (amount: int, rate: TaxRate, taxabilityReason: LineItemsTaxAmountTaxabilityReason option, taxableAmount: int option) =
            {
                LineItemsTaxAmount.Amount = amount //required
                LineItemsTaxAmount.Rate = rate //required
                LineItemsTaxAmount.TaxabilityReason = taxabilityReason //required
                LineItemsTaxAmount.TaxableAmount = taxableAmount //required
            }

    and LineItemsTaxAmountTaxabilityReason =
        | CustomerExempt
        | NotCollecting
        | NotSubjectToTax
        | NotSupported
        | PortionProductExempt
        | PortionReducedRated
        | PortionStandardRated
        | ProductExempt
        | ProductExemptHoliday
        | ProportionallyRated
        | ReducedRated
        | ReverseCharge
        | StandardRated
        | TaxableBasisReduced
        | ZeroRated

    and LinkedAccountOptionsUsBankAccount = {
        ///The list of permissions to request. The `payment_method` permission must be included.
        Permissions: LinkedAccountOptionsUsBankAccountPermissions list option
        ///Data features requested to be retrieved upon account creation.
        Prefetch: string list option
        ///For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
        ReturnUrl: string option
    }
    with
        static member New (prefetch: string list option, ?permissions: LinkedAccountOptionsUsBankAccountPermissions list, ?returnUrl: string) =
            {
                LinkedAccountOptionsUsBankAccount.Prefetch = prefetch //required
                LinkedAccountOptionsUsBankAccount.Permissions = permissions
                LinkedAccountOptionsUsBankAccount.ReturnUrl = returnUrl
            }

    and LinkedAccountOptionsUsBankAccountPermissions =
        | Balances
        | Ownership
        | PaymentMethod
        | Transactions

    ///Login Links are single-use login link for an Express account to access their Stripe dashboard.
    and LoginLink = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The URL for the login link.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "login_link"

        static member New (created: DateTime, url: string) =
            {
                LoginLink.Created = created //required
                LoginLink.Url = url //required
            }

    ///A Mandate is a record of the permission a customer has given you to debit their payment method.
    and Mandate = {
        CustomerAcceptance: CustomerAcceptance
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        MultiUse: MandateMultiUse option
        ///The account (if any) for which the mandate is intended.
        OnBehalfOf: string option
        ///ID of the payment method associated with this mandate.
        PaymentMethod: MandatePaymentMethod'AnyOf
        PaymentMethodDetails: MandatePaymentMethodDetails
        SingleUse: MandateSingleUse option
        ///The status of the mandate, which indicates whether it can be used to initiate a payment.
        Status: MandateStatus
        ///The type of the mandate.
        Type: MandateType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "mandate"

        static member New (customerAcceptance: CustomerAcceptance, id: string, livemode: bool, paymentMethod: MandatePaymentMethod'AnyOf, paymentMethodDetails: MandatePaymentMethodDetails, status: MandateStatus, ``type``: MandateType, ?multiUse: MandateMultiUse, ?onBehalfOf: string, ?singleUse: MandateSingleUse) =
            {
                Mandate.CustomerAcceptance = customerAcceptance //required
                Mandate.Id = id //required
                Mandate.Livemode = livemode //required
                Mandate.PaymentMethod = paymentMethod //required
                Mandate.PaymentMethodDetails = paymentMethodDetails //required
                Mandate.Status = status //required
                Mandate.Type = ``type`` //required
                Mandate.MultiUse = multiUse
                Mandate.OnBehalfOf = onBehalfOf
                Mandate.SingleUse = singleUse
            }

    and MandatePaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and MandateStatus =
        | Active
        | Inactive
        | Pending

    and MandateType =
        | MultiUse
        | SingleUse

    and MandateAcssDebit = {
        ///List of Stripe products where this mandate can be selected automatically.
        DefaultFor: MandateAcssDebitDefaultFor list option
        ///Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
        IntervalDescription: string option
        ///Payment schedule for the mandate.
        PaymentSchedule: MandateAcssDebitPaymentSchedule
        ///Transaction type of the mandate.
        TransactionType: MandateAcssDebitTransactionType
    }
    with
        static member New (intervalDescription: string option, paymentSchedule: MandateAcssDebitPaymentSchedule, transactionType: MandateAcssDebitTransactionType, ?defaultFor: MandateAcssDebitDefaultFor list) =
            {
                MandateAcssDebit.IntervalDescription = intervalDescription //required
                MandateAcssDebit.PaymentSchedule = paymentSchedule //required
                MandateAcssDebit.TransactionType = transactionType //required
                MandateAcssDebit.DefaultFor = defaultFor
            }

    and MandateAcssDebitPaymentSchedule =
        | Combined
        | Interval
        | Sporadic

    and MandateAcssDebitTransactionType =
        | Business
        | Personal

    and MandateAcssDebitDefaultFor =
        | Invoice
        | Subscription

    and MandateAuBecsDebit = {
        ///The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
        Url: string
    }
    with
        static member New (url: string) =
            {
                MandateAuBecsDebit.Url = url //required
            }

    and MandateBacsDebit = {
        ///The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
        NetworkStatus: MandateBacsDebitNetworkStatus
        ///The unique reference identifying the mandate on the Bacs network.
        Reference: string
        ///The URL that will contain the mandate that the customer has signed.
        Url: string
    }
    with
        static member New (networkStatus: MandateBacsDebitNetworkStatus, reference: string, url: string) =
            {
                MandateBacsDebit.NetworkStatus = networkStatus //required
                MandateBacsDebit.Reference = reference //required
                MandateBacsDebit.Url = url //required
            }

    and MandateBacsDebitNetworkStatus =
        | Accepted
        | Pending
        | Refused
        | Revoked

    and MandateCashapp = {
        MandateCashapp: string option
    }
    with
        static member New (?mandateCashapp: string option) =
            {
                MandateCashapp.MandateCashapp = mandateCashapp |> Option.flatten
            }

    and MandateLink = {
        MandateLink: string option
    }
    with
        static member New (?mandateLink: string option) =
            {
                MandateLink.MandateLink = mandateLink |> Option.flatten
            }

    and MandateMultiUse = {
        MandateMultiUse: string option
    }
    with
        static member New (?mandateMultiUse: string option) =
            {
                MandateMultiUse.MandateMultiUse = mandateMultiUse |> Option.flatten
            }

    and MandatePaymentMethodDetails = {
        AcssDebit: MandateAcssDebit option
        AuBecsDebit: MandateAuBecsDebit option
        BacsDebit: MandateBacsDebit option
        Card: CardMandatePaymentMethodDetails option
        Cashapp: MandateCashapp option
        Link: MandateLink option
        Paypal: MandatePaypal option
        SepaDebit: MandateSepaDebit option
        ///The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
        Type: string
        UsBankAccount: MandateUsBankAccount option
    }
    with
        static member New (``type``: string, ?acssDebit: MandateAcssDebit, ?auBecsDebit: MandateAuBecsDebit, ?bacsDebit: MandateBacsDebit, ?card: CardMandatePaymentMethodDetails, ?cashapp: MandateCashapp, ?link: MandateLink, ?paypal: MandatePaypal, ?sepaDebit: MandateSepaDebit, ?usBankAccount: MandateUsBankAccount) =
            {
                MandatePaymentMethodDetails.Type = ``type`` //required
                MandatePaymentMethodDetails.AcssDebit = acssDebit
                MandatePaymentMethodDetails.AuBecsDebit = auBecsDebit
                MandatePaymentMethodDetails.BacsDebit = bacsDebit
                MandatePaymentMethodDetails.Card = card
                MandatePaymentMethodDetails.Cashapp = cashapp
                MandatePaymentMethodDetails.Link = link
                MandatePaymentMethodDetails.Paypal = paypal
                MandatePaymentMethodDetails.SepaDebit = sepaDebit
                MandatePaymentMethodDetails.UsBankAccount = usBankAccount
            }

    and MandatePaypal = {
        ///The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
        BillingAgreementId: string option
        ///PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
        PayerId: string option
    }
    with
        static member New (billingAgreementId: string option, ?payerId: string option) =
            {
                MandatePaypal.BillingAgreementId = billingAgreementId //required
                MandatePaypal.PayerId = payerId |> Option.flatten
            }

    and MandateSepaDebit = {
        ///The unique reference of the mandate.
        Reference: string
        ///The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
        Url: string
    }
    with
        static member New (reference: string, url: string) =
            {
                MandateSepaDebit.Reference = reference //required
                MandateSepaDebit.Url = url //required
            }

    and MandateSingleUse = {
        ///On a single use mandate, the amount of the payment.
        Amount: int
        ///On a single use mandate, the currency of the payment.
        Currency: string
    }
    with
        static member New (amount: int, currency: string) =
            {
                MandateSingleUse.Amount = amount //required
                MandateSingleUse.Currency = currency //required
            }

    and MandateUsBankAccount = {
        MandateUsBankAccount: string option
    }
    with
        static member New (?mandateUsBankAccount: string option) =
            {
                MandateUsBankAccount.MandateUsBankAccount = mandateUsBankAccount |> Option.flatten
            }

    and Networks = {
        ///All available networks for the card.
        Available: string list
        ///The preferred network for the card.
        Preferred: string option
    }
    with
        static member New (available: string list, preferred: string option) =
            {
                Networks.Available = available //required
                Networks.Preferred = preferred //required
            }

    and NotificationEventData = {
        ///Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
        Object: string
        ///Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements.
        PreviousAttributes: string option
    }
    with
        static member New (object: string, ?previousAttributes: string) =
            {
                NotificationEventData.Object = object //required
                NotificationEventData.PreviousAttributes = previousAttributes
            }

    and NotificationEventRequest = {
        ///ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.
        Id: string option
        ///The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
        IdempotencyKey: string option
    }
    with
        static member New (id: string option, idempotencyKey: string option) =
            {
                NotificationEventRequest.Id = id //required
                NotificationEventRequest.IdempotencyKey = idempotencyKey //required
            }

    and OfflineAcceptance = {
        OfflineAcceptance: string option
    }
    with
        static member New (?offlineAcceptance: string option) =
            {
                OfflineAcceptance.OfflineAcceptance = offlineAcceptance |> Option.flatten
            }

    and OnlineAcceptance = {
        ///The IP address from which the Mandate was accepted by the customer.
        IpAddress: string option
        ///The user agent of the browser from which the Mandate was accepted by the customer.
        UserAgent: string option
    }
    with
        static member New (ipAddress: string option, userAgent: string option) =
            {
                OnlineAcceptance.IpAddress = ipAddress //required
                OnlineAcceptance.UserAgent = userAgent //required
            }

    and OutboundPaymentsPaymentMethodDetails = {
        BillingDetails: TreasurySharedResourceBillingDetails
        FinancialAccount: OutboundPaymentsPaymentMethodDetailsFinancialAccount option
        ///The type of the payment method used in the OutboundPayment.
        Type: OutboundPaymentsPaymentMethodDetailsType
        UsBankAccount: OutboundPaymentsPaymentMethodDetailsUsBankAccount option
    }
    with
        static member New (billingDetails: TreasurySharedResourceBillingDetails, ``type``: OutboundPaymentsPaymentMethodDetailsType, ?financialAccount: OutboundPaymentsPaymentMethodDetailsFinancialAccount, ?usBankAccount: OutboundPaymentsPaymentMethodDetailsUsBankAccount) =
            {
                OutboundPaymentsPaymentMethodDetails.BillingDetails = billingDetails //required
                OutboundPaymentsPaymentMethodDetails.Type = ``type`` //required
                OutboundPaymentsPaymentMethodDetails.FinancialAccount = financialAccount
                OutboundPaymentsPaymentMethodDetails.UsBankAccount = usBankAccount
            }

    and OutboundPaymentsPaymentMethodDetailsType =
        | FinancialAccount
        | UsBankAccount

    and OutboundPaymentsPaymentMethodDetailsFinancialAccount = {
        ///Token of the FinancialAccount.
        Id: string
    }
    with
        ///The rails used to send funds.
        member _.Network = "stripe"

        static member New (id: string) =
            {
                OutboundPaymentsPaymentMethodDetailsFinancialAccount.Id = id //required
            }

    and OutboundPaymentsPaymentMethodDetailsUsBankAccount = {
        ///Account holder type: individual or company.
        AccountHolderType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType option
        ///Account type: checkings or savings. Defaults to checking if omitted.
        AccountType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///The US bank account network used to send funds.
        Network: OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork
        ///Routing number of the bank account.
        RoutingNumber: string option
    }
    with
        static member New (accountHolderType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType option, accountType: OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType option, bankName: string option, fingerprint: string option, last4: string option, network: OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork, routingNumber: string option) =
            {
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.AccountHolderType = accountHolderType //required
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.AccountType = accountType //required
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.BankName = bankName //required
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.Fingerprint = fingerprint //required
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.Last4 = last4 //required
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.Network = network //required
                OutboundPaymentsPaymentMethodDetailsUsBankAccount.RoutingNumber = routingNumber //required
            }

    and OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType =
        | Company
        | Individual

    and OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType =
        | Checking
        | Savings

    and OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork =
        | Ach
        | UsDomesticWire

    and OutboundTransfersPaymentMethodDetails = {
        BillingDetails: TreasurySharedResourceBillingDetails
        UsBankAccount: OutboundTransfersPaymentMethodDetailsUsBankAccount option
    }
    with
        ///The type of the payment method used in the OutboundTransfer.
        member _.Type = "us_bank_account"

        static member New (billingDetails: TreasurySharedResourceBillingDetails, ?usBankAccount: OutboundTransfersPaymentMethodDetailsUsBankAccount) =
            {
                OutboundTransfersPaymentMethodDetails.BillingDetails = billingDetails //required
                OutboundTransfersPaymentMethodDetails.UsBankAccount = usBankAccount
            }

    and OutboundTransfersPaymentMethodDetailsUsBankAccount = {
        ///Account holder type: individual or company.
        AccountHolderType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType option
        ///Account type: checkings or savings. Defaults to checking if omitted.
        AccountType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///The US bank account network used to send funds.
        Network: OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork
        ///Routing number of the bank account.
        RoutingNumber: string option
    }
    with
        static member New (accountHolderType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType option, accountType: OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType option, bankName: string option, fingerprint: string option, last4: string option, network: OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork, routingNumber: string option) =
            {
                OutboundTransfersPaymentMethodDetailsUsBankAccount.AccountHolderType = accountHolderType //required
                OutboundTransfersPaymentMethodDetailsUsBankAccount.AccountType = accountType //required
                OutboundTransfersPaymentMethodDetailsUsBankAccount.BankName = bankName //required
                OutboundTransfersPaymentMethodDetailsUsBankAccount.Fingerprint = fingerprint //required
                OutboundTransfersPaymentMethodDetailsUsBankAccount.Last4 = last4 //required
                OutboundTransfersPaymentMethodDetailsUsBankAccount.Network = network //required
                OutboundTransfersPaymentMethodDetailsUsBankAccount.RoutingNumber = routingNumber //required
            }

    and OutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType =
        | Company
        | Individual

    and OutboundTransfersPaymentMethodDetailsUsBankAccountAccountType =
        | Checking
        | Savings

    and OutboundTransfersPaymentMethodDetailsUsBankAccountNetwork =
        | Ach
        | UsDomesticWire

    and PackageDimensions = {
        ///Height, in inches.
        Height: decimal
        ///Length, in inches.
        Length: decimal
        ///Weight, in ounces.
        Weight: decimal
        ///Width, in inches.
        Width: decimal
    }
    with
        static member New (height: decimal, length: decimal, weight: decimal, width: decimal) =
            {
                PackageDimensions.Height = height //required
                PackageDimensions.Length = length //required
                PackageDimensions.Weight = weight //required
                PackageDimensions.Width = width //required
            }

    and PaymentFlowsAmountDetails = {
        Tip: PaymentFlowsAmountDetailsResourceTip option
    }
    with
        static member New (?tip: PaymentFlowsAmountDetailsResourceTip) =
            {
                PaymentFlowsAmountDetails.Tip = tip
            }

    and PaymentFlowsAmountDetailsResourceTip = {
        ///Portion of the amount that corresponds to a tip.
        Amount: int option
    }
    with
        static member New (?amount: int) =
            {
                PaymentFlowsAmountDetailsResourceTip.Amount = amount
            }

    and PaymentFlowsAutomaticPaymentMethodsPaymentIntent = {
        ///Controls whether this PaymentIntent will accept redirect-based payment methods.
        ///Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
        AllowRedirects: PaymentFlowsAutomaticPaymentMethodsPaymentIntentAllowRedirects option
        ///Automatically calculates compatible payment methods
        Enabled: bool
    }
    with
        static member New (enabled: bool, ?allowRedirects: PaymentFlowsAutomaticPaymentMethodsPaymentIntentAllowRedirects) =
            {
                PaymentFlowsAutomaticPaymentMethodsPaymentIntent.Enabled = enabled //required
                PaymentFlowsAutomaticPaymentMethodsPaymentIntent.AllowRedirects = allowRedirects
            }

    and PaymentFlowsAutomaticPaymentMethodsPaymentIntentAllowRedirects =
        | Always
        | Never

    and PaymentFlowsAutomaticPaymentMethodsSetupIntent = {
        ///Controls whether this SetupIntent will accept redirect-based payment methods.
        ///Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
        AllowRedirects: PaymentFlowsAutomaticPaymentMethodsSetupIntentAllowRedirects option
        ///Automatically calculates compatible payment methods
        Enabled: bool option
    }
    with
        static member New (enabled: bool option, ?allowRedirects: PaymentFlowsAutomaticPaymentMethodsSetupIntentAllowRedirects) =
            {
                PaymentFlowsAutomaticPaymentMethodsSetupIntent.Enabled = enabled //required
                PaymentFlowsAutomaticPaymentMethodsSetupIntent.AllowRedirects = allowRedirects
            }

    and PaymentFlowsAutomaticPaymentMethodsSetupIntentAllowRedirects =
        | Always
        | Never

    and PaymentFlowsInstallmentOptions = {
        Enabled: bool
        Plan: PaymentMethodDetailsCardInstallmentsPlan option
    }
    with
        static member New (enabled: bool, ?plan: PaymentMethodDetailsCardInstallmentsPlan) =
            {
                PaymentFlowsInstallmentOptions.Enabled = enabled //required
                PaymentFlowsInstallmentOptions.Plan = plan
            }

    and PaymentFlowsPrivatePaymentMethodsAlipay = {
        PaymentFlowsPrivatePaymentMethodsAlipay: string option
    }
    with
        static member New (?paymentFlowsPrivatePaymentMethodsAlipay: string option) =
            {
                PaymentFlowsPrivatePaymentMethodsAlipay.PaymentFlowsPrivatePaymentMethodsAlipay = paymentFlowsPrivatePaymentMethodsAlipay |> Option.flatten
            }

    and PaymentFlowsPrivatePaymentMethodsAlipayDetails = {
        ///Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
        BuyerId: string option
        ///Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
        Fingerprint: string option
        ///Transaction ID of this particular Alipay transaction.
        TransactionId: string option
    }
    with
        static member New (fingerprint: string option, transactionId: string option, ?buyerId: string) =
            {
                PaymentFlowsPrivatePaymentMethodsAlipayDetails.Fingerprint = fingerprint //required
                PaymentFlowsPrivatePaymentMethodsAlipayDetails.TransactionId = transactionId //required
                PaymentFlowsPrivatePaymentMethodsAlipayDetails.BuyerId = buyerId
            }

    and PaymentFlowsPrivatePaymentMethodsKlarnaDob = {
        ///The day of birth, between 1 and 31.
        Day: int option
        ///The month of birth, between 1 and 12.
        Month: int option
        ///The four-digit year of birth.
        Year: int option
    }
    with
        static member New (day: int option, month: int option, year: int option) =
            {
                PaymentFlowsPrivatePaymentMethodsKlarnaDob.Day = day //required
                PaymentFlowsPrivatePaymentMethodsKlarnaDob.Month = month //required
                PaymentFlowsPrivatePaymentMethodsKlarnaDob.Year = year //required
            }

    ///A PaymentIntent guides you through the process of collecting a payment from your customer.
    ///We recommend that you create exactly one PaymentIntent for each order or
    ///customer session in your system. You can reference the PaymentIntent later to
    ///see the history of payment attempts for a particular session.
    ///A PaymentIntent transitions through
    ///[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
    ///throughout its lifetime as it interfaces with Stripe.js to perform
    ///authentication flows and ultimately creates at most one successful charge.
    ///Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
    and PaymentIntent = {
        ///Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
        Amount: int
        ///Amount that can be captured from this PaymentIntent.
        AmountCapturable: int
        AmountDetails: PaymentFlowsAmountDetails option
        ///Amount that was collected by this PaymentIntent.
        AmountReceived: int
        ///ID of the Connect application that created the PaymentIntent.
        Application: PaymentIntentApplication'AnyOf option
        ///The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
        ApplicationFeeAmount: int option
        ///Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
        AutomaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsPaymentIntent option
        ///Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
        CancellationReason: PaymentIntentCancellationReason option
        ///Controls when the funds will be captured from the customer's account.
        CaptureMethod: PaymentIntentCaptureMethod
        ///The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
        ///The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
        ///Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
        ClientSecret: string option
        ConfirmationMethod: PaymentIntentConfirmationMethod
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the Customer this PaymentIntent belongs to, if one exists.
        ///Payment methods attached to other Customers cannot be used with this PaymentIntent.
        ///If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
        Customer: PaymentIntentCustomer'AnyOf option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Unique identifier for the object.
        Id: string
        ///ID of the invoice that created this PaymentIntent, if it exists.
        Invoice: PaymentIntentInvoice'AnyOf option
        ///The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
        LastPaymentError: ApiErrors option
        ///The latest charge created by this payment intent.
        LatestCharge: PaymentIntentLatestCharge'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
        Metadata: Map<string, string>
        ///If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
        NextAction: PaymentIntentNextAction option
        ///The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
        OnBehalfOf: PaymentIntentOnBehalfOf'AnyOf option
        ///ID of the payment method used in this PaymentIntent.
        PaymentMethod: PaymentIntentPaymentMethod'AnyOf option
        ///Payment-method-specific configuration for this PaymentIntent.
        PaymentMethodOptions: PaymentIntentPaymentMethodOptions option
        ///The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
        PaymentMethodTypes: string list
        ///If present, this property tells you about the processing state of the payment.
        Processing: PaymentIntentProcessing option
        ///Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
        ReceiptEmail: string option
        ///ID of the review associated with this PaymentIntent, if any.
        Review: PaymentIntentReview'AnyOf option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentSetupFutureUsage option
        ///Shipping information for this PaymentIntent.
        Shipping: Shipping option
        ///This is a legacy field that will be removed in the future. It is the ID of the Source object that is associated with this PaymentIntent, if one was supplied.
        Source: PaymentIntentSource'AnyOf option
        ///For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
        StatementDescriptor: string option
        ///Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
        StatementDescriptorSuffix: string option
        ///Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
        Status: PaymentIntentStatus
        ///The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
        TransferData: TransferData option
        ///A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
        TransferGroup: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "payment_intent"

        static member New (amount: int, amountCapturable: int, amountReceived: int, application: PaymentIntentApplication'AnyOf option, applicationFeeAmount: int option, automaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsPaymentIntent option, canceledAt: DateTime option, cancellationReason: PaymentIntentCancellationReason option, captureMethod: PaymentIntentCaptureMethod, clientSecret: string option, confirmationMethod: PaymentIntentConfirmationMethod, created: DateTime, currency: string, customer: PaymentIntentCustomer'AnyOf option, description: string option, id: string, invoice: PaymentIntentInvoice'AnyOf option, lastPaymentError: ApiErrors option, livemode: bool, metadata: Map<string, string>, nextAction: PaymentIntentNextAction option, onBehalfOf: PaymentIntentOnBehalfOf'AnyOf option, paymentMethod: PaymentIntentPaymentMethod'AnyOf option, paymentMethodOptions: PaymentIntentPaymentMethodOptions option, paymentMethodTypes: string list, processing: PaymentIntentProcessing option, receiptEmail: string option, review: PaymentIntentReview'AnyOf option, setupFutureUsage: PaymentIntentSetupFutureUsage option, shipping: Shipping option, source: PaymentIntentSource'AnyOf option, statementDescriptor: string option, statementDescriptorSuffix: string option, status: PaymentIntentStatus, transferData: TransferData option, transferGroup: string option, ?amountDetails: PaymentFlowsAmountDetails, ?latestCharge: PaymentIntentLatestCharge'AnyOf option) =
            {
                PaymentIntent.Amount = amount //required
                PaymentIntent.AmountCapturable = amountCapturable //required
                PaymentIntent.AmountReceived = amountReceived //required
                PaymentIntent.Application = application //required
                PaymentIntent.ApplicationFeeAmount = applicationFeeAmount //required
                PaymentIntent.AutomaticPaymentMethods = automaticPaymentMethods //required
                PaymentIntent.CanceledAt = canceledAt //required
                PaymentIntent.CancellationReason = cancellationReason //required
                PaymentIntent.CaptureMethod = captureMethod //required
                PaymentIntent.ClientSecret = clientSecret //required
                PaymentIntent.ConfirmationMethod = confirmationMethod //required
                PaymentIntent.Created = created //required
                PaymentIntent.Currency = currency //required
                PaymentIntent.Customer = customer //required
                PaymentIntent.Description = description //required
                PaymentIntent.Id = id //required
                PaymentIntent.Invoice = invoice //required
                PaymentIntent.LastPaymentError = lastPaymentError //required
                PaymentIntent.Livemode = livemode //required
                PaymentIntent.Metadata = metadata //required
                PaymentIntent.NextAction = nextAction //required
                PaymentIntent.OnBehalfOf = onBehalfOf //required
                PaymentIntent.PaymentMethod = paymentMethod //required
                PaymentIntent.PaymentMethodOptions = paymentMethodOptions //required
                PaymentIntent.PaymentMethodTypes = paymentMethodTypes //required
                PaymentIntent.Processing = processing //required
                PaymentIntent.ReceiptEmail = receiptEmail //required
                PaymentIntent.Review = review //required
                PaymentIntent.SetupFutureUsage = setupFutureUsage //required
                PaymentIntent.Shipping = shipping //required
                PaymentIntent.Source = source //required
                PaymentIntent.StatementDescriptor = statementDescriptor //required
                PaymentIntent.StatementDescriptorSuffix = statementDescriptorSuffix //required
                PaymentIntent.Status = status //required
                PaymentIntent.TransferData = transferData //required
                PaymentIntent.TransferGroup = transferGroup //required
                PaymentIntent.AmountDetails = amountDetails
                PaymentIntent.LatestCharge = latestCharge |> Option.flatten
            }

    and PaymentIntentApplication'AnyOf =
        | String of string
        | Application of Application

    and PaymentIntentCancellationReason =
        | Abandoned
        | Automatic
        | Duplicate
        | FailedInvoice
        | Fraudulent
        | RequestedByCustomer
        | VoidInvoice

    and PaymentIntentCaptureMethod =
        | Automatic
        | AutomaticAsync
        | Manual

    and PaymentIntentConfirmationMethod =
        | Automatic
        | Manual

    and PaymentIntentCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and PaymentIntentInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and PaymentIntentLatestCharge'AnyOf =
        | String of string
        | Charge of Charge

    and PaymentIntentOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and PaymentIntentPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and PaymentIntentReview'AnyOf =
        | String of string
        | Review of Review

    and PaymentIntentSetupFutureUsage =
        | OffSession
        | OnSession

    and PaymentIntentSource'AnyOf =
        | String of string
        | PaymentSource of PaymentSource
        | DeletedPaymentSource of DeletedPaymentSource

    and PaymentIntentStatus =
        | Canceled
        | Processing
        | RequiresAction
        | RequiresCapture
        | RequiresConfirmation
        | RequiresPaymentMethod
        | Succeeded

    and PaymentIntentCardProcessing = {
        CustomerNotification: PaymentIntentProcessingCustomerNotification option
    }
    with
        static member New (?customerNotification: PaymentIntentProcessingCustomerNotification) =
            {
                PaymentIntentCardProcessing.CustomerNotification = customerNotification
            }

    and PaymentIntentNextAction = {
        AlipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect option
        BoletoDisplayDetails: PaymentIntentNextActionBoleto option
        CardAwaitNotification: PaymentIntentNextActionCardAwaitNotification option
        CashappHandleRedirectOrDisplayQrCode: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode option
        DisplayBankTransferInstructions: PaymentIntentNextActionDisplayBankTransferInstructions option
        KonbiniDisplayDetails: PaymentIntentNextActionKonbini option
        OxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails option
        PaynowDisplayQrCode: PaymentIntentNextActionPaynowDisplayQrCode option
        PixDisplayQrCode: PaymentIntentNextActionPixDisplayQrCode option
        PromptpayDisplayQrCode: PaymentIntentNextActionPromptpayDisplayQrCode option
        RedirectToUrl: PaymentIntentNextActionRedirectToUrl option
        ///Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
        Type: PaymentIntentNextActionType
        ///When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
        UseStripeSdk: string option
        VerifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits option
        WechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode option
        WechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp option
        WechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp option
    }
    with
        static member New (``type``: PaymentIntentNextActionType, ?alipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect, ?boletoDisplayDetails: PaymentIntentNextActionBoleto, ?cardAwaitNotification: PaymentIntentNextActionCardAwaitNotification, ?cashappHandleRedirectOrDisplayQrCode: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode, ?displayBankTransferInstructions: PaymentIntentNextActionDisplayBankTransferInstructions, ?konbiniDisplayDetails: PaymentIntentNextActionKonbini, ?oxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails, ?paynowDisplayQrCode: PaymentIntentNextActionPaynowDisplayQrCode, ?pixDisplayQrCode: PaymentIntentNextActionPixDisplayQrCode, ?promptpayDisplayQrCode: PaymentIntentNextActionPromptpayDisplayQrCode, ?redirectToUrl: PaymentIntentNextActionRedirectToUrl, ?useStripeSdk: string, ?verifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits, ?wechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode, ?wechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp, ?wechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp) =
            {
                PaymentIntentNextAction.Type = ``type`` //required
                PaymentIntentNextAction.AlipayHandleRedirect = alipayHandleRedirect
                PaymentIntentNextAction.BoletoDisplayDetails = boletoDisplayDetails
                PaymentIntentNextAction.CardAwaitNotification = cardAwaitNotification
                PaymentIntentNextAction.CashappHandleRedirectOrDisplayQrCode = cashappHandleRedirectOrDisplayQrCode
                PaymentIntentNextAction.DisplayBankTransferInstructions = displayBankTransferInstructions
                PaymentIntentNextAction.KonbiniDisplayDetails = konbiniDisplayDetails
                PaymentIntentNextAction.OxxoDisplayDetails = oxxoDisplayDetails
                PaymentIntentNextAction.PaynowDisplayQrCode = paynowDisplayQrCode
                PaymentIntentNextAction.PixDisplayQrCode = pixDisplayQrCode
                PaymentIntentNextAction.PromptpayDisplayQrCode = promptpayDisplayQrCode
                PaymentIntentNextAction.RedirectToUrl = redirectToUrl
                PaymentIntentNextAction.UseStripeSdk = useStripeSdk
                PaymentIntentNextAction.VerifyWithMicrodeposits = verifyWithMicrodeposits
                PaymentIntentNextAction.WechatPayDisplayQrCode = wechatPayDisplayQrCode
                PaymentIntentNextAction.WechatPayRedirectToAndroidApp = wechatPayRedirectToAndroidApp
                PaymentIntentNextAction.WechatPayRedirectToIosApp = wechatPayRedirectToIosApp
            }

    and PaymentIntentNextActionType =
        | RedirectToUrl
        | UseStripeSdk
        | AlipayHandleRedirect
        | OxxoDisplayDetails
        | VerifyWithMicrodeposits

    and PaymentIntentNextActionAlipayHandleRedirect = {
        ///The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
        NativeData: string option
        ///The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
        NativeUrl: string option
        ///If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
        ReturnUrl: string option
        ///The URL you must redirect your customer to in order to authenticate the payment.
        Url: string option
    }
    with
        static member New (nativeData: string option, nativeUrl: string option, returnUrl: string option, url: string option) =
            {
                PaymentIntentNextActionAlipayHandleRedirect.NativeData = nativeData //required
                PaymentIntentNextActionAlipayHandleRedirect.NativeUrl = nativeUrl //required
                PaymentIntentNextActionAlipayHandleRedirect.ReturnUrl = returnUrl //required
                PaymentIntentNextActionAlipayHandleRedirect.Url = url //required
            }

    and PaymentIntentNextActionBoleto = {
        ///The timestamp after which the boleto expires.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
        HostedVoucherUrl: string option
        ///The boleto number.
        Number: string option
        ///The URL to the downloadable boleto voucher PDF.
        Pdf: string option
    }
    with
        static member New (expiresAt: DateTime option, hostedVoucherUrl: string option, number: string option, pdf: string option) =
            {
                PaymentIntentNextActionBoleto.ExpiresAt = expiresAt //required
                PaymentIntentNextActionBoleto.HostedVoucherUrl = hostedVoucherUrl //required
                PaymentIntentNextActionBoleto.Number = number //required
                PaymentIntentNextActionBoleto.Pdf = pdf //required
            }

    and PaymentIntentNextActionCardAwaitNotification = {
        ///The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ChargeAttemptAt: DateTime option
        ///For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
        CustomerApprovalRequired: bool option
    }
    with
        static member New (chargeAttemptAt: DateTime option, customerApprovalRequired: bool option) =
            {
                PaymentIntentNextActionCardAwaitNotification.ChargeAttemptAt = chargeAttemptAt //required
                PaymentIntentNextActionCardAwaitNotification.CustomerApprovalRequired = customerApprovalRequired //required
            }

    and PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode = {
        ///The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration.
        HostedInstructionsUrl: string
        ///The url for mobile redirect based auth
        MobileAuthUrl: string
        QrCode: PaymentIntentNextActionCashappQrCode
    }
    with
        static member New (hostedInstructionsUrl: string, mobileAuthUrl: string, qrCode: PaymentIntentNextActionCashappQrCode) =
            {
                PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode.HostedInstructionsUrl = hostedInstructionsUrl //required
                PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode.MobileAuthUrl = mobileAuthUrl //required
                PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode.QrCode = qrCode //required
            }

    and PaymentIntentNextActionCashappQrCode = {
        ///The date (unix timestamp) when the QR code expires.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
        ///The image_url_png string used to render QR code
        ImageUrlPng: string
        ///The image_url_svg string used to render QR code
        ImageUrlSvg: string
    }
    with
        static member New (expiresAt: DateTime, imageUrlPng: string, imageUrlSvg: string) =
            {
                PaymentIntentNextActionCashappQrCode.ExpiresAt = expiresAt //required
                PaymentIntentNextActionCashappQrCode.ImageUrlPng = imageUrlPng //required
                PaymentIntentNextActionCashappQrCode.ImageUrlSvg = imageUrlSvg //required
            }

    and PaymentIntentNextActionDisplayBankTransferInstructions = {
        ///The remaining amount that needs to be transferred to complete the payment.
        AmountRemaining: int option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string option
        ///A list of financial addresses that can be used to fund the customer balance
        FinancialAddresses: FundingInstructionsBankTransferFinancialAddress list option
        ///A link to a hosted page that guides your customer through completing the transfer.
        HostedInstructionsUrl: string option
        ///A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
        Reference: string option
        ///Type of bank transfer
        Type: PaymentIntentNextActionDisplayBankTransferInstructionsType
    }
    with
        static member New (amountRemaining: int option, currency: string option, hostedInstructionsUrl: string option, reference: string option, ``type``: PaymentIntentNextActionDisplayBankTransferInstructionsType, ?financialAddresses: FundingInstructionsBankTransferFinancialAddress list) =
            {
                PaymentIntentNextActionDisplayBankTransferInstructions.AmountRemaining = amountRemaining //required
                PaymentIntentNextActionDisplayBankTransferInstructions.Currency = currency //required
                PaymentIntentNextActionDisplayBankTransferInstructions.HostedInstructionsUrl = hostedInstructionsUrl //required
                PaymentIntentNextActionDisplayBankTransferInstructions.Reference = reference //required
                PaymentIntentNextActionDisplayBankTransferInstructions.Type = ``type`` //required
                PaymentIntentNextActionDisplayBankTransferInstructions.FinancialAddresses = financialAddresses
            }

    and PaymentIntentNextActionDisplayBankTransferInstructionsType =
        | EuBankTransfer
        | GbBankTransfer
        | JpBankTransfer
        | MxBankTransfer
        | UsBankTransfer

    and PaymentIntentNextActionDisplayOxxoDetails = {
        ///The timestamp after which the OXXO voucher expires.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAfter: DateTime option
        ///The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
        HostedVoucherUrl: string option
        ///OXXO reference number.
        Number: string option
    }
    with
        static member New (expiresAfter: DateTime option, hostedVoucherUrl: string option, number: string option) =
            {
                PaymentIntentNextActionDisplayOxxoDetails.ExpiresAfter = expiresAfter //required
                PaymentIntentNextActionDisplayOxxoDetails.HostedVoucherUrl = hostedVoucherUrl //required
                PaymentIntentNextActionDisplayOxxoDetails.Number = number //required
            }

    and PaymentIntentNextActionKonbini = {
        ///The timestamp at which the pending Konbini payment expires.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
        ///The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.
        HostedVoucherUrl: string option
        Stores: PaymentIntentNextActionKonbiniStores
    }
    with
        static member New (expiresAt: DateTime, hostedVoucherUrl: string option, stores: PaymentIntentNextActionKonbiniStores) =
            {
                PaymentIntentNextActionKonbini.ExpiresAt = expiresAt //required
                PaymentIntentNextActionKonbini.HostedVoucherUrl = hostedVoucherUrl //required
                PaymentIntentNextActionKonbini.Stores = stores //required
            }

    and PaymentIntentNextActionKonbiniFamilymart = {
        ///The confirmation number.
        ConfirmationNumber: string option
        ///The payment code.
        PaymentCode: string
    }
    with
        static member New (paymentCode: string, ?confirmationNumber: string) =
            {
                PaymentIntentNextActionKonbiniFamilymart.PaymentCode = paymentCode //required
                PaymentIntentNextActionKonbiniFamilymart.ConfirmationNumber = confirmationNumber
            }

    and PaymentIntentNextActionKonbiniLawson = {
        ///The confirmation number.
        ConfirmationNumber: string option
        ///The payment code.
        PaymentCode: string
    }
    with
        static member New (paymentCode: string, ?confirmationNumber: string) =
            {
                PaymentIntentNextActionKonbiniLawson.PaymentCode = paymentCode //required
                PaymentIntentNextActionKonbiniLawson.ConfirmationNumber = confirmationNumber
            }

    and PaymentIntentNextActionKonbiniMinistop = {
        ///The confirmation number.
        ConfirmationNumber: string option
        ///The payment code.
        PaymentCode: string
    }
    with
        static member New (paymentCode: string, ?confirmationNumber: string) =
            {
                PaymentIntentNextActionKonbiniMinistop.PaymentCode = paymentCode //required
                PaymentIntentNextActionKonbiniMinistop.ConfirmationNumber = confirmationNumber
            }

    and PaymentIntentNextActionKonbiniSeicomart = {
        ///The confirmation number.
        ConfirmationNumber: string option
        ///The payment code.
        PaymentCode: string
    }
    with
        static member New (paymentCode: string, ?confirmationNumber: string) =
            {
                PaymentIntentNextActionKonbiniSeicomart.PaymentCode = paymentCode //required
                PaymentIntentNextActionKonbiniSeicomart.ConfirmationNumber = confirmationNumber
            }

    and PaymentIntentNextActionKonbiniStores = {
        ///FamilyMart instruction details.
        Familymart: PaymentIntentNextActionKonbiniFamilymart option
        ///Lawson instruction details.
        Lawson: PaymentIntentNextActionKonbiniLawson option
        ///Ministop instruction details.
        Ministop: PaymentIntentNextActionKonbiniMinistop option
        ///Seicomart instruction details.
        Seicomart: PaymentIntentNextActionKonbiniSeicomart option
    }
    with
        static member New (familymart: PaymentIntentNextActionKonbiniFamilymart option, lawson: PaymentIntentNextActionKonbiniLawson option, ministop: PaymentIntentNextActionKonbiniMinistop option, seicomart: PaymentIntentNextActionKonbiniSeicomart option) =
            {
                PaymentIntentNextActionKonbiniStores.Familymart = familymart //required
                PaymentIntentNextActionKonbiniStores.Lawson = lawson //required
                PaymentIntentNextActionKonbiniStores.Ministop = ministop //required
                PaymentIntentNextActionKonbiniStores.Seicomart = seicomart //required
            }

    and PaymentIntentNextActionPaynowDisplayQrCode = {
        ///The raw data string used to generate QR code, it should be used together with QR code library.
        Data: string
        ///The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code.
        HostedInstructionsUrl: string option
        ///The image_url_png string used to render QR code
        ImageUrlPng: string
        ///The image_url_svg string used to render QR code
        ImageUrlSvg: string
    }
    with
        static member New (data: string, hostedInstructionsUrl: string option, imageUrlPng: string, imageUrlSvg: string) =
            {
                PaymentIntentNextActionPaynowDisplayQrCode.Data = data //required
                PaymentIntentNextActionPaynowDisplayQrCode.HostedInstructionsUrl = hostedInstructionsUrl //required
                PaymentIntentNextActionPaynowDisplayQrCode.ImageUrlPng = imageUrlPng //required
                PaymentIntentNextActionPaynowDisplayQrCode.ImageUrlSvg = imageUrlSvg //required
            }

    and PaymentIntentNextActionPixDisplayQrCode = {
        ///The raw data string used to generate QR code, it should be used together with QR code library.
        Data: string option
        ///The date (unix timestamp) when the PIX expires.
        ExpiresAt: int option
        ///The URL to the hosted pix instructions page, which allows customers to view the pix QR code.
        HostedInstructionsUrl: string option
        ///The image_url_png string used to render png QR code
        ImageUrlPng: string option
        ///The image_url_svg string used to render svg QR code
        ImageUrlSvg: string option
    }
    with
        static member New (?data: string, ?expiresAt: int, ?hostedInstructionsUrl: string, ?imageUrlPng: string, ?imageUrlSvg: string) =
            {
                PaymentIntentNextActionPixDisplayQrCode.Data = data
                PaymentIntentNextActionPixDisplayQrCode.ExpiresAt = expiresAt
                PaymentIntentNextActionPixDisplayQrCode.HostedInstructionsUrl = hostedInstructionsUrl
                PaymentIntentNextActionPixDisplayQrCode.ImageUrlPng = imageUrlPng
                PaymentIntentNextActionPixDisplayQrCode.ImageUrlSvg = imageUrlSvg
            }

    and PaymentIntentNextActionPromptpayDisplayQrCode = {
        ///The raw data string used to generate QR code, it should be used together with QR code library.
        Data: string
        ///The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.
        HostedInstructionsUrl: string
        ///The PNG path used to render the QR code, can be used as the source in an HTML img tag
        ImageUrlPng: string
        ///The SVG path used to render the QR code, can be used as the source in an HTML img tag
        ImageUrlSvg: string
    }
    with
        static member New (data: string, hostedInstructionsUrl: string, imageUrlPng: string, imageUrlSvg: string) =
            {
                PaymentIntentNextActionPromptpayDisplayQrCode.Data = data //required
                PaymentIntentNextActionPromptpayDisplayQrCode.HostedInstructionsUrl = hostedInstructionsUrl //required
                PaymentIntentNextActionPromptpayDisplayQrCode.ImageUrlPng = imageUrlPng //required
                PaymentIntentNextActionPromptpayDisplayQrCode.ImageUrlSvg = imageUrlSvg //required
            }

    and PaymentIntentNextActionRedirectToUrl = {
        ///If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
        ReturnUrl: string option
        ///The URL you must redirect your customer to in order to authenticate the payment.
        Url: string option
    }
    with
        static member New (returnUrl: string option, url: string option) =
            {
                PaymentIntentNextActionRedirectToUrl.ReturnUrl = returnUrl //required
                PaymentIntentNextActionRedirectToUrl.Url = url //required
            }

    and PaymentIntentNextActionVerifyWithMicrodeposits = {
        ///The timestamp when the microdeposits are expected to land.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ArrivalDate: DateTime
        ///The URL for the hosted verification page, which allows customers to verify their bank account.
        HostedVerificationUrl: string
        ///The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
        MicrodepositType: PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType option
    }
    with
        static member New (arrivalDate: DateTime, hostedVerificationUrl: string, microdepositType: PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType option) =
            {
                PaymentIntentNextActionVerifyWithMicrodeposits.ArrivalDate = arrivalDate //required
                PaymentIntentNextActionVerifyWithMicrodeposits.HostedVerificationUrl = hostedVerificationUrl //required
                PaymentIntentNextActionVerifyWithMicrodeposits.MicrodepositType = microdepositType //required
            }

    and PaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType =
        | Amounts
        | DescriptorCode

    and PaymentIntentNextActionWechatPayDisplayQrCode = {
        ///The data being used to generate QR code
        Data: string
        ///The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code.
        HostedInstructionsUrl: string
        ///The base64 image data for a pre-generated QR code
        ImageDataUrl: string
        ///The image_url_png string used to render QR code
        ImageUrlPng: string
        ///The image_url_svg string used to render QR code
        ImageUrlSvg: string
    }
    with
        static member New (data: string, hostedInstructionsUrl: string, imageDataUrl: string, imageUrlPng: string, imageUrlSvg: string) =
            {
                PaymentIntentNextActionWechatPayDisplayQrCode.Data = data //required
                PaymentIntentNextActionWechatPayDisplayQrCode.HostedInstructionsUrl = hostedInstructionsUrl //required
                PaymentIntentNextActionWechatPayDisplayQrCode.ImageDataUrl = imageDataUrl //required
                PaymentIntentNextActionWechatPayDisplayQrCode.ImageUrlPng = imageUrlPng //required
                PaymentIntentNextActionWechatPayDisplayQrCode.ImageUrlSvg = imageUrlSvg //required
            }

    and PaymentIntentNextActionWechatPayRedirectToAndroidApp = {
        ///app_id is the APP ID registered on WeChat open platform
        AppId: string
        ///nonce_str is a random string
        NonceStr: string
        ///package is static value
        Package: string
        ///an unique merchant ID assigned by WeChat Pay
        PartnerId: string
        ///an unique trading ID assigned by WeChat Pay
        PrepayId: string
        ///A signature
        Sign: string
        ///Specifies the current time in epoch format
        Timestamp: string
    }
    with
        static member New (appId: string, nonceStr: string, package: string, partnerId: string, prepayId: string, sign: string, timestamp: string) =
            {
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.AppId = appId //required
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.NonceStr = nonceStr //required
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.Package = package //required
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.PartnerId = partnerId //required
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.PrepayId = prepayId //required
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.Sign = sign //required
                PaymentIntentNextActionWechatPayRedirectToAndroidApp.Timestamp = timestamp //required
            }

    and PaymentIntentNextActionWechatPayRedirectToIosApp = {
        ///An universal link that redirect to WeChat Pay app
        NativeUrl: string
    }
    with
        static member New (nativeUrl: string) =
            {
                PaymentIntentNextActionWechatPayRedirectToIosApp.NativeUrl = nativeUrl //required
            }

    and PaymentIntentPaymentMethodOptions = {
        AcssDebit: PaymentIntentPaymentMethodOptionsAcssDebit option
        Affirm: PaymentMethodOptionsAffirm option
        AfterpayClearpay: PaymentMethodOptionsAfterpayClearpay option
        Alipay: PaymentMethodOptionsAlipay option
        AuBecsDebit: PaymentIntentPaymentMethodOptionsAuBecsDebit option
        BacsDebit: PaymentMethodOptionsBacsDebit option
        Bancontact: PaymentMethodOptionsBancontact option
        Blik: PaymentIntentPaymentMethodOptionsBlik option
        Boleto: PaymentMethodOptionsBoleto option
        Card: PaymentIntentPaymentMethodOptionsCard option
        CardPresent: PaymentMethodOptionsCardPresent option
        Cashapp: PaymentMethodOptionsCashapp option
        CustomerBalance: PaymentMethodOptionsCustomerBalance option
        Eps: PaymentIntentPaymentMethodOptionsEps option
        Fpx: PaymentMethodOptionsFpx option
        Giropay: PaymentMethodOptionsGiropay option
        Grabpay: PaymentMethodOptionsGrabpay option
        Ideal: PaymentMethodOptionsIdeal option
        InteracPresent: PaymentMethodOptionsInteracPresent option
        Klarna: PaymentMethodOptionsKlarna option
        Konbini: PaymentMethodOptionsKonbini option
        Link: PaymentIntentPaymentMethodOptionsLink option
        Oxxo: PaymentMethodOptionsOxxo option
        [<JsonField(Name="p24")>]P24: PaymentMethodOptionsP24 option
        Paynow: PaymentMethodOptionsPaynow option
        Paypal: PaymentMethodOptionsPaypal option
        Pix: PaymentMethodOptionsPix option
        Promptpay: PaymentMethodOptionsPromptpay option
        SepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit option
        Sofort: PaymentMethodOptionsSofort option
        UsBankAccount: PaymentIntentPaymentMethodOptionsUsBankAccount option
        WechatPay: PaymentMethodOptionsWechatPay option
        Zip: PaymentMethodOptionsZip option
    }
    with
        static member New (?acssDebit: PaymentIntentPaymentMethodOptionsAcssDebit, ?affirm: PaymentMethodOptionsAffirm, ?afterpayClearpay: PaymentMethodOptionsAfterpayClearpay, ?alipay: PaymentMethodOptionsAlipay, ?auBecsDebit: PaymentIntentPaymentMethodOptionsAuBecsDebit, ?bacsDebit: PaymentMethodOptionsBacsDebit, ?bancontact: PaymentMethodOptionsBancontact, ?blik: PaymentIntentPaymentMethodOptionsBlik, ?boleto: PaymentMethodOptionsBoleto, ?card: PaymentIntentPaymentMethodOptionsCard, ?cardPresent: PaymentMethodOptionsCardPresent, ?cashapp: PaymentMethodOptionsCashapp, ?customerBalance: PaymentMethodOptionsCustomerBalance, ?eps: PaymentIntentPaymentMethodOptionsEps, ?fpx: PaymentMethodOptionsFpx, ?giropay: PaymentMethodOptionsGiropay, ?grabpay: PaymentMethodOptionsGrabpay, ?ideal: PaymentMethodOptionsIdeal, ?interacPresent: PaymentMethodOptionsInteracPresent, ?klarna: PaymentMethodOptionsKlarna, ?konbini: PaymentMethodOptionsKonbini, ?link: PaymentIntentPaymentMethodOptionsLink, ?oxxo: PaymentMethodOptionsOxxo, ?p24: PaymentMethodOptionsP24, ?paynow: PaymentMethodOptionsPaynow, ?paypal: PaymentMethodOptionsPaypal, ?pix: PaymentMethodOptionsPix, ?promptpay: PaymentMethodOptionsPromptpay, ?sepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit, ?sofort: PaymentMethodOptionsSofort, ?usBankAccount: PaymentIntentPaymentMethodOptionsUsBankAccount, ?wechatPay: PaymentMethodOptionsWechatPay, ?zip: PaymentMethodOptionsZip) =
            {
                PaymentIntentPaymentMethodOptions.AcssDebit = acssDebit
                PaymentIntentPaymentMethodOptions.Affirm = affirm
                PaymentIntentPaymentMethodOptions.AfterpayClearpay = afterpayClearpay
                PaymentIntentPaymentMethodOptions.Alipay = alipay
                PaymentIntentPaymentMethodOptions.AuBecsDebit = auBecsDebit
                PaymentIntentPaymentMethodOptions.BacsDebit = bacsDebit
                PaymentIntentPaymentMethodOptions.Bancontact = bancontact
                PaymentIntentPaymentMethodOptions.Blik = blik
                PaymentIntentPaymentMethodOptions.Boleto = boleto
                PaymentIntentPaymentMethodOptions.Card = card
                PaymentIntentPaymentMethodOptions.CardPresent = cardPresent
                PaymentIntentPaymentMethodOptions.Cashapp = cashapp
                PaymentIntentPaymentMethodOptions.CustomerBalance = customerBalance
                PaymentIntentPaymentMethodOptions.Eps = eps
                PaymentIntentPaymentMethodOptions.Fpx = fpx
                PaymentIntentPaymentMethodOptions.Giropay = giropay
                PaymentIntentPaymentMethodOptions.Grabpay = grabpay
                PaymentIntentPaymentMethodOptions.Ideal = ideal
                PaymentIntentPaymentMethodOptions.InteracPresent = interacPresent
                PaymentIntentPaymentMethodOptions.Klarna = klarna
                PaymentIntentPaymentMethodOptions.Konbini = konbini
                PaymentIntentPaymentMethodOptions.Link = link
                PaymentIntentPaymentMethodOptions.Oxxo = oxxo
                PaymentIntentPaymentMethodOptions.P24 = p24
                PaymentIntentPaymentMethodOptions.Paynow = paynow
                PaymentIntentPaymentMethodOptions.Paypal = paypal
                PaymentIntentPaymentMethodOptions.Pix = pix
                PaymentIntentPaymentMethodOptions.Promptpay = promptpay
                PaymentIntentPaymentMethodOptions.SepaDebit = sepaDebit
                PaymentIntentPaymentMethodOptions.Sofort = sofort
                PaymentIntentPaymentMethodOptions.UsBankAccount = usBankAccount
                PaymentIntentPaymentMethodOptions.WechatPay = wechatPay
                PaymentIntentPaymentMethodOptions.Zip = zip
            }

    and PaymentIntentPaymentMethodOptionsAcssDebit = {
        MandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage option
        ///Bank account verification method.
        VerificationMethod: PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod option
    }
    with
        static member New (?mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit, ?setupFutureUsage: PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage, ?verificationMethod: PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod) =
            {
                PaymentIntentPaymentMethodOptionsAcssDebit.MandateOptions = mandateOptions
                PaymentIntentPaymentMethodOptionsAcssDebit.SetupFutureUsage = setupFutureUsage
                PaymentIntentPaymentMethodOptionsAcssDebit.VerificationMethod = verificationMethod
            }

    and PaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and PaymentIntentPaymentMethodOptionsAuBecsDebit = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage) =
            {
                PaymentIntentPaymentMethodOptionsAuBecsDebit.SetupFutureUsage = setupFutureUsage
            }

    and PaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentIntentPaymentMethodOptionsBlik = {
        PaymentIntentPaymentMethodOptionsBlik: string option
    }
    with
        static member New (?paymentIntentPaymentMethodOptionsBlik: string option) =
            {
                PaymentIntentPaymentMethodOptionsBlik.PaymentIntentPaymentMethodOptionsBlik = paymentIntentPaymentMethodOptionsBlik |> Option.flatten
            }

    and PaymentIntentPaymentMethodOptionsCard = {
        ///Installment details for this payment (Mexico only).
        ///For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
        Installments: PaymentMethodOptionsCardInstallments option
        ///Configuration options for setting up an eMandate for cards issued in India.
        MandateOptions: PaymentMethodOptionsCardMandateOptions option
        ///Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
        Network: PaymentIntentPaymentMethodOptionsCardNetwork option
        ///We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
        RequestThreeDSecure: PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentPaymentMethodOptionsCardSetupFutureUsage option
        ///Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
        StatementDescriptorSuffixKana: string option
        ///Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
        StatementDescriptorSuffixKanji: string option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"

        static member New (installments: PaymentMethodOptionsCardInstallments option, mandateOptions: PaymentMethodOptionsCardMandateOptions option, network: PaymentIntentPaymentMethodOptionsCardNetwork option, requestThreeDSecure: PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure option, ?setupFutureUsage: PaymentIntentPaymentMethodOptionsCardSetupFutureUsage, ?statementDescriptorSuffixKana: string, ?statementDescriptorSuffixKanji: string) =
            {
                PaymentIntentPaymentMethodOptionsCard.Installments = installments //required
                PaymentIntentPaymentMethodOptionsCard.MandateOptions = mandateOptions //required
                PaymentIntentPaymentMethodOptionsCard.Network = network //required
                PaymentIntentPaymentMethodOptionsCard.RequestThreeDSecure = requestThreeDSecure //required
                PaymentIntentPaymentMethodOptionsCard.SetupFutureUsage = setupFutureUsage
                PaymentIntentPaymentMethodOptionsCard.StatementDescriptorSuffixKana = statementDescriptorSuffixKana
                PaymentIntentPaymentMethodOptionsCard.StatementDescriptorSuffixKanji = statementDescriptorSuffixKanji
            }

    and PaymentIntentPaymentMethodOptionsCardNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Unknown
        | Visa

    and PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure =
        | Any
        | Automatic
        | ChallengeOnly

    and PaymentIntentPaymentMethodOptionsCardSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentIntentPaymentMethodOptionsEps () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentIntentPaymentMethodOptionsLink = {
        ///[Deprecated] This is a legacy parameter that no longer has any function.
        PersistentToken: string option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"

        static member New (persistentToken: string option, ?setupFutureUsage: PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage) =
            {
                PaymentIntentPaymentMethodOptionsLink.PersistentToken = persistentToken //required
                PaymentIntentPaymentMethodOptionsLink.SetupFutureUsage = setupFutureUsage
            }

    and PaymentIntentPaymentMethodOptionsLinkSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
        ///A URL for custom mandate text
        CustomMandateUrl: string option
        ///Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
        IntervalDescription: string option
        ///Payment schedule for the mandate.
        PaymentSchedule: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule option
        ///Transaction type of the mandate.
        TransactionType: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType option
    }
    with
        static member New (intervalDescription: string option, paymentSchedule: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule option, transactionType: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType option, ?customMandateUrl: string) =
            {
                PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit.IntervalDescription = intervalDescription //required
                PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit.PaymentSchedule = paymentSchedule //required
                PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit.TransactionType = transactionType //required
                PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit.CustomMandateUrl = customMandateUrl
            }

    and PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule =
        | Combined
        | Interval
        | Sporadic

    and PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType =
        | Business
        | Personal

    and PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit = {
        PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit: string option
    }
    with
        static member New (?paymentIntentPaymentMethodOptionsMandateOptionsSepaDebit: string option) =
            {
                PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit.PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit = paymentIntentPaymentMethodOptionsMandateOptionsSepaDebit |> Option.flatten
            }

    and PaymentIntentPaymentMethodOptionsSepaDebit = {
        MandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage option
    }
    with
        static member New (?mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit, ?setupFutureUsage: PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage) =
            {
                PaymentIntentPaymentMethodOptionsSepaDebit.MandateOptions = mandateOptions
                PaymentIntentPaymentMethodOptionsSepaDebit.SetupFutureUsage = setupFutureUsage
            }

    and PaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentIntentPaymentMethodOptionsUsBankAccount = {
        FinancialConnections: LinkedAccountOptionsUsBankAccount option
        ///Preferred transaction settlement speed
        PreferredSettlementSpeed: PaymentIntentPaymentMethodOptionsUsBankAccountPreferredSettlementSpeed option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage option
        ///Bank account verification method.
        VerificationMethod: PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod option
    }
    with
        static member New (?financialConnections: LinkedAccountOptionsUsBankAccount, ?preferredSettlementSpeed: PaymentIntentPaymentMethodOptionsUsBankAccountPreferredSettlementSpeed, ?setupFutureUsage: PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage, ?verificationMethod: PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod) =
            {
                PaymentIntentPaymentMethodOptionsUsBankAccount.FinancialConnections = financialConnections
                PaymentIntentPaymentMethodOptionsUsBankAccount.PreferredSettlementSpeed = preferredSettlementSpeed
                PaymentIntentPaymentMethodOptionsUsBankAccount.SetupFutureUsage = setupFutureUsage
                PaymentIntentPaymentMethodOptionsUsBankAccount.VerificationMethod = verificationMethod
            }

    and PaymentIntentPaymentMethodOptionsUsBankAccountPreferredSettlementSpeed =
        | Fastest
        | Standard

    and PaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and PaymentIntentProcessing = {
        Card: PaymentIntentCardProcessing option
    }
    with
        ///Type of the payment method for which payment is in `processing` state, one of `card`.
        member _.Type = "card"

        static member New (?card: PaymentIntentCardProcessing) =
            {
                PaymentIntentProcessing.Card = card
            }

    and PaymentIntentProcessingCustomerNotification = {
        ///Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
        ApprovalRequested: bool option
        ///If customer approval is required, they need to provide approval before this time.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CompletesAt: DateTime option
    }
    with
        static member New (approvalRequested: bool option, completesAt: DateTime option) =
            {
                PaymentIntentProcessingCustomerNotification.ApprovalRequested = approvalRequested //required
                PaymentIntentProcessingCustomerNotification.CompletesAt = completesAt //required
            }

    and PaymentIntentTypeSpecificPaymentMethodOptionsClient = {
        ///Controls when the funds will be captured from the customer's account.
        CaptureMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod option
        Installments: PaymentFlowsInstallmentOptions option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage option
        ///Bank account verification method.
        VerificationMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod option
    }
    with
        static member New (?captureMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod, ?installments: PaymentFlowsInstallmentOptions, ?setupFutureUsage: PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage, ?verificationMethod: PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod) =
            {
                PaymentIntentTypeSpecificPaymentMethodOptionsClient.CaptureMethod = captureMethod
                PaymentIntentTypeSpecificPaymentMethodOptionsClient.Installments = installments
                PaymentIntentTypeSpecificPaymentMethodOptionsClient.SetupFutureUsage = setupFutureUsage
                PaymentIntentTypeSpecificPaymentMethodOptionsClient.VerificationMethod = verificationMethod
            }

    and PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod =
        | Manual
        | ManualPreferred

    and PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    ///A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
    ///When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
    ///Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
    and PaymentLink = {
        ///Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
        Active: bool
        AfterCompletion: PaymentLinksResourceAfterCompletion
        ///Whether user redeemable promotion codes are enabled.
        AllowPromotionCodes: bool
        ///The ID of the Connect application that created the Payment Link.
        Application: PaymentLinkApplication'AnyOf option
        ///The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
        ApplicationFeeAmount: int option
        ///This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
        ApplicationFeePercent: decimal option
        AutomaticTax: PaymentLinksResourceAutomaticTax
        ///Configuration for collecting the customer's billing address.
        BillingAddressCollection: PaymentLinkBillingAddressCollection
        ///When set, provides configuration to gather active consent from customers.
        ConsentCollection: PaymentLinksResourceConsentCollection option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Collect additional information from your customer using custom fields. Up to 2 fields are supported.
        CustomFields: PaymentLinksResourceCustomFields list
        CustomText: PaymentLinksResourceCustomText
        ///Configuration for Customer creation during checkout.
        CustomerCreation: PaymentLinkCustomerCreation
        ///Unique identifier for the object.
        Id: string
        ///Configuration for creating invoice for payment mode payment links.
        InvoiceCreation: PaymentLinksResourceInvoiceCreation option
        ///The line items representing what is being sold.
        LineItems: PaymentLinkLineItems option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
        OnBehalfOf: PaymentLinkOnBehalfOf'AnyOf option
        ///Indicates the parameters to be passed to PaymentIntent creation during checkout.
        PaymentIntentData: PaymentLinksResourcePaymentIntentData option
        ///Configuration for collecting a payment method during checkout.
        PaymentMethodCollection: PaymentLinkPaymentMethodCollection
        ///The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
        PaymentMethodTypes: PaymentLinkPaymentMethodTypes list option
        PhoneNumberCollection: PaymentLinksResourcePhoneNumberCollection
        ///Configuration for collecting the customer's shipping address.
        ShippingAddressCollection: PaymentLinksResourceShippingAddressCollection option
        ///The shipping rate options applied to the session.
        ShippingOptions: PaymentLinksResourceShippingOption list
        ///Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
        SubmitType: PaymentLinkSubmitType
        ///When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
        SubscriptionData: PaymentLinksResourceSubscriptionData option
        TaxIdCollection: PaymentLinksResourceTaxIdCollection
        ///The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.
        TransferData: PaymentLinksResourceTransferData option
        ///The public URL that can be shared with customers.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "payment_link"

        static member New (active: bool, afterCompletion: PaymentLinksResourceAfterCompletion, allowPromotionCodes: bool, application: PaymentLinkApplication'AnyOf option, applicationFeeAmount: int option, applicationFeePercent: decimal option, automaticTax: PaymentLinksResourceAutomaticTax, billingAddressCollection: PaymentLinkBillingAddressCollection, consentCollection: PaymentLinksResourceConsentCollection option, currency: string, customFields: PaymentLinksResourceCustomFields list, customText: PaymentLinksResourceCustomText, customerCreation: PaymentLinkCustomerCreation, id: string, invoiceCreation: PaymentLinksResourceInvoiceCreation option, livemode: bool, metadata: Map<string, string>, onBehalfOf: PaymentLinkOnBehalfOf'AnyOf option, paymentIntentData: PaymentLinksResourcePaymentIntentData option, paymentMethodCollection: PaymentLinkPaymentMethodCollection, paymentMethodTypes: PaymentLinkPaymentMethodTypes list option, phoneNumberCollection: PaymentLinksResourcePhoneNumberCollection, shippingAddressCollection: PaymentLinksResourceShippingAddressCollection option, shippingOptions: PaymentLinksResourceShippingOption list, submitType: PaymentLinkSubmitType, subscriptionData: PaymentLinksResourceSubscriptionData option, taxIdCollection: PaymentLinksResourceTaxIdCollection, transferData: PaymentLinksResourceTransferData option, url: string, ?lineItems: PaymentLinkLineItems) =
            {
                PaymentLink.Active = active //required
                PaymentLink.AfterCompletion = afterCompletion //required
                PaymentLink.AllowPromotionCodes = allowPromotionCodes //required
                PaymentLink.Application = application //required
                PaymentLink.ApplicationFeeAmount = applicationFeeAmount //required
                PaymentLink.ApplicationFeePercent = applicationFeePercent //required
                PaymentLink.AutomaticTax = automaticTax //required
                PaymentLink.BillingAddressCollection = billingAddressCollection //required
                PaymentLink.ConsentCollection = consentCollection //required
                PaymentLink.Currency = currency //required
                PaymentLink.CustomFields = customFields //required
                PaymentLink.CustomText = customText //required
                PaymentLink.CustomerCreation = customerCreation //required
                PaymentLink.Id = id //required
                PaymentLink.InvoiceCreation = invoiceCreation //required
                PaymentLink.Livemode = livemode //required
                PaymentLink.Metadata = metadata //required
                PaymentLink.OnBehalfOf = onBehalfOf //required
                PaymentLink.PaymentIntentData = paymentIntentData //required
                PaymentLink.PaymentMethodCollection = paymentMethodCollection //required
                PaymentLink.PaymentMethodTypes = paymentMethodTypes //required
                PaymentLink.PhoneNumberCollection = phoneNumberCollection //required
                PaymentLink.ShippingAddressCollection = shippingAddressCollection //required
                PaymentLink.ShippingOptions = shippingOptions //required
                PaymentLink.SubmitType = submitType //required
                PaymentLink.SubscriptionData = subscriptionData //required
                PaymentLink.TaxIdCollection = taxIdCollection //required
                PaymentLink.TransferData = transferData //required
                PaymentLink.Url = url //required
                PaymentLink.LineItems = lineItems
            }

    and PaymentLinkApplication'AnyOf =
        | String of string
        | Application of Application
        | DeletedApplication of DeletedApplication

    and PaymentLinkBillingAddressCollection =
        | Auto
        | Required

    and PaymentLinkCustomerCreation =
        | Always
        | IfRequired

    and PaymentLinkOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and PaymentLinkPaymentMethodCollection =
        | Always
        | IfRequired

    and PaymentLinkSubmitType =
        | Auto
        | Book
        | Donate
        | Pay

    ///The line items representing what is being sold.
    and PaymentLinkLineItems = {
        ///Details about each object.
        Data: Item list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: Item list, hasMore: bool, url: string) =
            {
                PaymentLinkLineItems.Data = data //required
                PaymentLinkLineItems.HasMore = hasMore //required
                PaymentLinkLineItems.Url = url //required
            }

    and PaymentLinkPaymentMethodTypes =
        | Affirm
        | AfterpayClearpay
        | Alipay
        | AuBecsDebit
        | BacsDebit
        | Bancontact
        | Blik
        | Boleto
        | Card
        | Cashapp
        | Eps
        | Fpx
        | Giropay
        | Grabpay
        | Ideal
        | Klarna
        | Konbini
        | Link
        | Oxxo
        | P24
        | Paynow
        | Paypal
        | Pix
        | Promptpay
        | SepaDebit
        | Sofort
        | UsBankAccount
        | WechatPay

    and PaymentLinksResourceAfterCompletion = {
        HostedConfirmation: PaymentLinksResourceCompletionBehaviorConfirmationPage option
        Redirect: PaymentLinksResourceCompletionBehaviorRedirect option
        ///The specified behavior after the purchase is complete.
        Type: PaymentLinksResourceAfterCompletionType
    }
    with
        static member New (``type``: PaymentLinksResourceAfterCompletionType, ?hostedConfirmation: PaymentLinksResourceCompletionBehaviorConfirmationPage, ?redirect: PaymentLinksResourceCompletionBehaviorRedirect) =
            {
                PaymentLinksResourceAfterCompletion.Type = ``type`` //required
                PaymentLinksResourceAfterCompletion.HostedConfirmation = hostedConfirmation
                PaymentLinksResourceAfterCompletion.Redirect = redirect
            }

    and PaymentLinksResourceAfterCompletionType =
        | HostedConfirmation
        | Redirect

    and PaymentLinksResourceAutomaticTax = {
        ///If `true`, tax will be calculated automatically using the customer's location.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PaymentLinksResourceAutomaticTax.Enabled = enabled //required
            }

    and PaymentLinksResourceCompletionBehaviorConfirmationPage = {
        ///The custom message that is displayed to the customer after the purchase is complete.
        CustomMessage: string option
    }
    with
        static member New (customMessage: string option) =
            {
                PaymentLinksResourceCompletionBehaviorConfirmationPage.CustomMessage = customMessage //required
            }

    and PaymentLinksResourceCompletionBehaviorRedirect = {
        ///The URL the customer will be redirected to after the purchase is complete.
        Url: string
    }
    with
        static member New (url: string) =
            {
                PaymentLinksResourceCompletionBehaviorRedirect.Url = url //required
            }

    and PaymentLinksResourceConsentCollection = {
        ///If set to `auto`, enables the collection of customer consent for promotional communications.
        Promotions: PaymentLinksResourceConsentCollectionPromotions option
        ///If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service.
        TermsOfService: PaymentLinksResourceConsentCollectionTermsOfService option
    }
    with
        static member New (promotions: PaymentLinksResourceConsentCollectionPromotions option, termsOfService: PaymentLinksResourceConsentCollectionTermsOfService option) =
            {
                PaymentLinksResourceConsentCollection.Promotions = promotions //required
                PaymentLinksResourceConsentCollection.TermsOfService = termsOfService //required
            }

    and PaymentLinksResourceConsentCollectionPromotions =
        | Auto
        | [<JsonUnionCase("none")>] None'

    and PaymentLinksResourceConsentCollectionTermsOfService =
        | [<JsonUnionCase("none")>] None'
        | Required

    and PaymentLinksResourceCustomFields = {
        ///Configuration for `type=dropdown` fields.
        Dropdown: PaymentLinksResourceCustomFieldsDropdown option
        ///String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
        Key: string
        Label: PaymentLinksResourceCustomFieldsLabel
        ///Configuration for `type=numeric` fields.
        Numeric: PaymentLinksResourceCustomFieldsNumeric option
        ///Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
        Optional: bool
        ///Configuration for `type=text` fields.
        Text: PaymentLinksResourceCustomFieldsText option
        ///The type of the field.
        Type: PaymentLinksResourceCustomFieldsType
    }
    with
        static member New (dropdown: PaymentLinksResourceCustomFieldsDropdown option, key: string, label: PaymentLinksResourceCustomFieldsLabel, numeric: PaymentLinksResourceCustomFieldsNumeric option, optional: bool, text: PaymentLinksResourceCustomFieldsText option, ``type``: PaymentLinksResourceCustomFieldsType) =
            {
                PaymentLinksResourceCustomFields.Dropdown = dropdown //required
                PaymentLinksResourceCustomFields.Key = key //required
                PaymentLinksResourceCustomFields.Label = label //required
                PaymentLinksResourceCustomFields.Numeric = numeric //required
                PaymentLinksResourceCustomFields.Optional = optional //required
                PaymentLinksResourceCustomFields.Text = text //required
                PaymentLinksResourceCustomFields.Type = ``type`` //required
            }

    and PaymentLinksResourceCustomFieldsType =
        | Dropdown
        | Numeric
        | Text

    and PaymentLinksResourceCustomFieldsDropdown = {
        ///The options available for the customer to select. Up to 200 options allowed.
        Options: PaymentLinksResourceCustomFieldsDropdownOption list
    }
    with
        static member New (options: PaymentLinksResourceCustomFieldsDropdownOption list) =
            {
                PaymentLinksResourceCustomFieldsDropdown.Options = options //required
            }

    and PaymentLinksResourceCustomFieldsDropdownOption = {
        ///The label for the option, displayed to the customer. Up to 100 characters.
        Label: string
        ///The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
        Value: string
    }
    with
        static member New (label: string, value: string) =
            {
                PaymentLinksResourceCustomFieldsDropdownOption.Label = label //required
                PaymentLinksResourceCustomFieldsDropdownOption.Value = value //required
            }

    and PaymentLinksResourceCustomFieldsLabel = {
        ///Custom text for the label, displayed to the customer. Up to 50 characters.
        Custom: string option
    }
    with
        ///The type of the label.
        member _.Type = "custom"

        static member New (custom: string option) =
            {
                PaymentLinksResourceCustomFieldsLabel.Custom = custom //required
            }

    and PaymentLinksResourceCustomFieldsNumeric = {
        ///The maximum character length constraint for the customer's input.
        MaximumLength: int option
        ///The minimum character length requirement for the customer's input.
        MinimumLength: int option
    }
    with
        static member New (maximumLength: int option, minimumLength: int option) =
            {
                PaymentLinksResourceCustomFieldsNumeric.MaximumLength = maximumLength //required
                PaymentLinksResourceCustomFieldsNumeric.MinimumLength = minimumLength //required
            }

    and PaymentLinksResourceCustomFieldsText = {
        ///The maximum character length constraint for the customer's input.
        MaximumLength: int option
        ///The minimum character length requirement for the customer's input.
        MinimumLength: int option
    }
    with
        static member New (maximumLength: int option, minimumLength: int option) =
            {
                PaymentLinksResourceCustomFieldsText.MaximumLength = maximumLength //required
                PaymentLinksResourceCustomFieldsText.MinimumLength = minimumLength //required
            }

    and PaymentLinksResourceCustomText = {
        ///Custom text that should be displayed alongside shipping address collection.
        ShippingAddress: PaymentLinksResourceCustomTextPosition option
        ///Custom text that should be displayed alongside the payment confirmation button.
        Submit: PaymentLinksResourceCustomTextPosition option
    }
    with
        static member New (shippingAddress: PaymentLinksResourceCustomTextPosition option, submit: PaymentLinksResourceCustomTextPosition option) =
            {
                PaymentLinksResourceCustomText.ShippingAddress = shippingAddress //required
                PaymentLinksResourceCustomText.Submit = submit //required
            }

    and PaymentLinksResourceCustomTextPosition = {
        ///Text may be up to 1000 characters in length.
        Message: string
    }
    with
        static member New (message: string) =
            {
                PaymentLinksResourceCustomTextPosition.Message = message //required
            }

    and PaymentLinksResourceInvoiceCreation = {
        ///Enable creating an invoice on successful payment.
        Enabled: bool
        ///Configuration for the invoice. Default invoice values will be used if unspecified.
        InvoiceData: PaymentLinksResourceInvoiceSettings option
    }
    with
        static member New (enabled: bool, invoiceData: PaymentLinksResourceInvoiceSettings option) =
            {
                PaymentLinksResourceInvoiceCreation.Enabled = enabled //required
                PaymentLinksResourceInvoiceCreation.InvoiceData = invoiceData //required
            }

    and PaymentLinksResourceInvoiceSettings = {
        ///The account tax IDs associated with the invoice.
        AccountTaxIds: PaymentLinksResourceInvoiceSettingsAccountTaxIds'AnyOf list option
        ///A list of up to 4 custom fields to be displayed on the invoice.
        CustomFields: InvoiceSettingCustomField list option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Footer to be displayed on the invoice.
        Footer: string option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Options for invoice PDF rendering.
        RenderingOptions: InvoiceSettingRenderingOptions option
    }
    with
        static member New (accountTaxIds: PaymentLinksResourceInvoiceSettingsAccountTaxIds'AnyOf list option, customFields: InvoiceSettingCustomField list option, description: string option, footer: string option, metadata: Map<string, string> option, renderingOptions: InvoiceSettingRenderingOptions option) =
            {
                PaymentLinksResourceInvoiceSettings.AccountTaxIds = accountTaxIds //required
                PaymentLinksResourceInvoiceSettings.CustomFields = customFields //required
                PaymentLinksResourceInvoiceSettings.Description = description //required
                PaymentLinksResourceInvoiceSettings.Footer = footer //required
                PaymentLinksResourceInvoiceSettings.Metadata = metadata //required
                PaymentLinksResourceInvoiceSettings.RenderingOptions = renderingOptions //required
            }

    and PaymentLinksResourceInvoiceSettingsAccountTaxIds'AnyOf =
        | String of string
        | TaxId of TaxId
        | DeletedTaxId of DeletedTaxId

    and PaymentLinksResourcePaymentIntentData = {
        ///Indicates when the funds will be captured from the customer's account.
        CaptureMethod: PaymentLinksResourcePaymentIntentDataCaptureMethod option
        ///Indicates that you intend to make future payments with the payment method collected during checkout.
        SetupFutureUsage: PaymentLinksResourcePaymentIntentDataSetupFutureUsage option
    }
    with
        static member New (captureMethod: PaymentLinksResourcePaymentIntentDataCaptureMethod option, setupFutureUsage: PaymentLinksResourcePaymentIntentDataSetupFutureUsage option) =
            {
                PaymentLinksResourcePaymentIntentData.CaptureMethod = captureMethod //required
                PaymentLinksResourcePaymentIntentData.SetupFutureUsage = setupFutureUsage //required
            }

    and PaymentLinksResourcePaymentIntentDataCaptureMethod =
        | Automatic
        | AutomaticAsync
        | Manual

    and PaymentLinksResourcePaymentIntentDataSetupFutureUsage =
        | OffSession
        | OnSession

    and PaymentLinksResourcePhoneNumberCollection = {
        ///If `true`, a phone number will be collected during checkout.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PaymentLinksResourcePhoneNumberCollection.Enabled = enabled //required
            }

    and PaymentLinksResourceShippingAddressCollection = {
        ///An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
        AllowedCountries: PaymentLinksResourceShippingAddressCollectionAllowedCountries list
    }
    with
        static member New (allowedCountries: PaymentLinksResourceShippingAddressCollectionAllowedCountries list) =
            {
                PaymentLinksResourceShippingAddressCollection.AllowedCountries = allowedCountries //required
            }

    and PaymentLinksResourceShippingAddressCollectionAllowedCountries =
        | [<JsonUnionCase("AC")>] AC
        | [<JsonUnionCase("AD")>] AD
        | [<JsonUnionCase("AE")>] AE
        | [<JsonUnionCase("AF")>] AF
        | [<JsonUnionCase("AG")>] AG
        | [<JsonUnionCase("AI")>] AI
        | [<JsonUnionCase("AL")>] AL
        | [<JsonUnionCase("AM")>] AM
        | [<JsonUnionCase("AO")>] AO
        | [<JsonUnionCase("AQ")>] AQ
        | [<JsonUnionCase("AR")>] AR
        | [<JsonUnionCase("AT")>] AT
        | [<JsonUnionCase("AU")>] AU
        | [<JsonUnionCase("AW")>] AW
        | [<JsonUnionCase("AX")>] AX
        | [<JsonUnionCase("AZ")>] AZ
        | [<JsonUnionCase("BA")>] BA
        | [<JsonUnionCase("BB")>] BB
        | [<JsonUnionCase("BD")>] BD
        | [<JsonUnionCase("BE")>] BE
        | [<JsonUnionCase("BF")>] BF
        | [<JsonUnionCase("BG")>] BG
        | [<JsonUnionCase("BH")>] BH
        | [<JsonUnionCase("BI")>] BI
        | [<JsonUnionCase("BJ")>] BJ
        | [<JsonUnionCase("BL")>] BL
        | [<JsonUnionCase("BM")>] BM
        | [<JsonUnionCase("BN")>] BN
        | [<JsonUnionCase("BO")>] BO
        | [<JsonUnionCase("BQ")>] BQ
        | [<JsonUnionCase("BR")>] BR
        | [<JsonUnionCase("BS")>] BS
        | [<JsonUnionCase("BT")>] BT
        | [<JsonUnionCase("BV")>] BV
        | [<JsonUnionCase("BW")>] BW
        | [<JsonUnionCase("BY")>] BY
        | [<JsonUnionCase("BZ")>] BZ
        | [<JsonUnionCase("CA")>] CA
        | [<JsonUnionCase("CD")>] CD
        | [<JsonUnionCase("CF")>] CF
        | [<JsonUnionCase("CG")>] CG
        | [<JsonUnionCase("CH")>] CH
        | [<JsonUnionCase("CI")>] CI
        | [<JsonUnionCase("CK")>] CK
        | [<JsonUnionCase("CL")>] CL
        | [<JsonUnionCase("CM")>] CM
        | [<JsonUnionCase("CN")>] CN
        | [<JsonUnionCase("CO")>] CO
        | [<JsonUnionCase("CR")>] CR
        | [<JsonUnionCase("CV")>] CV
        | [<JsonUnionCase("CW")>] CW
        | [<JsonUnionCase("CY")>] CY
        | [<JsonUnionCase("CZ")>] CZ
        | [<JsonUnionCase("DE")>] DE
        | [<JsonUnionCase("DJ")>] DJ
        | [<JsonUnionCase("DK")>] DK
        | [<JsonUnionCase("DM")>] DM
        | [<JsonUnionCase("DO")>] DO
        | [<JsonUnionCase("DZ")>] DZ
        | [<JsonUnionCase("EC")>] EC
        | [<JsonUnionCase("EE")>] EE
        | [<JsonUnionCase("EG")>] EG
        | [<JsonUnionCase("EH")>] EH
        | [<JsonUnionCase("ER")>] ER
        | [<JsonUnionCase("ES")>] ES
        | [<JsonUnionCase("ET")>] ET
        | [<JsonUnionCase("FI")>] FI
        | [<JsonUnionCase("FJ")>] FJ
        | [<JsonUnionCase("FK")>] FK
        | [<JsonUnionCase("FO")>] FO
        | [<JsonUnionCase("FR")>] FR
        | [<JsonUnionCase("GA")>] GA
        | [<JsonUnionCase("GB")>] GB
        | [<JsonUnionCase("GD")>] GD
        | [<JsonUnionCase("GE")>] GE
        | [<JsonUnionCase("GF")>] GF
        | [<JsonUnionCase("GG")>] GG
        | [<JsonUnionCase("GH")>] GH
        | [<JsonUnionCase("GI")>] GI
        | [<JsonUnionCase("GL")>] GL
        | [<JsonUnionCase("GM")>] GM
        | [<JsonUnionCase("GN")>] GN
        | [<JsonUnionCase("GP")>] GP
        | [<JsonUnionCase("GQ")>] GQ
        | [<JsonUnionCase("GR")>] GR
        | [<JsonUnionCase("GS")>] GS
        | [<JsonUnionCase("GT")>] GT
        | [<JsonUnionCase("GU")>] GU
        | [<JsonUnionCase("GW")>] GW
        | [<JsonUnionCase("GY")>] GY
        | [<JsonUnionCase("HK")>] HK
        | [<JsonUnionCase("HN")>] HN
        | [<JsonUnionCase("HR")>] HR
        | [<JsonUnionCase("HT")>] HT
        | [<JsonUnionCase("HU")>] HU
        | [<JsonUnionCase("ID")>] ID
        | [<JsonUnionCase("IE")>] IE
        | [<JsonUnionCase("IL")>] IL
        | [<JsonUnionCase("IM")>] IM
        | [<JsonUnionCase("IN")>] IN
        | [<JsonUnionCase("IO")>] IO
        | [<JsonUnionCase("IQ")>] IQ
        | [<JsonUnionCase("IS")>] IS
        | [<JsonUnionCase("IT")>] IT
        | [<JsonUnionCase("JE")>] JE
        | [<JsonUnionCase("JM")>] JM
        | [<JsonUnionCase("JO")>] JO
        | [<JsonUnionCase("JP")>] JP
        | [<JsonUnionCase("KE")>] KE
        | [<JsonUnionCase("KG")>] KG
        | [<JsonUnionCase("KH")>] KH
        | [<JsonUnionCase("KI")>] KI
        | [<JsonUnionCase("KM")>] KM
        | [<JsonUnionCase("KN")>] KN
        | [<JsonUnionCase("KR")>] KR
        | [<JsonUnionCase("KW")>] KW
        | [<JsonUnionCase("KY")>] KY
        | [<JsonUnionCase("KZ")>] KZ
        | [<JsonUnionCase("LA")>] LA
        | [<JsonUnionCase("LB")>] LB
        | [<JsonUnionCase("LC")>] LC
        | [<JsonUnionCase("LI")>] LI
        | [<JsonUnionCase("LK")>] LK
        | [<JsonUnionCase("LR")>] LR
        | [<JsonUnionCase("LS")>] LS
        | [<JsonUnionCase("LT")>] LT
        | [<JsonUnionCase("LU")>] LU
        | [<JsonUnionCase("LV")>] LV
        | [<JsonUnionCase("LY")>] LY
        | [<JsonUnionCase("MA")>] MA
        | [<JsonUnionCase("MC")>] MC
        | [<JsonUnionCase("MD")>] MD
        | [<JsonUnionCase("ME")>] ME
        | [<JsonUnionCase("MF")>] MF
        | [<JsonUnionCase("MG")>] MG
        | [<JsonUnionCase("MK")>] MK
        | [<JsonUnionCase("ML")>] ML
        | [<JsonUnionCase("MM")>] MM
        | [<JsonUnionCase("MN")>] MN
        | [<JsonUnionCase("MO")>] MO
        | [<JsonUnionCase("MQ")>] MQ
        | [<JsonUnionCase("MR")>] MR
        | [<JsonUnionCase("MS")>] MS
        | [<JsonUnionCase("MT")>] MT
        | [<JsonUnionCase("MU")>] MU
        | [<JsonUnionCase("MV")>] MV
        | [<JsonUnionCase("MW")>] MW
        | [<JsonUnionCase("MX")>] MX
        | [<JsonUnionCase("MY")>] MY
        | [<JsonUnionCase("MZ")>] MZ
        | [<JsonUnionCase("NA")>] NA
        | [<JsonUnionCase("NC")>] NC
        | [<JsonUnionCase("NE")>] NE
        | [<JsonUnionCase("NG")>] NG
        | [<JsonUnionCase("NI")>] NI
        | [<JsonUnionCase("NL")>] NL
        | [<JsonUnionCase("NO")>] NO
        | [<JsonUnionCase("NP")>] NP
        | [<JsonUnionCase("NR")>] NR
        | [<JsonUnionCase("NU")>] NU
        | [<JsonUnionCase("NZ")>] NZ
        | [<JsonUnionCase("OM")>] OM
        | [<JsonUnionCase("PA")>] PA
        | [<JsonUnionCase("PE")>] PE
        | [<JsonUnionCase("PF")>] PF
        | [<JsonUnionCase("PG")>] PG
        | [<JsonUnionCase("PH")>] PH
        | [<JsonUnionCase("PK")>] PK
        | [<JsonUnionCase("PL")>] PL
        | [<JsonUnionCase("PM")>] PM
        | [<JsonUnionCase("PN")>] PN
        | [<JsonUnionCase("PR")>] PR
        | [<JsonUnionCase("PS")>] PS
        | [<JsonUnionCase("PT")>] PT
        | [<JsonUnionCase("PY")>] PY
        | [<JsonUnionCase("QA")>] QA
        | [<JsonUnionCase("RE")>] RE
        | [<JsonUnionCase("RO")>] RO
        | [<JsonUnionCase("RS")>] RS
        | [<JsonUnionCase("RU")>] RU
        | [<JsonUnionCase("RW")>] RW
        | [<JsonUnionCase("SA")>] SA
        | [<JsonUnionCase("SB")>] SB
        | [<JsonUnionCase("SC")>] SC
        | [<JsonUnionCase("SE")>] SE
        | [<JsonUnionCase("SG")>] SG
        | [<JsonUnionCase("SH")>] SH
        | [<JsonUnionCase("SI")>] SI
        | [<JsonUnionCase("SJ")>] SJ
        | [<JsonUnionCase("SK")>] SK
        | [<JsonUnionCase("SL")>] SL
        | [<JsonUnionCase("SM")>] SM
        | [<JsonUnionCase("SN")>] SN
        | [<JsonUnionCase("SO")>] SO
        | [<JsonUnionCase("SR")>] SR
        | [<JsonUnionCase("SS")>] SS
        | [<JsonUnionCase("ST")>] ST
        | [<JsonUnionCase("SV")>] SV
        | [<JsonUnionCase("SX")>] SX
        | [<JsonUnionCase("SZ")>] SZ
        | [<JsonUnionCase("TA")>] TA
        | [<JsonUnionCase("TC")>] TC
        | [<JsonUnionCase("TD")>] TD
        | [<JsonUnionCase("TF")>] TF
        | [<JsonUnionCase("TG")>] TG
        | [<JsonUnionCase("TH")>] TH
        | [<JsonUnionCase("TJ")>] TJ
        | [<JsonUnionCase("TK")>] TK
        | [<JsonUnionCase("TL")>] TL
        | [<JsonUnionCase("TM")>] TM
        | [<JsonUnionCase("TN")>] TN
        | [<JsonUnionCase("TO")>] TO
        | [<JsonUnionCase("TR")>] TR
        | [<JsonUnionCase("TT")>] TT
        | [<JsonUnionCase("TV")>] TV
        | [<JsonUnionCase("TW")>] TW
        | [<JsonUnionCase("TZ")>] TZ
        | [<JsonUnionCase("UA")>] UA
        | [<JsonUnionCase("UG")>] UG
        | [<JsonUnionCase("US")>] US
        | [<JsonUnionCase("UY")>] UY
        | [<JsonUnionCase("UZ")>] UZ
        | [<JsonUnionCase("VA")>] VA
        | [<JsonUnionCase("VC")>] VC
        | [<JsonUnionCase("VE")>] VE
        | [<JsonUnionCase("VG")>] VG
        | [<JsonUnionCase("VN")>] VN
        | [<JsonUnionCase("VU")>] VU
        | [<JsonUnionCase("WF")>] WF
        | [<JsonUnionCase("WS")>] WS
        | [<JsonUnionCase("XK")>] XK
        | [<JsonUnionCase("YE")>] YE
        | [<JsonUnionCase("YT")>] YT
        | [<JsonUnionCase("ZA")>] ZA
        | [<JsonUnionCase("ZM")>] ZM
        | [<JsonUnionCase("ZW")>] ZW
        | [<JsonUnionCase("ZZ")>] ZZ

    and PaymentLinksResourceShippingOption = {
        ///A non-negative integer in cents representing how much to charge.
        ShippingAmount: int
        ///The ID of the Shipping Rate to use for this shipping option.
        ShippingRate: PaymentLinksResourceShippingOptionShippingRate'AnyOf
    }
    with
        static member New (shippingAmount: int, shippingRate: PaymentLinksResourceShippingOptionShippingRate'AnyOf) =
            {
                PaymentLinksResourceShippingOption.ShippingAmount = shippingAmount //required
                PaymentLinksResourceShippingOption.ShippingRate = shippingRate //required
            }

    and PaymentLinksResourceShippingOptionShippingRate'AnyOf =
        | String of string
        | ShippingRate of ShippingRate

    and PaymentLinksResourceSubscriptionData = {
        ///The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.
        Description: string option
        ///Integer representing the number of trial period days before the customer is charged for the first time.
        TrialPeriodDays: int option
    }
    with
        static member New (description: string option, trialPeriodDays: int option) =
            {
                PaymentLinksResourceSubscriptionData.Description = description //required
                PaymentLinksResourceSubscriptionData.TrialPeriodDays = trialPeriodDays //required
            }

    and PaymentLinksResourceTaxIdCollection = {
        ///Indicates whether tax ID collection is enabled for the session.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PaymentLinksResourceTaxIdCollection.Enabled = enabled //required
            }

    and PaymentLinksResourceTransferData = {
        ///The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
        Amount: int option
        ///The connected account receiving the transfer.
        Destination: PaymentLinksResourceTransferDataDestination'AnyOf
    }
    with
        static member New (amount: int option, destination: PaymentLinksResourceTransferDataDestination'AnyOf) =
            {
                PaymentLinksResourceTransferData.Amount = amount //required
                PaymentLinksResourceTransferData.Destination = destination //required
            }

    and PaymentLinksResourceTransferDataDestination'AnyOf =
        | String of string
        | Account of Account

    ///PaymentMethod objects represent your customer's payment instruments.
    ///You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
    ///Customer objects to store instrument details for future payments.
    ///Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
    and PaymentMethod = {
        AcssDebit: PaymentMethodAcssDebit option
        Affirm: PaymentMethodAffirm option
        AfterpayClearpay: PaymentMethodAfterpayClearpay option
        Alipay: PaymentFlowsPrivatePaymentMethodsAlipay option
        AuBecsDebit: PaymentMethodAuBecsDebit option
        BacsDebit: PaymentMethodBacsDebit option
        Bancontact: PaymentMethodBancontact option
        BillingDetails: BillingDetails
        Blik: PaymentMethodBlik option
        Boleto: PaymentMethodBoleto option
        Card: PaymentMethodCard option
        CardPresent: PaymentMethodCardPresent option
        Cashapp: PaymentMethodCashapp option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
        Customer: PaymentMethodCustomer'AnyOf option
        CustomerBalance: PaymentMethodCustomerBalance option
        Eps: PaymentMethodEps option
        Fpx: PaymentMethodFpx option
        Giropay: PaymentMethodGiropay option
        Grabpay: PaymentMethodGrabpay option
        ///Unique identifier for the object.
        Id: string
        Ideal: PaymentMethodIdeal option
        InteracPresent: PaymentMethodInteracPresent option
        Klarna: PaymentMethodKlarna option
        Konbini: PaymentMethodKonbini option
        Link: PaymentMethodLink option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        Oxxo: PaymentMethodOxxo option
        [<JsonField(Name="p24")>]P24: PaymentMethodP24 option
        Paynow: PaymentMethodPaynow option
        Paypal: PaymentMethodPaypal option
        Pix: PaymentMethodPix option
        Promptpay: PaymentMethodPromptpay option
        RadarOptions: RadarRadarOptions option
        SepaDebit: PaymentMethodSepaDebit option
        Sofort: PaymentMethodSofort option
        ///The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
        Type: PaymentMethodType
        UsBankAccount: PaymentMethodUsBankAccount option
        WechatPay: PaymentMethodWechatPay option
        Zip: PaymentMethodZip option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "payment_method"

        static member New (billingDetails: BillingDetails, created: DateTime, customer: PaymentMethodCustomer'AnyOf option, id: string, livemode: bool, metadata: Map<string, string> option, ``type``: PaymentMethodType, ?acssDebit: PaymentMethodAcssDebit, ?affirm: PaymentMethodAffirm, ?afterpayClearpay: PaymentMethodAfterpayClearpay, ?alipay: PaymentFlowsPrivatePaymentMethodsAlipay, ?auBecsDebit: PaymentMethodAuBecsDebit, ?bacsDebit: PaymentMethodBacsDebit, ?bancontact: PaymentMethodBancontact, ?blik: PaymentMethodBlik, ?boleto: PaymentMethodBoleto, ?card: PaymentMethodCard, ?cardPresent: PaymentMethodCardPresent, ?cashapp: PaymentMethodCashapp, ?customerBalance: PaymentMethodCustomerBalance, ?eps: PaymentMethodEps, ?fpx: PaymentMethodFpx, ?giropay: PaymentMethodGiropay, ?grabpay: PaymentMethodGrabpay, ?ideal: PaymentMethodIdeal, ?interacPresent: PaymentMethodInteracPresent, ?klarna: PaymentMethodKlarna, ?konbini: PaymentMethodKonbini, ?link: PaymentMethodLink, ?oxxo: PaymentMethodOxxo, ?p24: PaymentMethodP24, ?paynow: PaymentMethodPaynow, ?paypal: PaymentMethodPaypal, ?pix: PaymentMethodPix, ?promptpay: PaymentMethodPromptpay, ?radarOptions: RadarRadarOptions, ?sepaDebit: PaymentMethodSepaDebit, ?sofort: PaymentMethodSofort, ?usBankAccount: PaymentMethodUsBankAccount, ?wechatPay: PaymentMethodWechatPay, ?zip: PaymentMethodZip) =
            {
                PaymentMethod.BillingDetails = billingDetails //required
                PaymentMethod.Created = created //required
                PaymentMethod.Customer = customer //required
                PaymentMethod.Id = id //required
                PaymentMethod.Livemode = livemode //required
                PaymentMethod.Metadata = metadata //required
                PaymentMethod.Type = ``type`` //required
                PaymentMethod.AcssDebit = acssDebit
                PaymentMethod.Affirm = affirm
                PaymentMethod.AfterpayClearpay = afterpayClearpay
                PaymentMethod.Alipay = alipay
                PaymentMethod.AuBecsDebit = auBecsDebit
                PaymentMethod.BacsDebit = bacsDebit
                PaymentMethod.Bancontact = bancontact
                PaymentMethod.Blik = blik
                PaymentMethod.Boleto = boleto
                PaymentMethod.Card = card
                PaymentMethod.CardPresent = cardPresent
                PaymentMethod.Cashapp = cashapp
                PaymentMethod.CustomerBalance = customerBalance
                PaymentMethod.Eps = eps
                PaymentMethod.Fpx = fpx
                PaymentMethod.Giropay = giropay
                PaymentMethod.Grabpay = grabpay
                PaymentMethod.Ideal = ideal
                PaymentMethod.InteracPresent = interacPresent
                PaymentMethod.Klarna = klarna
                PaymentMethod.Konbini = konbini
                PaymentMethod.Link = link
                PaymentMethod.Oxxo = oxxo
                PaymentMethod.P24 = p24
                PaymentMethod.Paynow = paynow
                PaymentMethod.Paypal = paypal
                PaymentMethod.Pix = pix
                PaymentMethod.Promptpay = promptpay
                PaymentMethod.RadarOptions = radarOptions
                PaymentMethod.SepaDebit = sepaDebit
                PaymentMethod.Sofort = sofort
                PaymentMethod.UsBankAccount = usBankAccount
                PaymentMethod.WechatPay = wechatPay
                PaymentMethod.Zip = zip
            }

    and PaymentMethodCustomer'AnyOf =
        | String of string
        | Customer of Customer

    and PaymentMethodType =
        | AcssDebit
        | Affirm
        | AfterpayClearpay
        | Alipay
        | AuBecsDebit
        | BacsDebit
        | Bancontact
        | Blik
        | Boleto
        | Card
        | CardPresent
        | Cashapp
        | CustomerBalance
        | Eps
        | Fpx
        | Giropay
        | Grabpay
        | Ideal
        | InteracPresent
        | Klarna
        | Konbini
        | Link
        | Oxxo
        | P24
        | Paynow
        | Paypal
        | Pix
        | Promptpay
        | SepaDebit
        | Sofort
        | UsBankAccount
        | WechatPay
        | Zip

    and PaymentMethodAcssDebit = {
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Institution number of the bank account.
        InstitutionNumber: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///Transit number of the bank account.
        TransitNumber: string option
    }
    with
        static member New (bankName: string option, fingerprint: string option, institutionNumber: string option, last4: string option, transitNumber: string option) =
            {
                PaymentMethodAcssDebit.BankName = bankName //required
                PaymentMethodAcssDebit.Fingerprint = fingerprint //required
                PaymentMethodAcssDebit.InstitutionNumber = institutionNumber //required
                PaymentMethodAcssDebit.Last4 = last4 //required
                PaymentMethodAcssDebit.TransitNumber = transitNumber //required
            }

    and PaymentMethodAffirm = {
        PaymentMethodAffirm: string option
    }
    with
        static member New (?paymentMethodAffirm: string option) =
            {
                PaymentMethodAffirm.PaymentMethodAffirm = paymentMethodAffirm |> Option.flatten
            }

    and PaymentMethodAfterpayClearpay = {
        PaymentMethodAfterpayClearpay: string option
    }
    with
        static member New (?paymentMethodAfterpayClearpay: string option) =
            {
                PaymentMethodAfterpayClearpay.PaymentMethodAfterpayClearpay = paymentMethodAfterpayClearpay |> Option.flatten
            }

    and PaymentMethodAuBecsDebit = {
        ///Six-digit number identifying bank and branch associated with this bank account.
        BsbNumber: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
    }
    with
        static member New (bsbNumber: string option, fingerprint: string option, last4: string option) =
            {
                PaymentMethodAuBecsDebit.BsbNumber = bsbNumber //required
                PaymentMethodAuBecsDebit.Fingerprint = fingerprint //required
                PaymentMethodAuBecsDebit.Last4 = last4 //required
            }

    and PaymentMethodBacsDebit = {
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///Sort code of the bank account. (e.g., `10-20-30`)
        SortCode: string option
    }
    with
        static member New (fingerprint: string option, last4: string option, sortCode: string option) =
            {
                PaymentMethodBacsDebit.Fingerprint = fingerprint //required
                PaymentMethodBacsDebit.Last4 = last4 //required
                PaymentMethodBacsDebit.SortCode = sortCode //required
            }

    and PaymentMethodBancontact = {
        PaymentMethodBancontact: string option
    }
    with
        static member New (?paymentMethodBancontact: string option) =
            {
                PaymentMethodBancontact.PaymentMethodBancontact = paymentMethodBancontact |> Option.flatten
            }

    and PaymentMethodBlik = {
        PaymentMethodBlik: string option
    }
    with
        static member New (?paymentMethodBlik: string option) =
            {
                PaymentMethodBlik.PaymentMethodBlik = paymentMethodBlik |> Option.flatten
            }

    and PaymentMethodBoleto = {
        ///Uniquely identifies the customer tax id (CNPJ or CPF)
        TaxId: string
    }
    with
        static member New (taxId: string) =
            {
                PaymentMethodBoleto.TaxId = taxId //required
            }

    and PaymentMethodCard = {
        ///Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Brand: PaymentMethodCardBrand
        ///Checks on Card address and CVC if provided.
        Checks: PaymentMethodCardChecks option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: PaymentMethodCardFunding
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string
        ///Contains information about card networks that can be used to process the payment.
        Networks: Networks option
        ///Contains details on how this Card may be used for 3D Secure authentication.
        ThreeDSecureUsage: ThreeDSecureUsage option
        ///If this Card is part of a card wallet, this contains the details of the card wallet.
        Wallet: PaymentMethodCardWallet option
    }
    with
        static member New (brand: PaymentMethodCardBrand, checks: PaymentMethodCardChecks option, country: string option, expMonth: int, expYear: int, funding: PaymentMethodCardFunding, last4: string, networks: Networks option, threeDSecureUsage: ThreeDSecureUsage option, wallet: PaymentMethodCardWallet option, ?description: string option, ?fingerprint: string option, ?iin: string option, ?issuer: string option) =
            {
                PaymentMethodCard.Brand = brand //required
                PaymentMethodCard.Checks = checks //required
                PaymentMethodCard.Country = country //required
                PaymentMethodCard.ExpMonth = expMonth //required
                PaymentMethodCard.ExpYear = expYear //required
                PaymentMethodCard.Funding = funding //required
                PaymentMethodCard.Last4 = last4 //required
                PaymentMethodCard.Networks = networks //required
                PaymentMethodCard.ThreeDSecureUsage = threeDSecureUsage //required
                PaymentMethodCard.Wallet = wallet //required
                PaymentMethodCard.Description = description |> Option.flatten
                PaymentMethodCard.Fingerprint = fingerprint |> Option.flatten
                PaymentMethodCard.Iin = iin |> Option.flatten
                PaymentMethodCard.Issuer = issuer |> Option.flatten
            }

    and PaymentMethodCardBrand =
        | Amex
        | Diners
        | Discover
        | EftposAu
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodCardFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and PaymentMethodCardChecks = {
        ///If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
        [<JsonField(Name="address_line1_check")>]AddressLine1Check: PaymentMethodCardChecksAddressLine1Check option
        ///If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
        AddressPostalCodeCheck: PaymentMethodCardChecksAddressPostalCodeCheck option
        ///If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
        CvcCheck: PaymentMethodCardChecksCvcCheck option
    }
    with
        static member New (addressLine1Check: PaymentMethodCardChecksAddressLine1Check option, addressPostalCodeCheck: PaymentMethodCardChecksAddressPostalCodeCheck option, cvcCheck: PaymentMethodCardChecksCvcCheck option) =
            {
                PaymentMethodCardChecks.AddressLine1Check = addressLine1Check //required
                PaymentMethodCardChecks.AddressPostalCodeCheck = addressPostalCodeCheck //required
                PaymentMethodCardChecks.CvcCheck = cvcCheck //required
            }

    and PaymentMethodCardChecksAddressLine1Check =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and PaymentMethodCardChecksAddressPostalCodeCheck =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and PaymentMethodCardChecksCvcCheck =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and PaymentMethodCardPresent = {
        ///Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Brand: PaymentMethodCardPresentBrand option
        ///The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
        CardholderName: string option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: PaymentMethodCardPresentFunding option
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string option
        ///Contains information about card networks that can be used to process the payment.
        Networks: PaymentMethodCardPresentNetworks option
        ///How card details were read in this transaction.
        ReadMethod: PaymentMethodCardPresentReadMethod option
    }
    with
        static member New (brand: PaymentMethodCardPresentBrand option, cardholderName: string option, country: string option, expMonth: int, expYear: int, fingerprint: string option, funding: PaymentMethodCardPresentFunding option, last4: string option, networks: PaymentMethodCardPresentNetworks option, readMethod: PaymentMethodCardPresentReadMethod option, ?description: string option, ?iin: string option, ?issuer: string option) =
            {
                PaymentMethodCardPresent.Brand = brand //required
                PaymentMethodCardPresent.CardholderName = cardholderName //required
                PaymentMethodCardPresent.Country = country //required
                PaymentMethodCardPresent.ExpMonth = expMonth //required
                PaymentMethodCardPresent.ExpYear = expYear //required
                PaymentMethodCardPresent.Fingerprint = fingerprint //required
                PaymentMethodCardPresent.Funding = funding //required
                PaymentMethodCardPresent.Last4 = last4 //required
                PaymentMethodCardPresent.Networks = networks //required
                PaymentMethodCardPresent.ReadMethod = readMethod //required
                PaymentMethodCardPresent.Description = description |> Option.flatten
                PaymentMethodCardPresent.Iin = iin |> Option.flatten
                PaymentMethodCardPresent.Issuer = issuer |> Option.flatten
            }

    and PaymentMethodCardPresentBrand =
        | Amex
        | Diners
        | Discover
        | EftposAu
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodCardPresentFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and PaymentMethodCardPresentReadMethod =
        | ContactEmv
        | ContactlessEmv
        | ContactlessMagstripeMode
        | MagneticStripeFallback
        | MagneticStripeTrack2

    and PaymentMethodCardPresentNetworks = {
        ///All available networks for the card.
        Available: string list
        ///The preferred network for the card.
        Preferred: string option
    }
    with
        static member New (available: string list, preferred: string option) =
            {
                PaymentMethodCardPresentNetworks.Available = available //required
                PaymentMethodCardPresentNetworks.Preferred = preferred //required
            }

    and PaymentMethodCardWallet = {
        AmexExpressCheckout: PaymentMethodCardWalletAmexExpressCheckout option
        ApplePay: PaymentMethodCardWalletApplePay option
        ///(For tokenized numbers only.) The last four digits of the device account number.
        [<JsonField(Name="dynamic_last4")>]DynamicLast4: string option
        GooglePay: PaymentMethodCardWalletGooglePay option
        Link: PaymentMethodCardWalletLink option
        Masterpass: PaymentMethodCardWalletMasterpass option
        SamsungPay: PaymentMethodCardWalletSamsungPay option
        ///The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
        Type: PaymentMethodCardWalletType
        VisaCheckout: PaymentMethodCardWalletVisaCheckout option
    }
    with
        static member New (dynamicLast4: string option, ``type``: PaymentMethodCardWalletType, ?amexExpressCheckout: PaymentMethodCardWalletAmexExpressCheckout, ?applePay: PaymentMethodCardWalletApplePay, ?googlePay: PaymentMethodCardWalletGooglePay, ?link: PaymentMethodCardWalletLink, ?masterpass: PaymentMethodCardWalletMasterpass, ?samsungPay: PaymentMethodCardWalletSamsungPay, ?visaCheckout: PaymentMethodCardWalletVisaCheckout) =
            {
                PaymentMethodCardWallet.DynamicLast4 = dynamicLast4 //required
                PaymentMethodCardWallet.Type = ``type`` //required
                PaymentMethodCardWallet.AmexExpressCheckout = amexExpressCheckout
                PaymentMethodCardWallet.ApplePay = applePay
                PaymentMethodCardWallet.GooglePay = googlePay
                PaymentMethodCardWallet.Link = link
                PaymentMethodCardWallet.Masterpass = masterpass
                PaymentMethodCardWallet.SamsungPay = samsungPay
                PaymentMethodCardWallet.VisaCheckout = visaCheckout
            }

    and PaymentMethodCardWalletType =
        | AmexExpressCheckout
        | ApplePay
        | GooglePay
        | Link
        | Masterpass
        | SamsungPay
        | VisaCheckout

    and PaymentMethodCardWalletAmexExpressCheckout = {
        PaymentMethodCardWalletAmexExpressCheckout: string option
    }
    with
        static member New (?paymentMethodCardWalletAmexExpressCheckout: string option) =
            {
                PaymentMethodCardWalletAmexExpressCheckout.PaymentMethodCardWalletAmexExpressCheckout = paymentMethodCardWalletAmexExpressCheckout |> Option.flatten
            }

    and PaymentMethodCardWalletApplePay = {
        PaymentMethodCardWalletApplePay: string option
    }
    with
        static member New (?paymentMethodCardWalletApplePay: string option) =
            {
                PaymentMethodCardWalletApplePay.PaymentMethodCardWalletApplePay = paymentMethodCardWalletApplePay |> Option.flatten
            }

    and PaymentMethodCardWalletGooglePay = {
        PaymentMethodCardWalletGooglePay: string option
    }
    with
        static member New (?paymentMethodCardWalletGooglePay: string option) =
            {
                PaymentMethodCardWalletGooglePay.PaymentMethodCardWalletGooglePay = paymentMethodCardWalletGooglePay |> Option.flatten
            }

    and PaymentMethodCardWalletLink = {
        PaymentMethodCardWalletLink: string option
    }
    with
        static member New (?paymentMethodCardWalletLink: string option) =
            {
                PaymentMethodCardWalletLink.PaymentMethodCardWalletLink = paymentMethodCardWalletLink |> Option.flatten
            }

    and PaymentMethodCardWalletMasterpass = {
        ///Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        BillingAddress: Address option
        ///Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Email: string option
        ///Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Name: string option
        ///Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ShippingAddress: Address option
    }
    with
        static member New (billingAddress: Address option, email: string option, name: string option, shippingAddress: Address option) =
            {
                PaymentMethodCardWalletMasterpass.BillingAddress = billingAddress //required
                PaymentMethodCardWalletMasterpass.Email = email //required
                PaymentMethodCardWalletMasterpass.Name = name //required
                PaymentMethodCardWalletMasterpass.ShippingAddress = shippingAddress //required
            }

    and PaymentMethodCardWalletSamsungPay = {
        PaymentMethodCardWalletSamsungPay: string option
    }
    with
        static member New (?paymentMethodCardWalletSamsungPay: string option) =
            {
                PaymentMethodCardWalletSamsungPay.PaymentMethodCardWalletSamsungPay = paymentMethodCardWalletSamsungPay |> Option.flatten
            }

    and PaymentMethodCardWalletVisaCheckout = {
        ///Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        BillingAddress: Address option
        ///Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Email: string option
        ///Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Name: string option
        ///Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ShippingAddress: Address option
    }
    with
        static member New (billingAddress: Address option, email: string option, name: string option, shippingAddress: Address option) =
            {
                PaymentMethodCardWalletVisaCheckout.BillingAddress = billingAddress //required
                PaymentMethodCardWalletVisaCheckout.Email = email //required
                PaymentMethodCardWalletVisaCheckout.Name = name //required
                PaymentMethodCardWalletVisaCheckout.ShippingAddress = shippingAddress //required
            }

    and PaymentMethodCashapp = {
        ///A unique and immutable identifier assigned by Cash App to every buyer.
        BuyerId: string option
        ///A public identifier for buyers using Cash App.
        Cashtag: string option
    }
    with
        static member New (buyerId: string option, cashtag: string option) =
            {
                PaymentMethodCashapp.BuyerId = buyerId //required
                PaymentMethodCashapp.Cashtag = cashtag //required
            }

    and PaymentMethodCustomerBalance = {
        PaymentMethodCustomerBalance: string option
    }
    with
        static member New (?paymentMethodCustomerBalance: string option) =
            {
                PaymentMethodCustomerBalance.PaymentMethodCustomerBalance = paymentMethodCustomerBalance |> Option.flatten
            }

    and PaymentMethodDetails = {
        AchCreditTransfer: PaymentMethodDetailsAchCreditTransfer option
        AchDebit: PaymentMethodDetailsAchDebit option
        AcssDebit: PaymentMethodDetailsAcssDebit option
        Affirm: PaymentMethodDetailsAffirm option
        AfterpayClearpay: PaymentMethodDetailsAfterpayClearpay option
        Alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails option
        AuBecsDebit: PaymentMethodDetailsAuBecsDebit option
        BacsDebit: PaymentMethodDetailsBacsDebit option
        Bancontact: PaymentMethodDetailsBancontact option
        Blik: PaymentMethodDetailsBlik option
        Boleto: PaymentMethodDetailsBoleto option
        Card: PaymentMethodDetailsCard option
        CardPresent: PaymentMethodDetailsCardPresent option
        Cashapp: PaymentMethodDetailsCashapp option
        CustomerBalance: PaymentMethodDetailsCustomerBalance option
        Eps: PaymentMethodDetailsEps option
        Fpx: PaymentMethodDetailsFpx option
        Giropay: PaymentMethodDetailsGiropay option
        Grabpay: PaymentMethodDetailsGrabpay option
        Ideal: PaymentMethodDetailsIdeal option
        InteracPresent: PaymentMethodDetailsInteracPresent option
        Klarna: PaymentMethodDetailsKlarna option
        Konbini: PaymentMethodDetailsKonbini option
        Link: PaymentMethodDetailsLink option
        Multibanco: PaymentMethodDetailsMultibanco option
        Oxxo: PaymentMethodDetailsOxxo option
        [<JsonField(Name="p24")>]P24: PaymentMethodDetailsP24 option
        Paynow: PaymentMethodDetailsPaynow option
        Paypal: PaymentMethodDetailsPaypal option
        Pix: PaymentMethodDetailsPix option
        Promptpay: PaymentMethodDetailsPromptpay option
        SepaCreditTransfer: PaymentMethodDetailsSepaCreditTransfer option
        SepaDebit: PaymentMethodDetailsSepaDebit option
        Sofort: PaymentMethodDetailsSofort option
        StripeAccount: PaymentMethodDetailsStripeAccount option
        ///The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
        ///An additional hash is included on `payment_method_details` with a name matching this value.
        ///It contains information specific to the payment method.
        Type: PaymentMethodDetailsType
        UsBankAccount: PaymentMethodDetailsUsBankAccount option
        Wechat: PaymentMethodDetailsWechat option
        WechatPay: PaymentMethodDetailsWechatPay option
        Zip: PaymentMethodDetailsZip option
    }
    with
        static member New (``type``: PaymentMethodDetailsType, ?achCreditTransfer: PaymentMethodDetailsAchCreditTransfer, ?achDebit: PaymentMethodDetailsAchDebit, ?acssDebit: PaymentMethodDetailsAcssDebit, ?affirm: PaymentMethodDetailsAffirm, ?afterpayClearpay: PaymentMethodDetailsAfterpayClearpay, ?alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails, ?auBecsDebit: PaymentMethodDetailsAuBecsDebit, ?bacsDebit: PaymentMethodDetailsBacsDebit, ?bancontact: PaymentMethodDetailsBancontact, ?blik: PaymentMethodDetailsBlik, ?boleto: PaymentMethodDetailsBoleto, ?card: PaymentMethodDetailsCard, ?cardPresent: PaymentMethodDetailsCardPresent, ?cashapp: PaymentMethodDetailsCashapp, ?customerBalance: PaymentMethodDetailsCustomerBalance, ?eps: PaymentMethodDetailsEps, ?fpx: PaymentMethodDetailsFpx, ?giropay: PaymentMethodDetailsGiropay, ?grabpay: PaymentMethodDetailsGrabpay, ?ideal: PaymentMethodDetailsIdeal, ?interacPresent: PaymentMethodDetailsInteracPresent, ?klarna: PaymentMethodDetailsKlarna, ?konbini: PaymentMethodDetailsKonbini, ?link: PaymentMethodDetailsLink, ?multibanco: PaymentMethodDetailsMultibanco, ?oxxo: PaymentMethodDetailsOxxo, ?p24: PaymentMethodDetailsP24, ?paynow: PaymentMethodDetailsPaynow, ?paypal: PaymentMethodDetailsPaypal, ?pix: PaymentMethodDetailsPix, ?promptpay: PaymentMethodDetailsPromptpay, ?sepaCreditTransfer: PaymentMethodDetailsSepaCreditTransfer, ?sepaDebit: PaymentMethodDetailsSepaDebit, ?sofort: PaymentMethodDetailsSofort, ?stripeAccount: PaymentMethodDetailsStripeAccount, ?usBankAccount: PaymentMethodDetailsUsBankAccount, ?wechat: PaymentMethodDetailsWechat, ?wechatPay: PaymentMethodDetailsWechatPay, ?zip: PaymentMethodDetailsZip) =
            {
                PaymentMethodDetails.Type = ``type`` //required
                PaymentMethodDetails.AchCreditTransfer = achCreditTransfer
                PaymentMethodDetails.AchDebit = achDebit
                PaymentMethodDetails.AcssDebit = acssDebit
                PaymentMethodDetails.Affirm = affirm
                PaymentMethodDetails.AfterpayClearpay = afterpayClearpay
                PaymentMethodDetails.Alipay = alipay
                PaymentMethodDetails.AuBecsDebit = auBecsDebit
                PaymentMethodDetails.BacsDebit = bacsDebit
                PaymentMethodDetails.Bancontact = bancontact
                PaymentMethodDetails.Blik = blik
                PaymentMethodDetails.Boleto = boleto
                PaymentMethodDetails.Card = card
                PaymentMethodDetails.CardPresent = cardPresent
                PaymentMethodDetails.Cashapp = cashapp
                PaymentMethodDetails.CustomerBalance = customerBalance
                PaymentMethodDetails.Eps = eps
                PaymentMethodDetails.Fpx = fpx
                PaymentMethodDetails.Giropay = giropay
                PaymentMethodDetails.Grabpay = grabpay
                PaymentMethodDetails.Ideal = ideal
                PaymentMethodDetails.InteracPresent = interacPresent
                PaymentMethodDetails.Klarna = klarna
                PaymentMethodDetails.Konbini = konbini
                PaymentMethodDetails.Link = link
                PaymentMethodDetails.Multibanco = multibanco
                PaymentMethodDetails.Oxxo = oxxo
                PaymentMethodDetails.P24 = p24
                PaymentMethodDetails.Paynow = paynow
                PaymentMethodDetails.Paypal = paypal
                PaymentMethodDetails.Pix = pix
                PaymentMethodDetails.Promptpay = promptpay
                PaymentMethodDetails.SepaCreditTransfer = sepaCreditTransfer
                PaymentMethodDetails.SepaDebit = sepaDebit
                PaymentMethodDetails.Sofort = sofort
                PaymentMethodDetails.StripeAccount = stripeAccount
                PaymentMethodDetails.UsBankAccount = usBankAccount
                PaymentMethodDetails.Wechat = wechat
                PaymentMethodDetails.WechatPay = wechatPay
                PaymentMethodDetails.Zip = zip
            }

    and PaymentMethodDetailsType =
        | AchCreditTransfer
        | AchDebit
        | AcssDebit
        | Alipay
        | AuBecsDebit
        | Bancontact
        | Card
        | CardPresent
        | Eps
        | Giropay
        | Ideal
        | Klarna
        | Multibanco
        | P24
        | SepaDebit
        | Sofort
        | StripeAccount
        | Wechat

    and PaymentMethodDetailsAchCreditTransfer = {
        ///Account number to transfer funds to.
        AccountNumber: string option
        ///Name of the bank associated with the routing number.
        BankName: string option
        ///Routing transit number for the bank account to transfer funds to.
        RoutingNumber: string option
        ///SWIFT code of the bank associated with the routing number.
        SwiftCode: string option
    }
    with
        static member New (accountNumber: string option, bankName: string option, routingNumber: string option, swiftCode: string option) =
            {
                PaymentMethodDetailsAchCreditTransfer.AccountNumber = accountNumber //required
                PaymentMethodDetailsAchCreditTransfer.BankName = bankName //required
                PaymentMethodDetailsAchCreditTransfer.RoutingNumber = routingNumber //required
                PaymentMethodDetailsAchCreditTransfer.SwiftCode = swiftCode //required
            }

    and PaymentMethodDetailsAchDebit = {
        ///Type of entity that holds the account. This can be either `individual` or `company`.
        AccountHolderType: PaymentMethodDetailsAchDebitAccountHolderType option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Two-letter ISO code representing the country the bank account is located in.
        Country: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///Routing transit number of the bank account.
        RoutingNumber: string option
    }
    with
        static member New (accountHolderType: PaymentMethodDetailsAchDebitAccountHolderType option, bankName: string option, country: string option, fingerprint: string option, last4: string option, routingNumber: string option) =
            {
                PaymentMethodDetailsAchDebit.AccountHolderType = accountHolderType //required
                PaymentMethodDetailsAchDebit.BankName = bankName //required
                PaymentMethodDetailsAchDebit.Country = country //required
                PaymentMethodDetailsAchDebit.Fingerprint = fingerprint //required
                PaymentMethodDetailsAchDebit.Last4 = last4 //required
                PaymentMethodDetailsAchDebit.RoutingNumber = routingNumber //required
            }

    and PaymentMethodDetailsAchDebitAccountHolderType =
        | Company
        | Individual

    and PaymentMethodDetailsAcssDebit = {
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Institution number of the bank account
        InstitutionNumber: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///ID of the mandate used to make this payment.
        Mandate: string option
        ///Transit number of the bank account.
        TransitNumber: string option
    }
    with
        static member New (bankName: string option, fingerprint: string option, institutionNumber: string option, last4: string option, transitNumber: string option, ?mandate: string) =
            {
                PaymentMethodDetailsAcssDebit.BankName = bankName //required
                PaymentMethodDetailsAcssDebit.Fingerprint = fingerprint //required
                PaymentMethodDetailsAcssDebit.InstitutionNumber = institutionNumber //required
                PaymentMethodDetailsAcssDebit.Last4 = last4 //required
                PaymentMethodDetailsAcssDebit.TransitNumber = transitNumber //required
                PaymentMethodDetailsAcssDebit.Mandate = mandate
            }

    and PaymentMethodDetailsAffirm = {
        PaymentMethodDetailsAffirm: string option
    }
    with
        static member New (?paymentMethodDetailsAffirm: string option) =
            {
                PaymentMethodDetailsAffirm.PaymentMethodDetailsAffirm = paymentMethodDetailsAffirm |> Option.flatten
            }

    and PaymentMethodDetailsAfterpayClearpay = {
        ///The Afterpay order ID associated with this payment intent.
        OrderId: string option
        ///Order identifier shown to the merchant in Afterpay’s online portal.
        Reference: string option
    }
    with
        static member New (orderId: string option, reference: string option) =
            {
                PaymentMethodDetailsAfterpayClearpay.OrderId = orderId //required
                PaymentMethodDetailsAfterpayClearpay.Reference = reference //required
            }

    and PaymentMethodDetailsAuBecsDebit = {
        ///Bank-State-Branch number of the bank account.
        BsbNumber: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///ID of the mandate used to make this payment.
        Mandate: string option
    }
    with
        static member New (bsbNumber: string option, fingerprint: string option, last4: string option, ?mandate: string) =
            {
                PaymentMethodDetailsAuBecsDebit.BsbNumber = bsbNumber //required
                PaymentMethodDetailsAuBecsDebit.Fingerprint = fingerprint //required
                PaymentMethodDetailsAuBecsDebit.Last4 = last4 //required
                PaymentMethodDetailsAuBecsDebit.Mandate = mandate
            }

    and PaymentMethodDetailsBacsDebit = {
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///ID of the mandate used to make this payment.
        Mandate: string option
        ///Sort code of the bank account. (e.g., `10-20-30`)
        SortCode: string option
    }
    with
        static member New (fingerprint: string option, last4: string option, mandate: string option, sortCode: string option) =
            {
                PaymentMethodDetailsBacsDebit.Fingerprint = fingerprint //required
                PaymentMethodDetailsBacsDebit.Last4 = last4 //required
                PaymentMethodDetailsBacsDebit.Mandate = mandate //required
                PaymentMethodDetailsBacsDebit.SortCode = sortCode //required
            }

    and PaymentMethodDetailsBancontact = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Bank Identifier Code of the bank associated with the bank account.
        Bic: string option
        ///The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
        GeneratedSepaDebit: PaymentMethodDetailsBancontactGeneratedSepaDebit'AnyOf option
        ///The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
        GeneratedSepaDebitMandate: PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'AnyOf option
        ///Last four characters of the IBAN.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///Preferred language of the Bancontact authorization page that the customer is redirected to.
        ///Can be one of `en`, `de`, `fr`, or `nl`
        PreferredLanguage: PaymentMethodDetailsBancontactPreferredLanguage option
        ///Owner's verified full name. Values are verified or provided by Bancontact directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
    }
    with
        static member New (bankCode: string option, bankName: string option, bic: string option, generatedSepaDebit: PaymentMethodDetailsBancontactGeneratedSepaDebit'AnyOf option, generatedSepaDebitMandate: PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'AnyOf option, ibanLast4: string option, preferredLanguage: PaymentMethodDetailsBancontactPreferredLanguage option, verifiedName: string option) =
            {
                PaymentMethodDetailsBancontact.BankCode = bankCode //required
                PaymentMethodDetailsBancontact.BankName = bankName //required
                PaymentMethodDetailsBancontact.Bic = bic //required
                PaymentMethodDetailsBancontact.GeneratedSepaDebit = generatedSepaDebit //required
                PaymentMethodDetailsBancontact.GeneratedSepaDebitMandate = generatedSepaDebitMandate //required
                PaymentMethodDetailsBancontact.IbanLast4 = ibanLast4 //required
                PaymentMethodDetailsBancontact.PreferredLanguage = preferredLanguage //required
                PaymentMethodDetailsBancontact.VerifiedName = verifiedName //required
            }

    and PaymentMethodDetailsBancontactGeneratedSepaDebit'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and PaymentMethodDetailsBancontactPreferredLanguage =
        | De
        | En
        | Fr
        | Nl

    and PaymentMethodDetailsBlik = {
        PaymentMethodDetailsBlik: string option
    }
    with
        static member New (?paymentMethodDetailsBlik: string option) =
            {
                PaymentMethodDetailsBlik.PaymentMethodDetailsBlik = paymentMethodDetailsBlik |> Option.flatten
            }

    and PaymentMethodDetailsBoleto = {
        ///The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
        TaxId: string
    }
    with
        static member New (taxId: string) =
            {
                PaymentMethodDetailsBoleto.TaxId = taxId //required
            }

    and PaymentMethodDetailsCard = {
        ///Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Brand: PaymentMethodDetailsCardBrand option
        ///Check results by Card networks on Card address and CVC at time of payment.
        Checks: PaymentMethodDetailsCardChecks option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: PaymentMethodDetailsCardFunding option
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///Installment details for this payment (Mexico only).
        ///For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
        Installments: PaymentMethodDetailsCardInstallments option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string option
        ///ID of the mandate used to make this payment or created by it.
        Mandate: string option
        ///True if this payment was marked as MOTO and out of scope for SCA.
        Moto: bool option
        ///Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Network: PaymentMethodDetailsCardNetwork option
        ///If this card has network token credentials, this contains the details of the network token credentials.
        NetworkToken: PaymentMethodDetailsCardNetworkToken option
        ///Populated if this transaction used 3D Secure authentication.
        ThreeDSecure: ThreeDSecureDetailsCharge option
        ///If this Card is part of a card wallet, this contains the details of the card wallet.
        Wallet: PaymentMethodDetailsCardWallet option
    }
    with
        static member New (brand: PaymentMethodDetailsCardBrand option, checks: PaymentMethodDetailsCardChecks option, country: string option, expMonth: int, expYear: int, funding: PaymentMethodDetailsCardFunding option, installments: PaymentMethodDetailsCardInstallments option, last4: string option, mandate: string option, network: PaymentMethodDetailsCardNetwork option, threeDSecure: ThreeDSecureDetailsCharge option, wallet: PaymentMethodDetailsCardWallet option, ?description: string option, ?fingerprint: string option, ?iin: string option, ?issuer: string option, ?moto: bool option, ?networkToken: PaymentMethodDetailsCardNetworkToken option) =
            {
                PaymentMethodDetailsCard.Brand = brand //required
                PaymentMethodDetailsCard.Checks = checks //required
                PaymentMethodDetailsCard.Country = country //required
                PaymentMethodDetailsCard.ExpMonth = expMonth //required
                PaymentMethodDetailsCard.ExpYear = expYear //required
                PaymentMethodDetailsCard.Funding = funding //required
                PaymentMethodDetailsCard.Installments = installments //required
                PaymentMethodDetailsCard.Last4 = last4 //required
                PaymentMethodDetailsCard.Mandate = mandate //required
                PaymentMethodDetailsCard.Network = network //required
                PaymentMethodDetailsCard.ThreeDSecure = threeDSecure //required
                PaymentMethodDetailsCard.Wallet = wallet //required
                PaymentMethodDetailsCard.Description = description |> Option.flatten
                PaymentMethodDetailsCard.Fingerprint = fingerprint |> Option.flatten
                PaymentMethodDetailsCard.Iin = iin |> Option.flatten
                PaymentMethodDetailsCard.Issuer = issuer |> Option.flatten
                PaymentMethodDetailsCard.Moto = moto |> Option.flatten
                PaymentMethodDetailsCard.NetworkToken = networkToken |> Option.flatten
            }

    and PaymentMethodDetailsCardBrand =
        | Amex
        | Diners
        | Discover
        | EftposAu
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodDetailsCardFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and PaymentMethodDetailsCardNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodDetailsCardChecks = {
        ///If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
        [<JsonField(Name="address_line1_check")>]AddressLine1Check: PaymentMethodDetailsCardChecksAddressLine1Check option
        ///If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
        AddressPostalCodeCheck: PaymentMethodDetailsCardChecksAddressPostalCodeCheck option
        ///If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
        CvcCheck: PaymentMethodDetailsCardChecksCvcCheck option
    }
    with
        static member New (addressLine1Check: PaymentMethodDetailsCardChecksAddressLine1Check option, addressPostalCodeCheck: PaymentMethodDetailsCardChecksAddressPostalCodeCheck option, cvcCheck: PaymentMethodDetailsCardChecksCvcCheck option) =
            {
                PaymentMethodDetailsCardChecks.AddressLine1Check = addressLine1Check //required
                PaymentMethodDetailsCardChecks.AddressPostalCodeCheck = addressPostalCodeCheck //required
                PaymentMethodDetailsCardChecks.CvcCheck = cvcCheck //required
            }

    and PaymentMethodDetailsCardChecksAddressLine1Check =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and PaymentMethodDetailsCardChecksAddressPostalCodeCheck =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and PaymentMethodDetailsCardChecksCvcCheck =
        | Pass
        | Fail
        | Unavailable
        | Unchecked

    and PaymentMethodDetailsCardInstallments = {
        ///Installment plan selected for the payment.
        Plan: PaymentMethodDetailsCardInstallmentsPlan option
    }
    with
        static member New (plan: PaymentMethodDetailsCardInstallmentsPlan option) =
            {
                PaymentMethodDetailsCardInstallments.Plan = plan //required
            }

    and PaymentMethodDetailsCardInstallmentsPlan = {
        ///For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
        Count: int option
    }
    with
        ///For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
        ///One of `month`.
        member _.Interval = "month"
        ///Type of installment plan, one of `fixed_count`.
        member _.Type = "fixed_count"

        static member New (count: int option) =
            {
                PaymentMethodDetailsCardInstallmentsPlan.Count = count //required
            }

    and PaymentMethodDetailsCardNetworkToken = {
        ///Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction.
        Used: bool
    }
    with
        static member New (used: bool) =
            {
                PaymentMethodDetailsCardNetworkToken.Used = used //required
            }

    and PaymentMethodDetailsCardPresent = {
        ///The authorized amount
        AmountAuthorized: int option
        ///Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Brand: PaymentMethodDetailsCardPresentBrand option
        ///When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CaptureBefore: DateTime option
        ///The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
        CardholderName: string option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Authorization response cryptogram.
        EmvAuthData: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: PaymentMethodDetailsCardPresentFunding option
        ///ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
        GeneratedCard: string option
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
        IncrementalAuthorizationSupported: bool
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string option
        ///Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Network: PaymentMethodDetailsCardPresentNetwork option
        ///Defines whether the authorized amount can be over-captured or not
        OvercaptureSupported: bool
        ///How card details were read in this transaction.
        ReadMethod: PaymentMethodDetailsCardPresentReadMethod option
        ///A collection of fields required to be displayed on receipts. Only required for EMV transactions.
        Receipt: PaymentMethodDetailsCardPresentReceipt option
    }
    with
        static member New (amountAuthorized: int option, brand: PaymentMethodDetailsCardPresentBrand option, cardholderName: string option, country: string option, emvAuthData: string option, expMonth: int, expYear: int, fingerprint: string option, funding: PaymentMethodDetailsCardPresentFunding option, generatedCard: string option, incrementalAuthorizationSupported: bool, last4: string option, network: PaymentMethodDetailsCardPresentNetwork option, overcaptureSupported: bool, readMethod: PaymentMethodDetailsCardPresentReadMethod option, receipt: PaymentMethodDetailsCardPresentReceipt option, ?captureBefore: DateTime, ?description: string option, ?iin: string option, ?issuer: string option) =
            {
                PaymentMethodDetailsCardPresent.AmountAuthorized = amountAuthorized //required
                PaymentMethodDetailsCardPresent.Brand = brand //required
                PaymentMethodDetailsCardPresent.CardholderName = cardholderName //required
                PaymentMethodDetailsCardPresent.Country = country //required
                PaymentMethodDetailsCardPresent.EmvAuthData = emvAuthData //required
                PaymentMethodDetailsCardPresent.ExpMonth = expMonth //required
                PaymentMethodDetailsCardPresent.ExpYear = expYear //required
                PaymentMethodDetailsCardPresent.Fingerprint = fingerprint //required
                PaymentMethodDetailsCardPresent.Funding = funding //required
                PaymentMethodDetailsCardPresent.GeneratedCard = generatedCard //required
                PaymentMethodDetailsCardPresent.IncrementalAuthorizationSupported = incrementalAuthorizationSupported //required
                PaymentMethodDetailsCardPresent.Last4 = last4 //required
                PaymentMethodDetailsCardPresent.Network = network //required
                PaymentMethodDetailsCardPresent.OvercaptureSupported = overcaptureSupported //required
                PaymentMethodDetailsCardPresent.ReadMethod = readMethod //required
                PaymentMethodDetailsCardPresent.Receipt = receipt //required
                PaymentMethodDetailsCardPresent.CaptureBefore = captureBefore
                PaymentMethodDetailsCardPresent.Description = description |> Option.flatten
                PaymentMethodDetailsCardPresent.Iin = iin |> Option.flatten
                PaymentMethodDetailsCardPresent.Issuer = issuer |> Option.flatten
            }

    and PaymentMethodDetailsCardPresentBrand =
        | Amex
        | Diners
        | Discover
        | EftposAu
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodDetailsCardPresentFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and PaymentMethodDetailsCardPresentNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodDetailsCardPresentReadMethod =
        | ContactEmv
        | ContactlessEmv
        | ContactlessMagstripeMode
        | MagneticStripeFallback
        | MagneticStripeTrack2

    and PaymentMethodDetailsCardPresentReceipt = {
        ///The type of account being debited or credited
        AccountType: PaymentMethodDetailsCardPresentReceiptAccountType option
        ///EMV tag 9F26, cryptogram generated by the integrated circuit chip.
        ApplicationCryptogram: string option
        ///Mnenomic of the Application Identifier.
        ApplicationPreferredName: string option
        ///Identifier for this transaction.
        AuthorizationCode: string option
        ///EMV tag 8A. A code returned by the card issuer.
        AuthorizationResponseCode: string option
        ///How the cardholder verified ownership of the card.
        CardholderVerificationMethod: string option
        ///EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
        DedicatedFileName: string option
        ///The outcome of a series of EMV functions performed by the card reader.
        TerminalVerificationResults: string option
        ///An indication of various EMV functions performed during the transaction.
        TransactionStatusInformation: string option
    }
    with
        static member New (applicationCryptogram: string option, applicationPreferredName: string option, authorizationCode: string option, authorizationResponseCode: string option, cardholderVerificationMethod: string option, dedicatedFileName: string option, terminalVerificationResults: string option, transactionStatusInformation: string option, ?accountType: PaymentMethodDetailsCardPresentReceiptAccountType) =
            {
                PaymentMethodDetailsCardPresentReceipt.ApplicationCryptogram = applicationCryptogram //required
                PaymentMethodDetailsCardPresentReceipt.ApplicationPreferredName = applicationPreferredName //required
                PaymentMethodDetailsCardPresentReceipt.AuthorizationCode = authorizationCode //required
                PaymentMethodDetailsCardPresentReceipt.AuthorizationResponseCode = authorizationResponseCode //required
                PaymentMethodDetailsCardPresentReceipt.CardholderVerificationMethod = cardholderVerificationMethod //required
                PaymentMethodDetailsCardPresentReceipt.DedicatedFileName = dedicatedFileName //required
                PaymentMethodDetailsCardPresentReceipt.TerminalVerificationResults = terminalVerificationResults //required
                PaymentMethodDetailsCardPresentReceipt.TransactionStatusInformation = transactionStatusInformation //required
                PaymentMethodDetailsCardPresentReceipt.AccountType = accountType
            }

    and PaymentMethodDetailsCardPresentReceiptAccountType =
        | Checking
        | Credit
        | Prepaid
        | Unknown

    and PaymentMethodDetailsCardWallet = {
        AmexExpressCheckout: PaymentMethodDetailsCardWalletAmexExpressCheckout option
        ApplePay: PaymentMethodDetailsCardWalletApplePay option
        ///(For tokenized numbers only.) The last four digits of the device account number.
        [<JsonField(Name="dynamic_last4")>]DynamicLast4: string option
        GooglePay: PaymentMethodDetailsCardWalletGooglePay option
        Link: PaymentMethodDetailsCardWalletLink option
        Masterpass: PaymentMethodDetailsCardWalletMasterpass option
        SamsungPay: PaymentMethodDetailsCardWalletSamsungPay option
        ///The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
        Type: PaymentMethodDetailsCardWalletType
        VisaCheckout: PaymentMethodDetailsCardWalletVisaCheckout option
    }
    with
        static member New (dynamicLast4: string option, ``type``: PaymentMethodDetailsCardWalletType, ?amexExpressCheckout: PaymentMethodDetailsCardWalletAmexExpressCheckout, ?applePay: PaymentMethodDetailsCardWalletApplePay, ?googlePay: PaymentMethodDetailsCardWalletGooglePay, ?link: PaymentMethodDetailsCardWalletLink, ?masterpass: PaymentMethodDetailsCardWalletMasterpass, ?samsungPay: PaymentMethodDetailsCardWalletSamsungPay, ?visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout) =
            {
                PaymentMethodDetailsCardWallet.DynamicLast4 = dynamicLast4 //required
                PaymentMethodDetailsCardWallet.Type = ``type`` //required
                PaymentMethodDetailsCardWallet.AmexExpressCheckout = amexExpressCheckout
                PaymentMethodDetailsCardWallet.ApplePay = applePay
                PaymentMethodDetailsCardWallet.GooglePay = googlePay
                PaymentMethodDetailsCardWallet.Link = link
                PaymentMethodDetailsCardWallet.Masterpass = masterpass
                PaymentMethodDetailsCardWallet.SamsungPay = samsungPay
                PaymentMethodDetailsCardWallet.VisaCheckout = visaCheckout
            }

    and PaymentMethodDetailsCardWalletType =
        | AmexExpressCheckout
        | ApplePay
        | GooglePay
        | Link
        | Masterpass
        | SamsungPay
        | VisaCheckout

    and PaymentMethodDetailsCardWalletAmexExpressCheckout = {
        PaymentMethodDetailsCardWalletAmexExpressCheckout: string option
    }
    with
        static member New (?paymentMethodDetailsCardWalletAmexExpressCheckout: string option) =
            {
                PaymentMethodDetailsCardWalletAmexExpressCheckout.PaymentMethodDetailsCardWalletAmexExpressCheckout = paymentMethodDetailsCardWalletAmexExpressCheckout |> Option.flatten
            }

    and PaymentMethodDetailsCardWalletApplePay = {
        PaymentMethodDetailsCardWalletApplePay: string option
    }
    with
        static member New (?paymentMethodDetailsCardWalletApplePay: string option) =
            {
                PaymentMethodDetailsCardWalletApplePay.PaymentMethodDetailsCardWalletApplePay = paymentMethodDetailsCardWalletApplePay |> Option.flatten
            }

    and PaymentMethodDetailsCardWalletGooglePay = {
        PaymentMethodDetailsCardWalletGooglePay: string option
    }
    with
        static member New (?paymentMethodDetailsCardWalletGooglePay: string option) =
            {
                PaymentMethodDetailsCardWalletGooglePay.PaymentMethodDetailsCardWalletGooglePay = paymentMethodDetailsCardWalletGooglePay |> Option.flatten
            }

    and PaymentMethodDetailsCardWalletLink = {
        PaymentMethodDetailsCardWalletLink: string option
    }
    with
        static member New (?paymentMethodDetailsCardWalletLink: string option) =
            {
                PaymentMethodDetailsCardWalletLink.PaymentMethodDetailsCardWalletLink = paymentMethodDetailsCardWalletLink |> Option.flatten
            }

    and PaymentMethodDetailsCardWalletMasterpass = {
        ///Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        BillingAddress: Address option
        ///Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Email: string option
        ///Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Name: string option
        ///Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ShippingAddress: Address option
    }
    with
        static member New (billingAddress: Address option, email: string option, name: string option, shippingAddress: Address option) =
            {
                PaymentMethodDetailsCardWalletMasterpass.BillingAddress = billingAddress //required
                PaymentMethodDetailsCardWalletMasterpass.Email = email //required
                PaymentMethodDetailsCardWalletMasterpass.Name = name //required
                PaymentMethodDetailsCardWalletMasterpass.ShippingAddress = shippingAddress //required
            }

    and PaymentMethodDetailsCardWalletSamsungPay = {
        PaymentMethodDetailsCardWalletSamsungPay: string option
    }
    with
        static member New (?paymentMethodDetailsCardWalletSamsungPay: string option) =
            {
                PaymentMethodDetailsCardWalletSamsungPay.PaymentMethodDetailsCardWalletSamsungPay = paymentMethodDetailsCardWalletSamsungPay |> Option.flatten
            }

    and PaymentMethodDetailsCardWalletVisaCheckout = {
        ///Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        BillingAddress: Address option
        ///Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Email: string option
        ///Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        Name: string option
        ///Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ShippingAddress: Address option
    }
    with
        static member New (billingAddress: Address option, email: string option, name: string option, shippingAddress: Address option) =
            {
                PaymentMethodDetailsCardWalletVisaCheckout.BillingAddress = billingAddress //required
                PaymentMethodDetailsCardWalletVisaCheckout.Email = email //required
                PaymentMethodDetailsCardWalletVisaCheckout.Name = name //required
                PaymentMethodDetailsCardWalletVisaCheckout.ShippingAddress = shippingAddress //required
            }

    and PaymentMethodDetailsCashapp = {
        ///A unique and immutable identifier assigned by Cash App to every buyer.
        BuyerId: string option
        ///A public identifier for buyers using Cash App.
        Cashtag: string option
    }
    with
        static member New (buyerId: string option, cashtag: string option) =
            {
                PaymentMethodDetailsCashapp.BuyerId = buyerId //required
                PaymentMethodDetailsCashapp.Cashtag = cashtag //required
            }

    and PaymentMethodDetailsCustomerBalance = {
        PaymentMethodDetailsCustomerBalance: string option
    }
    with
        static member New (?paymentMethodDetailsCustomerBalance: string option) =
            {
                PaymentMethodDetailsCustomerBalance.PaymentMethodDetailsCustomerBalance = paymentMethodDetailsCustomerBalance |> Option.flatten
            }

    and PaymentMethodDetailsEps = {
        ///The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
        Bank: PaymentMethodDetailsEpsBank option
        ///Owner's verified full name. Values are verified or provided by EPS directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ///EPS rarely provides this information so the attribute is usually empty.
        VerifiedName: string option
    }
    with
        static member New (bank: PaymentMethodDetailsEpsBank option, verifiedName: string option) =
            {
                PaymentMethodDetailsEps.Bank = bank //required
                PaymentMethodDetailsEps.VerifiedName = verifiedName //required
            }

    and PaymentMethodDetailsEpsBank =
        | ArzteUndApothekerBank
        | AustrianAnadiBankAg
        | BankAustria
        | BankhausCarlSpangler
        | BankhausSchelhammerUndSchatteraAg
        | BawagPskAg
        | BksBankAg
        | BrullKallmusBankAg
        | BtvVierLanderBank
        | CapitalBankGraweGruppeAg
        | DeutscheBankAg
        | Dolomitenbank
        | EasybankAg
        | ErsteBankUndSparkassen
        | HypoAlpeadriabankInternationalAg
        | HypoBankBurgenlandAktiengesellschaft
        | HypoNoeLbFurNiederosterreichUWien
        | HypoOberosterreichSalzburgSteiermark
        | HypoTirolBankAg
        | HypoVorarlbergBankAg
        | MarchfelderBank
        | OberbankAg
        | RaiffeisenBankengruppeOsterreich
        | SchoellerbankAg
        | SpardaBankWien
        | VolksbankGruppe
        | VolkskreditbankAg
        | VrBankBraunau

    and PaymentMethodDetailsFpx = {
        ///Account holder type, if provided. Can be one of `individual` or `company`.
        AccountHolderType: PaymentMethodDetailsFpxAccountHolderType option
        ///The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
        Bank: PaymentMethodDetailsFpxBank
        ///Unique transaction id generated by FPX for every request from the merchant
        TransactionId: string option
    }
    with
        static member New (accountHolderType: PaymentMethodDetailsFpxAccountHolderType option, bank: PaymentMethodDetailsFpxBank, transactionId: string option) =
            {
                PaymentMethodDetailsFpx.AccountHolderType = accountHolderType //required
                PaymentMethodDetailsFpx.Bank = bank //required
                PaymentMethodDetailsFpx.TransactionId = transactionId //required
            }

    and PaymentMethodDetailsFpxAccountHolderType =
        | Company
        | Individual

    and PaymentMethodDetailsFpxBank =
        | AffinBank
        | Agrobank
        | AllianceBank
        | Ambank
        | BankIslam
        | BankMuamalat
        | BankOfChina
        | BankRakyat
        | Bsn
        | Cimb
        | DeutscheBank
        | HongLeongBank
        | Hsbc
        | Kfh
        | Maybank2e
        | Maybank2u
        | Ocbc
        | PbEnterprise
        | PublicBank
        | Rhb
        | StandardChartered
        | Uob

    and PaymentMethodDetailsGiropay = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Bank Identifier Code of the bank associated with the bank account.
        Bic: string option
        ///Owner's verified full name. Values are verified or provided by Giropay directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ///Giropay rarely provides this information so the attribute is usually empty.
        VerifiedName: string option
    }
    with
        static member New (bankCode: string option, bankName: string option, bic: string option, verifiedName: string option) =
            {
                PaymentMethodDetailsGiropay.BankCode = bankCode //required
                PaymentMethodDetailsGiropay.BankName = bankName //required
                PaymentMethodDetailsGiropay.Bic = bic //required
                PaymentMethodDetailsGiropay.VerifiedName = verifiedName //required
            }

    and PaymentMethodDetailsGrabpay = {
        ///Unique transaction id generated by GrabPay
        TransactionId: string option
    }
    with
        static member New (transactionId: string option) =
            {
                PaymentMethodDetailsGrabpay.TransactionId = transactionId //required
            }

    and PaymentMethodDetailsIdeal = {
        ///The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
        Bank: PaymentMethodDetailsIdealBank option
        ///The Bank Identifier Code of the customer's bank.
        Bic: PaymentMethodDetailsIdealBic option
        ///The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
        GeneratedSepaDebit: PaymentMethodDetailsIdealGeneratedSepaDebit'AnyOf option
        ///The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
        GeneratedSepaDebitMandate: PaymentMethodDetailsIdealGeneratedSepaDebitMandate'AnyOf option
        ///Last four characters of the IBAN.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///Owner's verified full name. Values are verified or provided by iDEAL directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
    }
    with
        static member New (bank: PaymentMethodDetailsIdealBank option, bic: PaymentMethodDetailsIdealBic option, generatedSepaDebit: PaymentMethodDetailsIdealGeneratedSepaDebit'AnyOf option, generatedSepaDebitMandate: PaymentMethodDetailsIdealGeneratedSepaDebitMandate'AnyOf option, ibanLast4: string option, verifiedName: string option) =
            {
                PaymentMethodDetailsIdeal.Bank = bank //required
                PaymentMethodDetailsIdeal.Bic = bic //required
                PaymentMethodDetailsIdeal.GeneratedSepaDebit = generatedSepaDebit //required
                PaymentMethodDetailsIdeal.GeneratedSepaDebitMandate = generatedSepaDebitMandate //required
                PaymentMethodDetailsIdeal.IbanLast4 = ibanLast4 //required
                PaymentMethodDetailsIdeal.VerifiedName = verifiedName //required
            }

    and PaymentMethodDetailsIdealBank =
        | AbnAmro
        | AsnBank
        | Bunq
        | Handelsbanken
        | Ing
        | Knab
        | Moneyou
        | Rabobank
        | Regiobank
        | Revolut
        | SnsBank
        | TriodosBank
        | VanLanschot
        | Yoursafe

    and PaymentMethodDetailsIdealBic =
        | [<JsonUnionCase("ABNANL2A")>] ABNANL2A
        | [<JsonUnionCase("ASNBNL21")>] ASNBNL21
        | [<JsonUnionCase("BITSNL2A")>] BITSNL2A
        | [<JsonUnionCase("BUNQNL2A")>] BUNQNL2A
        | [<JsonUnionCase("FVLBNL22")>] FVLBNL22
        | [<JsonUnionCase("HANDNL2A")>] HANDNL2A
        | [<JsonUnionCase("INGBNL2A")>] INGBNL2A
        | [<JsonUnionCase("KNABNL2H")>] KNABNL2H
        | [<JsonUnionCase("MOYONL21")>] MOYONL21
        | [<JsonUnionCase("RABONL2U")>] RABONL2U
        | [<JsonUnionCase("RBRBNL21")>] RBRBNL21
        | [<JsonUnionCase("REVOIE23")>] REVOIE23
        | [<JsonUnionCase("REVOLT21")>] REVOLT21
        | [<JsonUnionCase("SNSBNL2A")>] SNSBNL2A
        | [<JsonUnionCase("TRIONL2U")>] TRIONL2U

    and PaymentMethodDetailsIdealGeneratedSepaDebit'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and PaymentMethodDetailsIdealGeneratedSepaDebitMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and PaymentMethodDetailsInteracPresent = {
        ///Card brand. Can be `interac`, `mastercard` or `visa`.
        Brand: PaymentMethodDetailsInteracPresentBrand option
        ///The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
        CardholderName: string option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Authorization response cryptogram.
        EmvAuthData: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: PaymentMethodDetailsInteracPresentFunding option
        ///ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
        GeneratedCard: string option
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string option
        ///Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Network: PaymentMethodDetailsInteracPresentNetwork option
        ///EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
        PreferredLocales: string list option
        ///How card details were read in this transaction.
        ReadMethod: PaymentMethodDetailsInteracPresentReadMethod option
        ///A collection of fields required to be displayed on receipts. Only required for EMV transactions.
        Receipt: PaymentMethodDetailsInteracPresentReceipt option
    }
    with
        static member New (brand: PaymentMethodDetailsInteracPresentBrand option, cardholderName: string option, country: string option, emvAuthData: string option, expMonth: int, expYear: int, fingerprint: string option, funding: PaymentMethodDetailsInteracPresentFunding option, generatedCard: string option, last4: string option, network: PaymentMethodDetailsInteracPresentNetwork option, preferredLocales: string list option, readMethod: PaymentMethodDetailsInteracPresentReadMethod option, receipt: PaymentMethodDetailsInteracPresentReceipt option, ?description: string option, ?iin: string option, ?issuer: string option) =
            {
                PaymentMethodDetailsInteracPresent.Brand = brand //required
                PaymentMethodDetailsInteracPresent.CardholderName = cardholderName //required
                PaymentMethodDetailsInteracPresent.Country = country //required
                PaymentMethodDetailsInteracPresent.EmvAuthData = emvAuthData //required
                PaymentMethodDetailsInteracPresent.ExpMonth = expMonth //required
                PaymentMethodDetailsInteracPresent.ExpYear = expYear //required
                PaymentMethodDetailsInteracPresent.Fingerprint = fingerprint //required
                PaymentMethodDetailsInteracPresent.Funding = funding //required
                PaymentMethodDetailsInteracPresent.GeneratedCard = generatedCard //required
                PaymentMethodDetailsInteracPresent.Last4 = last4 //required
                PaymentMethodDetailsInteracPresent.Network = network //required
                PaymentMethodDetailsInteracPresent.PreferredLocales = preferredLocales //required
                PaymentMethodDetailsInteracPresent.ReadMethod = readMethod //required
                PaymentMethodDetailsInteracPresent.Receipt = receipt //required
                PaymentMethodDetailsInteracPresent.Description = description |> Option.flatten
                PaymentMethodDetailsInteracPresent.Iin = iin |> Option.flatten
                PaymentMethodDetailsInteracPresent.Issuer = issuer |> Option.flatten
            }

    and PaymentMethodDetailsInteracPresentBrand =
        | Interac
        | Mastercard
        | Visa

    and PaymentMethodDetailsInteracPresentFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and PaymentMethodDetailsInteracPresentNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and PaymentMethodDetailsInteracPresentReadMethod =
        | ContactEmv
        | ContactlessEmv
        | ContactlessMagstripeMode
        | MagneticStripeFallback
        | MagneticStripeTrack2

    and PaymentMethodDetailsInteracPresentReceipt = {
        ///The type of account being debited or credited
        AccountType: PaymentMethodDetailsInteracPresentReceiptAccountType option
        ///EMV tag 9F26, cryptogram generated by the integrated circuit chip.
        ApplicationCryptogram: string option
        ///Mnenomic of the Application Identifier.
        ApplicationPreferredName: string option
        ///Identifier for this transaction.
        AuthorizationCode: string option
        ///EMV tag 8A. A code returned by the card issuer.
        AuthorizationResponseCode: string option
        ///How the cardholder verified ownership of the card.
        CardholderVerificationMethod: string option
        ///EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
        DedicatedFileName: string option
        ///The outcome of a series of EMV functions performed by the card reader.
        TerminalVerificationResults: string option
        ///An indication of various EMV functions performed during the transaction.
        TransactionStatusInformation: string option
    }
    with
        static member New (applicationCryptogram: string option, applicationPreferredName: string option, authorizationCode: string option, authorizationResponseCode: string option, cardholderVerificationMethod: string option, dedicatedFileName: string option, terminalVerificationResults: string option, transactionStatusInformation: string option, ?accountType: PaymentMethodDetailsInteracPresentReceiptAccountType) =
            {
                PaymentMethodDetailsInteracPresentReceipt.ApplicationCryptogram = applicationCryptogram //required
                PaymentMethodDetailsInteracPresentReceipt.ApplicationPreferredName = applicationPreferredName //required
                PaymentMethodDetailsInteracPresentReceipt.AuthorizationCode = authorizationCode //required
                PaymentMethodDetailsInteracPresentReceipt.AuthorizationResponseCode = authorizationResponseCode //required
                PaymentMethodDetailsInteracPresentReceipt.CardholderVerificationMethod = cardholderVerificationMethod //required
                PaymentMethodDetailsInteracPresentReceipt.DedicatedFileName = dedicatedFileName //required
                PaymentMethodDetailsInteracPresentReceipt.TerminalVerificationResults = terminalVerificationResults //required
                PaymentMethodDetailsInteracPresentReceipt.TransactionStatusInformation = transactionStatusInformation //required
                PaymentMethodDetailsInteracPresentReceipt.AccountType = accountType
            }

    and PaymentMethodDetailsInteracPresentReceiptAccountType =
        | Checking
        | Savings
        | Unknown

    and PaymentMethodDetailsKlarna = {
        ///The Klarna payment method used for this transaction.
        ///Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
        PaymentMethodCategory: string option
        ///Preferred language of the Klarna authorization page that the customer is redirected to.
        ///Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
        PreferredLocale: string option
    }
    with
        static member New (paymentMethodCategory: string option, preferredLocale: string option) =
            {
                PaymentMethodDetailsKlarna.PaymentMethodCategory = paymentMethodCategory //required
                PaymentMethodDetailsKlarna.PreferredLocale = preferredLocale //required
            }

    and PaymentMethodDetailsKonbini = {
        ///If the payment succeeded, this contains the details of the convenience store where the payment was completed.
        Store: PaymentMethodDetailsKonbiniStore option
    }
    with
        static member New (store: PaymentMethodDetailsKonbiniStore option) =
            {
                PaymentMethodDetailsKonbini.Store = store //required
            }

    and PaymentMethodDetailsKonbiniStore = {
        ///The name of the convenience store chain where the payment was completed.
        Chain: PaymentMethodDetailsKonbiniStoreChain option
    }
    with
        static member New (chain: PaymentMethodDetailsKonbiniStoreChain option) =
            {
                PaymentMethodDetailsKonbiniStore.Chain = chain //required
            }

    and PaymentMethodDetailsKonbiniStoreChain =
        | Familymart
        | Lawson
        | Ministop
        | Seicomart

    and PaymentMethodDetailsLink = {
        ///Two-letter ISO code representing the funding source country beneath the Link payment.
        ///You could use this attribute to get a sense of international fees.
        Country: string option
    }
    with
        static member New (country: string option) =
            {
                PaymentMethodDetailsLink.Country = country //required
            }

    and PaymentMethodDetailsMultibanco = {
        ///Entity number associated with this Multibanco payment.
        Entity: string option
        ///Reference number associated with this Multibanco payment.
        Reference: string option
    }
    with
        static member New (entity: string option, reference: string option) =
            {
                PaymentMethodDetailsMultibanco.Entity = entity //required
                PaymentMethodDetailsMultibanco.Reference = reference //required
            }

    and PaymentMethodDetailsOxxo = {
        ///OXXO reference number
        Number: string option
    }
    with
        static member New (number: string option) =
            {
                PaymentMethodDetailsOxxo.Number = number //required
            }

    and PaymentMethodDetailsP24 = {
        ///The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
        Bank: PaymentMethodDetailsP24Bank option
        ///Unique reference for this Przelewy24 payment.
        Reference: string option
        ///Owner's verified full name. Values are verified or provided by Przelewy24 directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        ///Przelewy24 rarely provides this information so the attribute is usually empty.
        VerifiedName: string option
    }
    with
        static member New (bank: PaymentMethodDetailsP24Bank option, reference: string option, verifiedName: string option) =
            {
                PaymentMethodDetailsP24.Bank = bank //required
                PaymentMethodDetailsP24.Reference = reference //required
                PaymentMethodDetailsP24.VerifiedName = verifiedName //required
            }

    and PaymentMethodDetailsP24Bank =
        | AliorBank
        | BankMillennium
        | BankNowyBfgSa
        | BankPekaoSa
        | BankiSpbdzielcze
        | Blik
        | BnpParibas
        | Boz
        | CitiHandlowy
        | CreditAgricole
        | Envelobank
        | EtransferPocztowy24
        | GetinBank
        | Ideabank
        | Ing
        | Inteligo
        | MbankMtransfer
        | NestPrzelew
        | NoblePay
        | PbacZIpko
        | PlusBank
        | SantanderPrzelew24
        | TmobileUsbugiBankowe
        | ToyotaBank
        | VolkswagenBank

    and PaymentMethodDetailsPaynow = {
        ///Reference number associated with this PayNow payment
        Reference: string option
    }
    with
        static member New (reference: string option) =
            {
                PaymentMethodDetailsPaynow.Reference = reference //required
            }

    and PaymentMethodDetailsPaypal = {
        ///Owner's email. Values are provided by PayPal directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        PayerEmail: string option
        ///PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
        PayerId: string option
        ///Owner's full name. Values provided by PayPal directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        PayerName: string option
        ///The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction.
        SellerProtection: PaypalSellerProtection option
        ///A unique ID generated by PayPal for this transaction.
        TransactionId: string option
    }
    with
        static member New (?payerEmail: string option, ?payerId: string option, ?payerName: string option, ?sellerProtection: PaypalSellerProtection option, ?transactionId: string option) =
            {
                PaymentMethodDetailsPaypal.PayerEmail = payerEmail |> Option.flatten
                PaymentMethodDetailsPaypal.PayerId = payerId |> Option.flatten
                PaymentMethodDetailsPaypal.PayerName = payerName |> Option.flatten
                PaymentMethodDetailsPaypal.SellerProtection = sellerProtection |> Option.flatten
                PaymentMethodDetailsPaypal.TransactionId = transactionId |> Option.flatten
            }

    and PaymentMethodDetailsPix = {
        ///Unique transaction id generated by BCB
        BankTransactionId: string option
    }
    with
        static member New (?bankTransactionId: string option) =
            {
                PaymentMethodDetailsPix.BankTransactionId = bankTransactionId |> Option.flatten
            }

    and PaymentMethodDetailsPromptpay = {
        ///Bill reference generated by PromptPay
        Reference: string option
    }
    with
        static member New (reference: string option) =
            {
                PaymentMethodDetailsPromptpay.Reference = reference //required
            }

    and PaymentMethodDetailsSepaCreditTransfer = {
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Bank Identifier Code of the bank associated with the bank account.
        Bic: string option
        ///IBAN of the bank account to transfer funds to.
        Iban: string option
    }
    with
        static member New (bankName: string option, bic: string option, iban: string option) =
            {
                PaymentMethodDetailsSepaCreditTransfer.BankName = bankName //required
                PaymentMethodDetailsSepaCreditTransfer.Bic = bic //required
                PaymentMethodDetailsSepaCreditTransfer.Iban = iban //required
            }

    and PaymentMethodDetailsSepaDebit = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Branch code of bank associated with the bank account.
        BranchCode: string option
        ///Two-letter ISO code representing the country the bank account is located in.
        Country: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four characters of the IBAN.
        [<JsonField(Name="last4")>]Last4: string option
        ///ID of the mandate used to make this payment.
        Mandate: string option
    }
    with
        static member New (bankCode: string option, branchCode: string option, country: string option, fingerprint: string option, last4: string option, mandate: string option) =
            {
                PaymentMethodDetailsSepaDebit.BankCode = bankCode //required
                PaymentMethodDetailsSepaDebit.BranchCode = branchCode //required
                PaymentMethodDetailsSepaDebit.Country = country //required
                PaymentMethodDetailsSepaDebit.Fingerprint = fingerprint //required
                PaymentMethodDetailsSepaDebit.Last4 = last4 //required
                PaymentMethodDetailsSepaDebit.Mandate = mandate //required
            }

    and PaymentMethodDetailsSofort = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Bank Identifier Code of the bank associated with the bank account.
        Bic: string option
        ///Two-letter ISO code representing the country the bank account is located in.
        Country: string option
        ///The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
        GeneratedSepaDebit: PaymentMethodDetailsSofortGeneratedSepaDebit'AnyOf option
        ///The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
        GeneratedSepaDebitMandate: PaymentMethodDetailsSofortGeneratedSepaDebitMandate'AnyOf option
        ///Last four characters of the IBAN.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///Preferred language of the SOFORT authorization page that the customer is redirected to.
        ///Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
        PreferredLanguage: PaymentMethodDetailsSofortPreferredLanguage option
        ///Owner's verified full name. Values are verified or provided by SOFORT directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
    }
    with
        static member New (bankCode: string option, bankName: string option, bic: string option, country: string option, generatedSepaDebit: PaymentMethodDetailsSofortGeneratedSepaDebit'AnyOf option, generatedSepaDebitMandate: PaymentMethodDetailsSofortGeneratedSepaDebitMandate'AnyOf option, ibanLast4: string option, preferredLanguage: PaymentMethodDetailsSofortPreferredLanguage option, verifiedName: string option) =
            {
                PaymentMethodDetailsSofort.BankCode = bankCode //required
                PaymentMethodDetailsSofort.BankName = bankName //required
                PaymentMethodDetailsSofort.Bic = bic //required
                PaymentMethodDetailsSofort.Country = country //required
                PaymentMethodDetailsSofort.GeneratedSepaDebit = generatedSepaDebit //required
                PaymentMethodDetailsSofort.GeneratedSepaDebitMandate = generatedSepaDebitMandate //required
                PaymentMethodDetailsSofort.IbanLast4 = ibanLast4 //required
                PaymentMethodDetailsSofort.PreferredLanguage = preferredLanguage //required
                PaymentMethodDetailsSofort.VerifiedName = verifiedName //required
            }

    and PaymentMethodDetailsSofortGeneratedSepaDebit'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and PaymentMethodDetailsSofortGeneratedSepaDebitMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and PaymentMethodDetailsSofortPreferredLanguage =
        | De
        | En
        | Es
        | Fr
        | It
        | Nl
        | Pl

    and PaymentMethodDetailsStripeAccount = {
        PaymentMethodDetailsStripeAccount: string option
    }
    with
        static member New (?paymentMethodDetailsStripeAccount: string option) =
            {
                PaymentMethodDetailsStripeAccount.PaymentMethodDetailsStripeAccount = paymentMethodDetailsStripeAccount |> Option.flatten
            }

    and PaymentMethodDetailsUsBankAccount = {
        ///Account holder type: individual or company.
        AccountHolderType: PaymentMethodDetailsUsBankAccountAccountHolderType option
        ///Account type: checkings or savings. Defaults to checking if omitted.
        AccountType: PaymentMethodDetailsUsBankAccountAccountType option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///Routing number of the bank account.
        RoutingNumber: string option
    }
    with
        static member New (accountHolderType: PaymentMethodDetailsUsBankAccountAccountHolderType option, accountType: PaymentMethodDetailsUsBankAccountAccountType option, bankName: string option, fingerprint: string option, last4: string option, routingNumber: string option) =
            {
                PaymentMethodDetailsUsBankAccount.AccountHolderType = accountHolderType //required
                PaymentMethodDetailsUsBankAccount.AccountType = accountType //required
                PaymentMethodDetailsUsBankAccount.BankName = bankName //required
                PaymentMethodDetailsUsBankAccount.Fingerprint = fingerprint //required
                PaymentMethodDetailsUsBankAccount.Last4 = last4 //required
                PaymentMethodDetailsUsBankAccount.RoutingNumber = routingNumber //required
            }

    and PaymentMethodDetailsUsBankAccountAccountHolderType =
        | Company
        | Individual

    and PaymentMethodDetailsUsBankAccountAccountType =
        | Checking
        | Savings

    and PaymentMethodDetailsWechat = {
        PaymentMethodDetailsWechat: string option
    }
    with
        static member New (?paymentMethodDetailsWechat: string option) =
            {
                PaymentMethodDetailsWechat.PaymentMethodDetailsWechat = paymentMethodDetailsWechat |> Option.flatten
            }

    and PaymentMethodDetailsWechatPay = {
        ///Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
        Fingerprint: string option
        ///Transaction ID of this particular WeChat Pay transaction.
        TransactionId: string option
    }
    with
        static member New (fingerprint: string option, transactionId: string option) =
            {
                PaymentMethodDetailsWechatPay.Fingerprint = fingerprint //required
                PaymentMethodDetailsWechatPay.TransactionId = transactionId //required
            }

    and PaymentMethodDetailsZip = {
        PaymentMethodDetailsZip: string option
    }
    with
        static member New (?paymentMethodDetailsZip: string option) =
            {
                PaymentMethodDetailsZip.PaymentMethodDetailsZip = paymentMethodDetailsZip |> Option.flatten
            }

    and PaymentMethodEps = {
        ///The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
        Bank: PaymentMethodEpsBank option
    }
    with
        static member New (bank: PaymentMethodEpsBank option) =
            {
                PaymentMethodEps.Bank = bank //required
            }

    and PaymentMethodEpsBank =
        | ArzteUndApothekerBank
        | AustrianAnadiBankAg
        | BankAustria
        | BankhausCarlSpangler
        | BankhausSchelhammerUndSchatteraAg
        | BawagPskAg
        | BksBankAg
        | BrullKallmusBankAg
        | BtvVierLanderBank
        | CapitalBankGraweGruppeAg
        | DeutscheBankAg
        | Dolomitenbank
        | EasybankAg
        | ErsteBankUndSparkassen
        | HypoAlpeadriabankInternationalAg
        | HypoBankBurgenlandAktiengesellschaft
        | HypoNoeLbFurNiederosterreichUWien
        | HypoOberosterreichSalzburgSteiermark
        | HypoTirolBankAg
        | HypoVorarlbergBankAg
        | MarchfelderBank
        | OberbankAg
        | RaiffeisenBankengruppeOsterreich
        | SchoellerbankAg
        | SpardaBankWien
        | VolksbankGruppe
        | VolkskreditbankAg
        | VrBankBraunau

    and PaymentMethodFpx = {
        ///Account holder type, if provided. Can be one of `individual` or `company`.
        AccountHolderType: PaymentMethodFpxAccountHolderType option
        ///The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
        Bank: PaymentMethodFpxBank
    }
    with
        static member New (accountHolderType: PaymentMethodFpxAccountHolderType option, bank: PaymentMethodFpxBank) =
            {
                PaymentMethodFpx.AccountHolderType = accountHolderType //required
                PaymentMethodFpx.Bank = bank //required
            }

    and PaymentMethodFpxAccountHolderType =
        | Company
        | Individual

    and PaymentMethodFpxBank =
        | AffinBank
        | Agrobank
        | AllianceBank
        | Ambank
        | BankIslam
        | BankMuamalat
        | BankOfChina
        | BankRakyat
        | Bsn
        | Cimb
        | DeutscheBank
        | HongLeongBank
        | Hsbc
        | Kfh
        | Maybank2e
        | Maybank2u
        | Ocbc
        | PbEnterprise
        | PublicBank
        | Rhb
        | StandardChartered
        | Uob

    and PaymentMethodGiropay = {
        PaymentMethodGiropay: string option
    }
    with
        static member New (?paymentMethodGiropay: string option) =
            {
                PaymentMethodGiropay.PaymentMethodGiropay = paymentMethodGiropay |> Option.flatten
            }

    and PaymentMethodGrabpay = {
        PaymentMethodGrabpay: string option
    }
    with
        static member New (?paymentMethodGrabpay: string option) =
            {
                PaymentMethodGrabpay.PaymentMethodGrabpay = paymentMethodGrabpay |> Option.flatten
            }

    and PaymentMethodIdeal = {
        ///The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
        Bank: PaymentMethodIdealBank option
        ///The Bank Identifier Code of the customer's bank, if the bank was provided.
        Bic: PaymentMethodIdealBic option
    }
    with
        static member New (bank: PaymentMethodIdealBank option, bic: PaymentMethodIdealBic option) =
            {
                PaymentMethodIdeal.Bank = bank //required
                PaymentMethodIdeal.Bic = bic //required
            }

    and PaymentMethodIdealBank =
        | AbnAmro
        | AsnBank
        | Bunq
        | Handelsbanken
        | Ing
        | Knab
        | Moneyou
        | Rabobank
        | Regiobank
        | Revolut
        | SnsBank
        | TriodosBank
        | VanLanschot
        | Yoursafe

    and PaymentMethodIdealBic =
        | [<JsonUnionCase("ABNANL2A")>] ABNANL2A
        | [<JsonUnionCase("ASNBNL21")>] ASNBNL21
        | [<JsonUnionCase("BITSNL2A")>] BITSNL2A
        | [<JsonUnionCase("BUNQNL2A")>] BUNQNL2A
        | [<JsonUnionCase("FVLBNL22")>] FVLBNL22
        | [<JsonUnionCase("HANDNL2A")>] HANDNL2A
        | [<JsonUnionCase("INGBNL2A")>] INGBNL2A
        | [<JsonUnionCase("KNABNL2H")>] KNABNL2H
        | [<JsonUnionCase("MOYONL21")>] MOYONL21
        | [<JsonUnionCase("RABONL2U")>] RABONL2U
        | [<JsonUnionCase("RBRBNL21")>] RBRBNL21
        | [<JsonUnionCase("REVOIE23")>] REVOIE23
        | [<JsonUnionCase("REVOLT21")>] REVOLT21
        | [<JsonUnionCase("SNSBNL2A")>] SNSBNL2A
        | [<JsonUnionCase("TRIONL2U")>] TRIONL2U

    and PaymentMethodInteracPresent = {
        ///Card brand. Can be `interac`, `mastercard` or `visa`.
        Brand: PaymentMethodInteracPresentBrand option
        ///The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
        CardholderName: string option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int
        ///Four-digit number representing the card's expiration year.
        ExpYear: int
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: PaymentMethodInteracPresentFunding option
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string option
        ///Contains information about card networks that can be used to process the payment.
        Networks: PaymentMethodCardPresentNetworks option
        ///EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
        PreferredLocales: string list option
        ///How card details were read in this transaction.
        ReadMethod: PaymentMethodInteracPresentReadMethod option
    }
    with
        static member New (brand: PaymentMethodInteracPresentBrand option, cardholderName: string option, country: string option, expMonth: int, expYear: int, fingerprint: string option, funding: PaymentMethodInteracPresentFunding option, last4: string option, networks: PaymentMethodCardPresentNetworks option, preferredLocales: string list option, readMethod: PaymentMethodInteracPresentReadMethod option, ?description: string option, ?iin: string option, ?issuer: string option) =
            {
                PaymentMethodInteracPresent.Brand = brand //required
                PaymentMethodInteracPresent.CardholderName = cardholderName //required
                PaymentMethodInteracPresent.Country = country //required
                PaymentMethodInteracPresent.ExpMonth = expMonth //required
                PaymentMethodInteracPresent.ExpYear = expYear //required
                PaymentMethodInteracPresent.Fingerprint = fingerprint //required
                PaymentMethodInteracPresent.Funding = funding //required
                PaymentMethodInteracPresent.Last4 = last4 //required
                PaymentMethodInteracPresent.Networks = networks //required
                PaymentMethodInteracPresent.PreferredLocales = preferredLocales //required
                PaymentMethodInteracPresent.ReadMethod = readMethod //required
                PaymentMethodInteracPresent.Description = description |> Option.flatten
                PaymentMethodInteracPresent.Iin = iin |> Option.flatten
                PaymentMethodInteracPresent.Issuer = issuer |> Option.flatten
            }

    and PaymentMethodInteracPresentBrand =
        | Interac
        | Mastercard
        | Visa

    and PaymentMethodInteracPresentFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and PaymentMethodInteracPresentReadMethod =
        | ContactEmv
        | ContactlessEmv
        | ContactlessMagstripeMode
        | MagneticStripeFallback
        | MagneticStripeTrack2

    and PaymentMethodKlarna = {
        ///The customer's date of birth, if provided.
        Dob: PaymentFlowsPrivatePaymentMethodsKlarnaDob option
    }
    with
        static member New (dob: PaymentFlowsPrivatePaymentMethodsKlarnaDob option) =
            {
                PaymentMethodKlarna.Dob = dob //required
            }

    and PaymentMethodKonbini = {
        PaymentMethodKonbini: string option
    }
    with
        static member New (?paymentMethodKonbini: string option) =
            {
                PaymentMethodKonbini.PaymentMethodKonbini = paymentMethodKonbini |> Option.flatten
            }

    and PaymentMethodLink = {
        ///Account owner's email address.
        Email: string option
        ///[Deprecated] This is a legacy parameter that no longer has any function.
        PersistentToken: string option
    }
    with
        static member New (email: string option, ?persistentToken: string) =
            {
                PaymentMethodLink.Email = email //required
                PaymentMethodLink.PersistentToken = persistentToken
            }

    and PaymentMethodOptionsAffirm = {
        ///Preferred language of the Affirm authorization page that the customer is redirected to.
        PreferredLocale: string option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (?preferredLocale: string) =
            {
                PaymentMethodOptionsAffirm.PreferredLocale = preferredLocale
            }

    and PaymentMethodOptionsAfterpayClearpay = {
        ///Order identifier shown to the customer in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
        ///the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
        Reference: string option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (reference: string option) =
            {
                PaymentMethodOptionsAfterpayClearpay.Reference = reference //required
            }

    and PaymentMethodOptionsAlipay = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsAlipaySetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: PaymentMethodOptionsAlipaySetupFutureUsage) =
            {
                PaymentMethodOptionsAlipay.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsAlipaySetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and PaymentMethodOptionsBacsDebit = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsBacsDebitSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: PaymentMethodOptionsBacsDebitSetupFutureUsage) =
            {
                PaymentMethodOptionsBacsDebit.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsBacsDebitSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentMethodOptionsBancontact = {
        ///Preferred language of the Bancontact authorization page that the customer is redirected to.
        PreferredLanguage: PaymentMethodOptionsBancontactPreferredLanguage
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsBancontactSetupFutureUsage option
    }
    with
        static member New (preferredLanguage: PaymentMethodOptionsBancontactPreferredLanguage, ?setupFutureUsage: PaymentMethodOptionsBancontactSetupFutureUsage) =
            {
                PaymentMethodOptionsBancontact.PreferredLanguage = preferredLanguage //required
                PaymentMethodOptionsBancontact.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsBancontactPreferredLanguage =
        | De
        | En
        | Fr
        | Nl

    and PaymentMethodOptionsBancontactSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and PaymentMethodOptionsBoleto = {
        ///The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
        ExpiresAfterDays: int
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsBoletoSetupFutureUsage option
    }
    with
        static member New (expiresAfterDays: int, ?setupFutureUsage: PaymentMethodOptionsBoletoSetupFutureUsage) =
            {
                PaymentMethodOptionsBoleto.ExpiresAfterDays = expiresAfterDays //required
                PaymentMethodOptionsBoleto.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsBoletoSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentMethodOptionsCardInstallments = {
        ///Installment plans that may be selected for this PaymentIntent.
        AvailablePlans: PaymentMethodDetailsCardInstallmentsPlan list option
        ///Whether Installments are enabled for this PaymentIntent.
        Enabled: bool
        ///Installment plan selected for this PaymentIntent.
        Plan: PaymentMethodDetailsCardInstallmentsPlan option
    }
    with
        static member New (availablePlans: PaymentMethodDetailsCardInstallmentsPlan list option, enabled: bool, plan: PaymentMethodDetailsCardInstallmentsPlan option) =
            {
                PaymentMethodOptionsCardInstallments.AvailablePlans = availablePlans //required
                PaymentMethodOptionsCardInstallments.Enabled = enabled //required
                PaymentMethodOptionsCardInstallments.Plan = plan //required
            }

    and PaymentMethodOptionsCardMandateOptions = {
        ///Amount to be charged for future payments.
        Amount: int
        ///One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
        AmountType: PaymentMethodOptionsCardMandateOptionsAmountType
        ///A description of the mandate or subscription that is meant to be displayed to the customer.
        Description: string option
        ///End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EndDate: DateTime option
        ///Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
        Interval: PaymentMethodOptionsCardMandateOptionsInterval
        ///The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
        IntervalCount: int option
        ///Unique identifier for the mandate or subscription.
        Reference: string
        ///Start date of the mandate or subscription. Start date should not be lesser than yesterday.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]StartDate: DateTime
        ///Specifies the type of mandates supported. Possible values are `india`.
        SupportedTypes: string list option
    }
    with
        static member New (amount: int, amountType: PaymentMethodOptionsCardMandateOptionsAmountType, description: string option, endDate: DateTime option, interval: PaymentMethodOptionsCardMandateOptionsInterval, intervalCount: int option, reference: string, startDate: DateTime, supportedTypes: string list option) =
            {
                PaymentMethodOptionsCardMandateOptions.Amount = amount //required
                PaymentMethodOptionsCardMandateOptions.AmountType = amountType //required
                PaymentMethodOptionsCardMandateOptions.Description = description //required
                PaymentMethodOptionsCardMandateOptions.EndDate = endDate //required
                PaymentMethodOptionsCardMandateOptions.Interval = interval //required
                PaymentMethodOptionsCardMandateOptions.IntervalCount = intervalCount //required
                PaymentMethodOptionsCardMandateOptions.Reference = reference //required
                PaymentMethodOptionsCardMandateOptions.StartDate = startDate //required
                PaymentMethodOptionsCardMandateOptions.SupportedTypes = supportedTypes //required
            }

    and PaymentMethodOptionsCardMandateOptionsAmountType =
        | Fixed
        | Maximum

    and PaymentMethodOptionsCardMandateOptionsInterval =
        | Day
        | Month
        | Sporadic
        | Week
        | Year

    and PaymentMethodOptionsCardPresent = {
        ///Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
        RequestExtendedAuthorization: bool option
        ///Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
        RequestIncrementalAuthorizationSupport: bool option
    }
    with
        static member New (requestExtendedAuthorization: bool option, requestIncrementalAuthorizationSupport: bool option) =
            {
                PaymentMethodOptionsCardPresent.RequestExtendedAuthorization = requestExtendedAuthorization //required
                PaymentMethodOptionsCardPresent.RequestIncrementalAuthorizationSupport = requestIncrementalAuthorizationSupport //required
            }

    and PaymentMethodOptionsCashapp = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsCashappSetupFutureUsage option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"

        static member New (?setupFutureUsage: PaymentMethodOptionsCashappSetupFutureUsage) =
            {
                PaymentMethodOptionsCashapp.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsCashappSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession
        | OnSession

    and PaymentMethodOptionsCustomerBalance = {
        BankTransfer: PaymentMethodOptionsCustomerBalanceBankTransfer option
    }
    with
        ///The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
        member _.FundingType = "bank_transfer"
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (?bankTransfer: PaymentMethodOptionsCustomerBalanceBankTransfer) =
            {
                PaymentMethodOptionsCustomerBalance.BankTransfer = bankTransfer
            }

    and PaymentMethodOptionsCustomerBalanceBankTransfer = {
        EuBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount option
        ///List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
        ///Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
        RequestedAddressTypes: PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes list option
        ///The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
        Type: PaymentMethodOptionsCustomerBalanceBankTransferType option
    }
    with
        static member New (``type``: PaymentMethodOptionsCustomerBalanceBankTransferType option, ?euBankTransfer: PaymentMethodOptionsCustomerBalanceEuBankAccount, ?requestedAddressTypes: PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes list) =
            {
                PaymentMethodOptionsCustomerBalanceBankTransfer.Type = ``type`` //required
                PaymentMethodOptionsCustomerBalanceBankTransfer.EuBankTransfer = euBankTransfer
                PaymentMethodOptionsCustomerBalanceBankTransfer.RequestedAddressTypes = requestedAddressTypes
            }

    and PaymentMethodOptionsCustomerBalanceBankTransferType =
        | EuBankTransfer
        | GbBankTransfer
        | JpBankTransfer
        | MxBankTransfer
        | UsBankTransfer

    and PaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes =
        | Aba
        | Iban
        | Sepa
        | SortCode
        | Spei
        | Swift
        | Zengin

    and PaymentMethodOptionsCustomerBalanceEuBankAccount = {
        ///The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
        Country: PaymentMethodOptionsCustomerBalanceEuBankAccountCountry
    }
    with
        static member New (country: PaymentMethodOptionsCustomerBalanceEuBankAccountCountry) =
            {
                PaymentMethodOptionsCustomerBalanceEuBankAccount.Country = country //required
            }

    and PaymentMethodOptionsCustomerBalanceEuBankAccountCountry =
        | [<JsonUnionCase("BE")>] BE
        | [<JsonUnionCase("DE")>] DE
        | [<JsonUnionCase("ES")>] ES
        | [<JsonUnionCase("FR")>] FR
        | [<JsonUnionCase("IE")>] IE
        | [<JsonUnionCase("NL")>] NL

    and PaymentMethodOptionsFpx () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOptionsGiropay () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOptionsGrabpay () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOptionsIdeal = {
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsIdealSetupFutureUsage option
    }
    with
        static member New (?setupFutureUsage: PaymentMethodOptionsIdealSetupFutureUsage) =
            {
                PaymentMethodOptionsIdeal.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsIdealSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and PaymentMethodOptionsInteracPresent = {
        PaymentMethodOptionsInteracPresent: string option
    }
    with
        static member New (?paymentMethodOptionsInteracPresent: string option) =
            {
                PaymentMethodOptionsInteracPresent.PaymentMethodOptionsInteracPresent = paymentMethodOptionsInteracPresent |> Option.flatten
            }

    and PaymentMethodOptionsKlarna = {
        ///Preferred locale of the Klarna checkout page that the customer is redirected to.
        PreferredLocale: string option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (preferredLocale: string option) =
            {
                PaymentMethodOptionsKlarna.PreferredLocale = preferredLocale //required
            }

    and PaymentMethodOptionsKonbini = {
        ///An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
        ConfirmationNumber: string option
        ///The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
        ExpiresAfterDays: int option
        ///The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
        ProductDescription: string option
    }
    with
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (confirmationNumber: string option, expiresAfterDays: int option, expiresAt: DateTime option, productDescription: string option) =
            {
                PaymentMethodOptionsKonbini.ConfirmationNumber = confirmationNumber //required
                PaymentMethodOptionsKonbini.ExpiresAfterDays = expiresAfterDays //required
                PaymentMethodOptionsKonbini.ExpiresAt = expiresAt //required
                PaymentMethodOptionsKonbini.ProductDescription = productDescription //required
            }

    and PaymentMethodOptionsOxxo = {
        ///The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
        ExpiresAfterDays: int
    }
    with
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (expiresAfterDays: int) =
            {
                PaymentMethodOptionsOxxo.ExpiresAfterDays = expiresAfterDays //required
            }

    and PaymentMethodOptionsP24 () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOptionsPaynow () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOptionsPaypal = {
        ///Preferred locale of the PayPal checkout page that the customer is redirected to.
        PreferredLocale: string option
        ///A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
        Reference: string option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsPaypalSetupFutureUsage option
    }
    with
        ///Controls when the funds will be captured from the customer's account.
        member _.CaptureMethod = "manual"

        static member New (preferredLocale: string option, ?reference: string option, ?setupFutureUsage: PaymentMethodOptionsPaypalSetupFutureUsage) =
            {
                PaymentMethodOptionsPaypal.PreferredLocale = preferredLocale //required
                PaymentMethodOptionsPaypal.Reference = reference |> Option.flatten
                PaymentMethodOptionsPaypal.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsPaypalSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and PaymentMethodOptionsPix = {
        ///The number of seconds (between 10 and 1209600) after which Pix payment will expire.
        ExpiresAfterSeconds: int option
        ///The timestamp at which the Pix expires.
        ExpiresAt: int option
    }
    with
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (expiresAfterSeconds: int option, expiresAt: int option) =
            {
                PaymentMethodOptionsPix.ExpiresAfterSeconds = expiresAfterSeconds //required
                PaymentMethodOptionsPix.ExpiresAt = expiresAt //required
            }

    and PaymentMethodOptionsPromptpay () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOptionsSofort = {
        ///Preferred language of the SOFORT authorization page that the customer is redirected to.
        PreferredLanguage: PaymentMethodOptionsSofortPreferredLanguage option
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        SetupFutureUsage: PaymentMethodOptionsSofortSetupFutureUsage option
    }
    with
        static member New (preferredLanguage: PaymentMethodOptionsSofortPreferredLanguage option, ?setupFutureUsage: PaymentMethodOptionsSofortSetupFutureUsage) =
            {
                PaymentMethodOptionsSofort.PreferredLanguage = preferredLanguage //required
                PaymentMethodOptionsSofort.SetupFutureUsage = setupFutureUsage
            }

    and PaymentMethodOptionsSofortPreferredLanguage =
        | De
        | En
        | Es
        | Fr
        | It
        | Nl
        | Pl

    and PaymentMethodOptionsSofortSetupFutureUsage =
        | [<JsonUnionCase("none")>] None'
        | OffSession

    and PaymentMethodOptionsWechatPay = {
        ///The app ID registered with WeChat Pay. Only required when client is ios or android.
        AppId: string option
        ///The client type that the end customer will pay from
        Client: PaymentMethodOptionsWechatPayClient option
    }
    with
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"

        static member New (appId: string option, client: PaymentMethodOptionsWechatPayClient option) =
            {
                PaymentMethodOptionsWechatPay.AppId = appId //required
                PaymentMethodOptionsWechatPay.Client = client //required
            }

    and PaymentMethodOptionsWechatPayClient =
        | Android
        | Ios
        | Web

    and PaymentMethodOptionsZip () = 
        ///Indicates that you intend to make future payments with this PaymentIntent's payment method.
        ///Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
        ///When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
        member _.SetupFutureUsage = "none"


    and PaymentMethodOxxo = {
        PaymentMethodOxxo: string option
    }
    with
        static member New (?paymentMethodOxxo: string option) =
            {
                PaymentMethodOxxo.PaymentMethodOxxo = paymentMethodOxxo |> Option.flatten
            }

    and PaymentMethodP24 = {
        ///The customer's bank, if provided.
        Bank: PaymentMethodP24Bank option
    }
    with
        static member New (bank: PaymentMethodP24Bank option) =
            {
                PaymentMethodP24.Bank = bank //required
            }

    and PaymentMethodP24Bank =
        | AliorBank
        | BankMillennium
        | BankNowyBfgSa
        | BankPekaoSa
        | BankiSpbdzielcze
        | Blik
        | BnpParibas
        | Boz
        | CitiHandlowy
        | CreditAgricole
        | Envelobank
        | EtransferPocztowy24
        | GetinBank
        | Ideabank
        | Ing
        | Inteligo
        | MbankMtransfer
        | NestPrzelew
        | NoblePay
        | PbacZIpko
        | PlusBank
        | SantanderPrzelew24
        | TmobileUsbugiBankowe
        | ToyotaBank
        | VolkswagenBank

    and PaymentMethodPaynow = {
        PaymentMethodPaynow: string option
    }
    with
        static member New (?paymentMethodPaynow: string option) =
            {
                PaymentMethodPaynow.PaymentMethodPaynow = paymentMethodPaynow |> Option.flatten
            }

    and PaymentMethodPaypal = {
        ///Owner's email. Values are provided by PayPal directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        PayerEmail: string option
        ///PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
        PayerId: string option
    }
    with
        static member New (?payerEmail: string option, ?payerId: string option) =
            {
                PaymentMethodPaypal.PayerEmail = payerEmail |> Option.flatten
                PaymentMethodPaypal.PayerId = payerId |> Option.flatten
            }

    and PaymentMethodPix = {
        PaymentMethodPix: string option
    }
    with
        static member New (?paymentMethodPix: string option) =
            {
                PaymentMethodPix.PaymentMethodPix = paymentMethodPix |> Option.flatten
            }

    and PaymentMethodPromptpay = {
        PaymentMethodPromptpay: string option
    }
    with
        static member New (?paymentMethodPromptpay: string option) =
            {
                PaymentMethodPromptpay.PaymentMethodPromptpay = paymentMethodPromptpay |> Option.flatten
            }

    and PaymentMethodSepaDebit = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Branch code of bank associated with the bank account.
        BranchCode: string option
        ///Two-letter ISO code representing the country the bank account is located in.
        Country: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Information about the object that generated this PaymentMethod.
        GeneratedFrom: SepaDebitGeneratedFrom option
        ///Last four characters of the IBAN.
        [<JsonField(Name="last4")>]Last4: string option
    }
    with
        static member New (bankCode: string option, branchCode: string option, country: string option, fingerprint: string option, generatedFrom: SepaDebitGeneratedFrom option, last4: string option) =
            {
                PaymentMethodSepaDebit.BankCode = bankCode //required
                PaymentMethodSepaDebit.BranchCode = branchCode //required
                PaymentMethodSepaDebit.Country = country //required
                PaymentMethodSepaDebit.Fingerprint = fingerprint //required
                PaymentMethodSepaDebit.GeneratedFrom = generatedFrom //required
                PaymentMethodSepaDebit.Last4 = last4 //required
            }

    and PaymentMethodSofort = {
        ///Two-letter ISO code representing the country the bank account is located in.
        Country: string option
    }
    with
        static member New (country: string option) =
            {
                PaymentMethodSofort.Country = country //required
            }

    and PaymentMethodUsBankAccount = {
        ///Account holder type: individual or company.
        AccountHolderType: PaymentMethodUsBankAccountAccountHolderType option
        ///Account type: checkings or savings. Defaults to checking if omitted.
        AccountType: PaymentMethodUsBankAccountAccountType option
        ///The name of the bank.
        BankName: string option
        ///The ID of the Financial Connections Account used to create the payment method.
        FinancialConnectionsAccount: string option
        ///Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        Fingerprint: string option
        ///Last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///Contains information about US bank account networks that can be used.
        Networks: UsBankAccountNetworks option
        ///Routing number of the bank account.
        RoutingNumber: string option
        ///Contains information about the future reusability of this PaymentMethod.
        StatusDetails: PaymentMethodUsBankAccountStatusDetails option
    }
    with
        static member New (accountHolderType: PaymentMethodUsBankAccountAccountHolderType option, accountType: PaymentMethodUsBankAccountAccountType option, bankName: string option, fingerprint: string option, last4: string option, networks: UsBankAccountNetworks option, routingNumber: string option, ?financialConnectionsAccount: string option, ?statusDetails: PaymentMethodUsBankAccountStatusDetails option) =
            {
                PaymentMethodUsBankAccount.AccountHolderType = accountHolderType //required
                PaymentMethodUsBankAccount.AccountType = accountType //required
                PaymentMethodUsBankAccount.BankName = bankName //required
                PaymentMethodUsBankAccount.Fingerprint = fingerprint //required
                PaymentMethodUsBankAccount.Last4 = last4 //required
                PaymentMethodUsBankAccount.Networks = networks //required
                PaymentMethodUsBankAccount.RoutingNumber = routingNumber //required
                PaymentMethodUsBankAccount.FinancialConnectionsAccount = financialConnectionsAccount |> Option.flatten
                PaymentMethodUsBankAccount.StatusDetails = statusDetails |> Option.flatten
            }

    and PaymentMethodUsBankAccountAccountHolderType =
        | Company
        | Individual

    and PaymentMethodUsBankAccountAccountType =
        | Checking
        | Savings

    and PaymentMethodUsBankAccountBlocked = {
        ///The ACH network code that resulted in this block.
        NetworkCode: PaymentMethodUsBankAccountBlockedNetworkCode option
        ///The reason why this PaymentMethod's fingerprint has been blocked
        Reason: PaymentMethodUsBankAccountBlockedReason option
    }
    with
        static member New (networkCode: PaymentMethodUsBankAccountBlockedNetworkCode option, reason: PaymentMethodUsBankAccountBlockedReason option) =
            {
                PaymentMethodUsBankAccountBlocked.NetworkCode = networkCode //required
                PaymentMethodUsBankAccountBlocked.Reason = reason //required
            }

    and PaymentMethodUsBankAccountBlockedNetworkCode =
        | [<JsonUnionCase("R02")>] R02
        | [<JsonUnionCase("R03")>] R03
        | [<JsonUnionCase("R04")>] R04
        | [<JsonUnionCase("R05")>] R05
        | [<JsonUnionCase("R07")>] R07
        | [<JsonUnionCase("R08")>] R08
        | [<JsonUnionCase("R10")>] R10
        | [<JsonUnionCase("R11")>] R11
        | [<JsonUnionCase("R16")>] R16
        | [<JsonUnionCase("R20")>] R20
        | [<JsonUnionCase("R29")>] R29
        | [<JsonUnionCase("R31")>] R31

    and PaymentMethodUsBankAccountBlockedReason =
        | BankAccountClosed
        | BankAccountFrozen
        | BankAccountInvalidDetails
        | BankAccountRestricted
        | BankAccountUnusable
        | DebitNotAuthorized

    and PaymentMethodUsBankAccountStatusDetails = {
        Blocked: PaymentMethodUsBankAccountBlocked option
    }
    with
        static member New (?blocked: PaymentMethodUsBankAccountBlocked) =
            {
                PaymentMethodUsBankAccountStatusDetails.Blocked = blocked
            }

    and PaymentMethodWechatPay = {
        PaymentMethodWechatPay: string option
    }
    with
        static member New (?paymentMethodWechatPay: string option) =
            {
                PaymentMethodWechatPay.PaymentMethodWechatPay = paymentMethodWechatPay |> Option.flatten
            }

    and PaymentMethodZip = {
        PaymentMethodZip: string option
    }
    with
        static member New (?paymentMethodZip: string option) =
            {
                PaymentMethodZip.PaymentMethodZip = paymentMethodZip |> Option.flatten
            }

    and PaymentPagesCheckoutSessionAfterExpiration = {
        ///When set, configuration used to recover the Checkout Session on expiry.
        Recovery: PaymentPagesCheckoutSessionAfterExpirationRecovery option
    }
    with
        static member New (recovery: PaymentPagesCheckoutSessionAfterExpirationRecovery option) =
            {
                PaymentPagesCheckoutSessionAfterExpiration.Recovery = recovery //required
            }

    and PaymentPagesCheckoutSessionAfterExpirationRecovery = {
        ///Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
        AllowPromotionCodes: bool
        ///If `true`, a recovery url will be generated to recover this Checkout Session if it
        ///expires before a transaction is completed. It will be attached to the
        ///Checkout Session object upon expiration.
        Enabled: bool
        ///The timestamp at which the recovery URL will expire.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
        Url: string option
    }
    with
        static member New (allowPromotionCodes: bool, enabled: bool, expiresAt: DateTime option, url: string option) =
            {
                PaymentPagesCheckoutSessionAfterExpirationRecovery.AllowPromotionCodes = allowPromotionCodes //required
                PaymentPagesCheckoutSessionAfterExpirationRecovery.Enabled = enabled //required
                PaymentPagesCheckoutSessionAfterExpirationRecovery.ExpiresAt = expiresAt //required
                PaymentPagesCheckoutSessionAfterExpirationRecovery.Url = url //required
            }

    and PaymentPagesCheckoutSessionAutomaticTax = {
        ///Indicates whether automatic tax is enabled for the session
        Enabled: bool
        ///The status of the most recent automated tax calculation for this session.
        Status: PaymentPagesCheckoutSessionAutomaticTaxStatus option
    }
    with
        static member New (enabled: bool, status: PaymentPagesCheckoutSessionAutomaticTaxStatus option) =
            {
                PaymentPagesCheckoutSessionAutomaticTax.Enabled = enabled //required
                PaymentPagesCheckoutSessionAutomaticTax.Status = status //required
            }

    and PaymentPagesCheckoutSessionAutomaticTaxStatus =
        | Complete
        | Failed
        | RequiresLocationInputs

    and PaymentPagesCheckoutSessionConsent = {
        ///If `opt_in`, the customer consents to receiving promotional communications
        ///from the merchant about this Checkout Session.
        Promotions: PaymentPagesCheckoutSessionConsentPromotions option
    }
    with
        ///If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.
        member _.TermsOfService = "accepted"

        static member New (promotions: PaymentPagesCheckoutSessionConsentPromotions option) =
            {
                PaymentPagesCheckoutSessionConsent.Promotions = promotions //required
            }

    and PaymentPagesCheckoutSessionConsentPromotions =
        | OptIn
        | OptOut

    and PaymentPagesCheckoutSessionConsentCollection = {
        ///If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
        ///Session will determine whether to display an option to opt into promotional communication
        ///from the merchant depending on the customer's locale. Only available to US merchants.
        Promotions: PaymentPagesCheckoutSessionConsentCollectionPromotions option
        ///If set to `required`, it requires customers to accept the terms of service before being able to pay.
        TermsOfService: PaymentPagesCheckoutSessionConsentCollectionTermsOfService option
    }
    with
        static member New (promotions: PaymentPagesCheckoutSessionConsentCollectionPromotions option, termsOfService: PaymentPagesCheckoutSessionConsentCollectionTermsOfService option) =
            {
                PaymentPagesCheckoutSessionConsentCollection.Promotions = promotions //required
                PaymentPagesCheckoutSessionConsentCollection.TermsOfService = termsOfService //required
            }

    and PaymentPagesCheckoutSessionConsentCollectionPromotions =
        | Auto
        | [<JsonUnionCase("none")>] None'

    and PaymentPagesCheckoutSessionConsentCollectionTermsOfService =
        | [<JsonUnionCase("none")>] None'
        | Required

    and PaymentPagesCheckoutSessionCurrencyConversion = {
        ///Total of all items in source currency before discounts or taxes are applied.
        AmountSubtotal: int
        ///Total of all items in source currency after discounts and taxes are applied.
        AmountTotal: int
        ///Exchange rate used to convert source currency amounts to customer currency amounts
        FxRate: string
        ///Creation currency of the CheckoutSession before localization
        SourceCurrency: string
    }
    with
        static member New (amountSubtotal: int, amountTotal: int, fxRate: string, sourceCurrency: string) =
            {
                PaymentPagesCheckoutSessionCurrencyConversion.AmountSubtotal = amountSubtotal //required
                PaymentPagesCheckoutSessionCurrencyConversion.AmountTotal = amountTotal //required
                PaymentPagesCheckoutSessionCurrencyConversion.FxRate = fxRate //required
                PaymentPagesCheckoutSessionCurrencyConversion.SourceCurrency = sourceCurrency //required
            }

    and PaymentPagesCheckoutSessionCustomFields = {
        ///Configuration for `type=dropdown` fields.
        Dropdown: PaymentPagesCheckoutSessionCustomFieldsDropdown option
        ///String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
        Key: string
        Label: PaymentPagesCheckoutSessionCustomFieldsLabel
        ///Configuration for `type=numeric` fields.
        Numeric: PaymentPagesCheckoutSessionCustomFieldsNumeric option
        ///Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
        Optional: bool
        ///Configuration for `type=text` fields.
        Text: PaymentPagesCheckoutSessionCustomFieldsText option
        ///The type of the field.
        Type: PaymentPagesCheckoutSessionCustomFieldsType
    }
    with
        static member New (dropdown: PaymentPagesCheckoutSessionCustomFieldsDropdown option, key: string, label: PaymentPagesCheckoutSessionCustomFieldsLabel, numeric: PaymentPagesCheckoutSessionCustomFieldsNumeric option, optional: bool, text: PaymentPagesCheckoutSessionCustomFieldsText option, ``type``: PaymentPagesCheckoutSessionCustomFieldsType) =
            {
                PaymentPagesCheckoutSessionCustomFields.Dropdown = dropdown //required
                PaymentPagesCheckoutSessionCustomFields.Key = key //required
                PaymentPagesCheckoutSessionCustomFields.Label = label //required
                PaymentPagesCheckoutSessionCustomFields.Numeric = numeric //required
                PaymentPagesCheckoutSessionCustomFields.Optional = optional //required
                PaymentPagesCheckoutSessionCustomFields.Text = text //required
                PaymentPagesCheckoutSessionCustomFields.Type = ``type`` //required
            }

    and PaymentPagesCheckoutSessionCustomFieldsType =
        | Dropdown
        | Numeric
        | Text

    and PaymentPagesCheckoutSessionCustomFieldsDropdown = {
        ///The options available for the customer to select. Up to 200 options allowed.
        Options: PaymentPagesCheckoutSessionCustomFieldsOption list
        ///The option selected by the customer. This will be the `value` for the option.
        Value: string option
    }
    with
        static member New (options: PaymentPagesCheckoutSessionCustomFieldsOption list, value: string option) =
            {
                PaymentPagesCheckoutSessionCustomFieldsDropdown.Options = options //required
                PaymentPagesCheckoutSessionCustomFieldsDropdown.Value = value //required
            }

    and PaymentPagesCheckoutSessionCustomFieldsLabel = {
        ///Custom text for the label, displayed to the customer. Up to 50 characters.
        Custom: string option
    }
    with
        ///The type of the label.
        member _.Type = "custom"

        static member New (custom: string option) =
            {
                PaymentPagesCheckoutSessionCustomFieldsLabel.Custom = custom //required
            }

    and PaymentPagesCheckoutSessionCustomFieldsNumeric = {
        ///The maximum character length constraint for the customer's input.
        MaximumLength: int option
        ///The minimum character length requirement for the customer's input.
        MinimumLength: int option
        ///The value entered by the customer, containing only digits.
        Value: string option
    }
    with
        static member New (maximumLength: int option, minimumLength: int option, value: string option) =
            {
                PaymentPagesCheckoutSessionCustomFieldsNumeric.MaximumLength = maximumLength //required
                PaymentPagesCheckoutSessionCustomFieldsNumeric.MinimumLength = minimumLength //required
                PaymentPagesCheckoutSessionCustomFieldsNumeric.Value = value //required
            }

    and PaymentPagesCheckoutSessionCustomFieldsOption = {
        ///The label for the option, displayed to the customer. Up to 100 characters.
        Label: string
        ///The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
        Value: string
    }
    with
        static member New (label: string, value: string) =
            {
                PaymentPagesCheckoutSessionCustomFieldsOption.Label = label //required
                PaymentPagesCheckoutSessionCustomFieldsOption.Value = value //required
            }

    and PaymentPagesCheckoutSessionCustomFieldsText = {
        ///The maximum character length constraint for the customer's input.
        MaximumLength: int option
        ///The minimum character length requirement for the customer's input.
        MinimumLength: int option
        ///The value entered by the customer.
        Value: string option
    }
    with
        static member New (maximumLength: int option, minimumLength: int option, value: string option) =
            {
                PaymentPagesCheckoutSessionCustomFieldsText.MaximumLength = maximumLength //required
                PaymentPagesCheckoutSessionCustomFieldsText.MinimumLength = minimumLength //required
                PaymentPagesCheckoutSessionCustomFieldsText.Value = value //required
            }

    and PaymentPagesCheckoutSessionCustomText = {
        ///Custom text that should be displayed alongside shipping address collection.
        ShippingAddress: PaymentPagesCheckoutSessionCustomTextPosition option
        ///Custom text that should be displayed alongside the payment confirmation button.
        Submit: PaymentPagesCheckoutSessionCustomTextPosition option
    }
    with
        static member New (shippingAddress: PaymentPagesCheckoutSessionCustomTextPosition option, submit: PaymentPagesCheckoutSessionCustomTextPosition option) =
            {
                PaymentPagesCheckoutSessionCustomText.ShippingAddress = shippingAddress //required
                PaymentPagesCheckoutSessionCustomText.Submit = submit //required
            }

    and PaymentPagesCheckoutSessionCustomTextPosition = {
        ///Text may be up to 1000 characters in length.
        Message: string
    }
    with
        static member New (message: string) =
            {
                PaymentPagesCheckoutSessionCustomTextPosition.Message = message //required
            }

    and PaymentPagesCheckoutSessionCustomerDetails = {
        ///The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
        Address: Address option
        ///The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
        ///Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
        Email: string option
        ///The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
        Name: string option
        ///The customer's phone number after a completed Checkout Session.
        Phone: string option
        ///The customer’s tax exempt status after a completed Checkout Session.
        TaxExempt: PaymentPagesCheckoutSessionCustomerDetailsTaxExempt option
        ///The customer’s tax IDs after a completed Checkout Session.
        TaxIds: PaymentPagesCheckoutSessionTaxId list option
    }
    with
        static member New (address: Address option, email: string option, name: string option, phone: string option, taxExempt: PaymentPagesCheckoutSessionCustomerDetailsTaxExempt option, taxIds: PaymentPagesCheckoutSessionTaxId list option) =
            {
                PaymentPagesCheckoutSessionCustomerDetails.Address = address //required
                PaymentPagesCheckoutSessionCustomerDetails.Email = email //required
                PaymentPagesCheckoutSessionCustomerDetails.Name = name //required
                PaymentPagesCheckoutSessionCustomerDetails.Phone = phone //required
                PaymentPagesCheckoutSessionCustomerDetails.TaxExempt = taxExempt //required
                PaymentPagesCheckoutSessionCustomerDetails.TaxIds = taxIds //required
            }

    and PaymentPagesCheckoutSessionCustomerDetailsTaxExempt =
        | Exempt
        | [<JsonUnionCase("none")>] None'
        | Reverse

    and PaymentPagesCheckoutSessionInvoiceCreation = {
        ///Indicates whether invoice creation is enabled for the Checkout Session.
        Enabled: bool
        InvoiceData: PaymentPagesCheckoutSessionInvoiceSettings
    }
    with
        static member New (enabled: bool, invoiceData: PaymentPagesCheckoutSessionInvoiceSettings) =
            {
                PaymentPagesCheckoutSessionInvoiceCreation.Enabled = enabled //required
                PaymentPagesCheckoutSessionInvoiceCreation.InvoiceData = invoiceData //required
            }

    and PaymentPagesCheckoutSessionInvoiceSettings = {
        ///The account tax IDs associated with the invoice.
        AccountTaxIds: PaymentPagesCheckoutSessionInvoiceSettingsAccountTaxIds'AnyOf list option
        ///Custom fields displayed on the invoice.
        CustomFields: InvoiceSettingCustomField list option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Footer displayed on the invoice.
        Footer: string option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Options for invoice PDF rendering.
        RenderingOptions: InvoiceSettingRenderingOptions option
    }
    with
        static member New (accountTaxIds: PaymentPagesCheckoutSessionInvoiceSettingsAccountTaxIds'AnyOf list option, customFields: InvoiceSettingCustomField list option, description: string option, footer: string option, metadata: Map<string, string> option, renderingOptions: InvoiceSettingRenderingOptions option) =
            {
                PaymentPagesCheckoutSessionInvoiceSettings.AccountTaxIds = accountTaxIds //required
                PaymentPagesCheckoutSessionInvoiceSettings.CustomFields = customFields //required
                PaymentPagesCheckoutSessionInvoiceSettings.Description = description //required
                PaymentPagesCheckoutSessionInvoiceSettings.Footer = footer //required
                PaymentPagesCheckoutSessionInvoiceSettings.Metadata = metadata //required
                PaymentPagesCheckoutSessionInvoiceSettings.RenderingOptions = renderingOptions //required
            }

    and PaymentPagesCheckoutSessionInvoiceSettingsAccountTaxIds'AnyOf =
        | String of string
        | TaxId of TaxId
        | DeletedTaxId of DeletedTaxId

    and PaymentPagesCheckoutSessionPhoneNumberCollection = {
        ///Indicates whether phone number collection is enabled for the session
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PaymentPagesCheckoutSessionPhoneNumberCollection.Enabled = enabled //required
            }

    and PaymentPagesCheckoutSessionShippingAddressCollection = {
        ///An array of two-letter ISO country codes representing which countries Checkout should provide as options for
        ///shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
        AllowedCountries: PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries list
    }
    with
        static member New (allowedCountries: PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries list) =
            {
                PaymentPagesCheckoutSessionShippingAddressCollection.AllowedCountries = allowedCountries //required
            }

    and PaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries =
        | [<JsonUnionCase("AC")>] AC
        | [<JsonUnionCase("AD")>] AD
        | [<JsonUnionCase("AE")>] AE
        | [<JsonUnionCase("AF")>] AF
        | [<JsonUnionCase("AG")>] AG
        | [<JsonUnionCase("AI")>] AI
        | [<JsonUnionCase("AL")>] AL
        | [<JsonUnionCase("AM")>] AM
        | [<JsonUnionCase("AO")>] AO
        | [<JsonUnionCase("AQ")>] AQ
        | [<JsonUnionCase("AR")>] AR
        | [<JsonUnionCase("AT")>] AT
        | [<JsonUnionCase("AU")>] AU
        | [<JsonUnionCase("AW")>] AW
        | [<JsonUnionCase("AX")>] AX
        | [<JsonUnionCase("AZ")>] AZ
        | [<JsonUnionCase("BA")>] BA
        | [<JsonUnionCase("BB")>] BB
        | [<JsonUnionCase("BD")>] BD
        | [<JsonUnionCase("BE")>] BE
        | [<JsonUnionCase("BF")>] BF
        | [<JsonUnionCase("BG")>] BG
        | [<JsonUnionCase("BH")>] BH
        | [<JsonUnionCase("BI")>] BI
        | [<JsonUnionCase("BJ")>] BJ
        | [<JsonUnionCase("BL")>] BL
        | [<JsonUnionCase("BM")>] BM
        | [<JsonUnionCase("BN")>] BN
        | [<JsonUnionCase("BO")>] BO
        | [<JsonUnionCase("BQ")>] BQ
        | [<JsonUnionCase("BR")>] BR
        | [<JsonUnionCase("BS")>] BS
        | [<JsonUnionCase("BT")>] BT
        | [<JsonUnionCase("BV")>] BV
        | [<JsonUnionCase("BW")>] BW
        | [<JsonUnionCase("BY")>] BY
        | [<JsonUnionCase("BZ")>] BZ
        | [<JsonUnionCase("CA")>] CA
        | [<JsonUnionCase("CD")>] CD
        | [<JsonUnionCase("CF")>] CF
        | [<JsonUnionCase("CG")>] CG
        | [<JsonUnionCase("CH")>] CH
        | [<JsonUnionCase("CI")>] CI
        | [<JsonUnionCase("CK")>] CK
        | [<JsonUnionCase("CL")>] CL
        | [<JsonUnionCase("CM")>] CM
        | [<JsonUnionCase("CN")>] CN
        | [<JsonUnionCase("CO")>] CO
        | [<JsonUnionCase("CR")>] CR
        | [<JsonUnionCase("CV")>] CV
        | [<JsonUnionCase("CW")>] CW
        | [<JsonUnionCase("CY")>] CY
        | [<JsonUnionCase("CZ")>] CZ
        | [<JsonUnionCase("DE")>] DE
        | [<JsonUnionCase("DJ")>] DJ
        | [<JsonUnionCase("DK")>] DK
        | [<JsonUnionCase("DM")>] DM
        | [<JsonUnionCase("DO")>] DO
        | [<JsonUnionCase("DZ")>] DZ
        | [<JsonUnionCase("EC")>] EC
        | [<JsonUnionCase("EE")>] EE
        | [<JsonUnionCase("EG")>] EG
        | [<JsonUnionCase("EH")>] EH
        | [<JsonUnionCase("ER")>] ER
        | [<JsonUnionCase("ES")>] ES
        | [<JsonUnionCase("ET")>] ET
        | [<JsonUnionCase("FI")>] FI
        | [<JsonUnionCase("FJ")>] FJ
        | [<JsonUnionCase("FK")>] FK
        | [<JsonUnionCase("FO")>] FO
        | [<JsonUnionCase("FR")>] FR
        | [<JsonUnionCase("GA")>] GA
        | [<JsonUnionCase("GB")>] GB
        | [<JsonUnionCase("GD")>] GD
        | [<JsonUnionCase("GE")>] GE
        | [<JsonUnionCase("GF")>] GF
        | [<JsonUnionCase("GG")>] GG
        | [<JsonUnionCase("GH")>] GH
        | [<JsonUnionCase("GI")>] GI
        | [<JsonUnionCase("GL")>] GL
        | [<JsonUnionCase("GM")>] GM
        | [<JsonUnionCase("GN")>] GN
        | [<JsonUnionCase("GP")>] GP
        | [<JsonUnionCase("GQ")>] GQ
        | [<JsonUnionCase("GR")>] GR
        | [<JsonUnionCase("GS")>] GS
        | [<JsonUnionCase("GT")>] GT
        | [<JsonUnionCase("GU")>] GU
        | [<JsonUnionCase("GW")>] GW
        | [<JsonUnionCase("GY")>] GY
        | [<JsonUnionCase("HK")>] HK
        | [<JsonUnionCase("HN")>] HN
        | [<JsonUnionCase("HR")>] HR
        | [<JsonUnionCase("HT")>] HT
        | [<JsonUnionCase("HU")>] HU
        | [<JsonUnionCase("ID")>] ID
        | [<JsonUnionCase("IE")>] IE
        | [<JsonUnionCase("IL")>] IL
        | [<JsonUnionCase("IM")>] IM
        | [<JsonUnionCase("IN")>] IN
        | [<JsonUnionCase("IO")>] IO
        | [<JsonUnionCase("IQ")>] IQ
        | [<JsonUnionCase("IS")>] IS
        | [<JsonUnionCase("IT")>] IT
        | [<JsonUnionCase("JE")>] JE
        | [<JsonUnionCase("JM")>] JM
        | [<JsonUnionCase("JO")>] JO
        | [<JsonUnionCase("JP")>] JP
        | [<JsonUnionCase("KE")>] KE
        | [<JsonUnionCase("KG")>] KG
        | [<JsonUnionCase("KH")>] KH
        | [<JsonUnionCase("KI")>] KI
        | [<JsonUnionCase("KM")>] KM
        | [<JsonUnionCase("KN")>] KN
        | [<JsonUnionCase("KR")>] KR
        | [<JsonUnionCase("KW")>] KW
        | [<JsonUnionCase("KY")>] KY
        | [<JsonUnionCase("KZ")>] KZ
        | [<JsonUnionCase("LA")>] LA
        | [<JsonUnionCase("LB")>] LB
        | [<JsonUnionCase("LC")>] LC
        | [<JsonUnionCase("LI")>] LI
        | [<JsonUnionCase("LK")>] LK
        | [<JsonUnionCase("LR")>] LR
        | [<JsonUnionCase("LS")>] LS
        | [<JsonUnionCase("LT")>] LT
        | [<JsonUnionCase("LU")>] LU
        | [<JsonUnionCase("LV")>] LV
        | [<JsonUnionCase("LY")>] LY
        | [<JsonUnionCase("MA")>] MA
        | [<JsonUnionCase("MC")>] MC
        | [<JsonUnionCase("MD")>] MD
        | [<JsonUnionCase("ME")>] ME
        | [<JsonUnionCase("MF")>] MF
        | [<JsonUnionCase("MG")>] MG
        | [<JsonUnionCase("MK")>] MK
        | [<JsonUnionCase("ML")>] ML
        | [<JsonUnionCase("MM")>] MM
        | [<JsonUnionCase("MN")>] MN
        | [<JsonUnionCase("MO")>] MO
        | [<JsonUnionCase("MQ")>] MQ
        | [<JsonUnionCase("MR")>] MR
        | [<JsonUnionCase("MS")>] MS
        | [<JsonUnionCase("MT")>] MT
        | [<JsonUnionCase("MU")>] MU
        | [<JsonUnionCase("MV")>] MV
        | [<JsonUnionCase("MW")>] MW
        | [<JsonUnionCase("MX")>] MX
        | [<JsonUnionCase("MY")>] MY
        | [<JsonUnionCase("MZ")>] MZ
        | [<JsonUnionCase("NA")>] NA
        | [<JsonUnionCase("NC")>] NC
        | [<JsonUnionCase("NE")>] NE
        | [<JsonUnionCase("NG")>] NG
        | [<JsonUnionCase("NI")>] NI
        | [<JsonUnionCase("NL")>] NL
        | [<JsonUnionCase("NO")>] NO
        | [<JsonUnionCase("NP")>] NP
        | [<JsonUnionCase("NR")>] NR
        | [<JsonUnionCase("NU")>] NU
        | [<JsonUnionCase("NZ")>] NZ
        | [<JsonUnionCase("OM")>] OM
        | [<JsonUnionCase("PA")>] PA
        | [<JsonUnionCase("PE")>] PE
        | [<JsonUnionCase("PF")>] PF
        | [<JsonUnionCase("PG")>] PG
        | [<JsonUnionCase("PH")>] PH
        | [<JsonUnionCase("PK")>] PK
        | [<JsonUnionCase("PL")>] PL
        | [<JsonUnionCase("PM")>] PM
        | [<JsonUnionCase("PN")>] PN
        | [<JsonUnionCase("PR")>] PR
        | [<JsonUnionCase("PS")>] PS
        | [<JsonUnionCase("PT")>] PT
        | [<JsonUnionCase("PY")>] PY
        | [<JsonUnionCase("QA")>] QA
        | [<JsonUnionCase("RE")>] RE
        | [<JsonUnionCase("RO")>] RO
        | [<JsonUnionCase("RS")>] RS
        | [<JsonUnionCase("RU")>] RU
        | [<JsonUnionCase("RW")>] RW
        | [<JsonUnionCase("SA")>] SA
        | [<JsonUnionCase("SB")>] SB
        | [<JsonUnionCase("SC")>] SC
        | [<JsonUnionCase("SE")>] SE
        | [<JsonUnionCase("SG")>] SG
        | [<JsonUnionCase("SH")>] SH
        | [<JsonUnionCase("SI")>] SI
        | [<JsonUnionCase("SJ")>] SJ
        | [<JsonUnionCase("SK")>] SK
        | [<JsonUnionCase("SL")>] SL
        | [<JsonUnionCase("SM")>] SM
        | [<JsonUnionCase("SN")>] SN
        | [<JsonUnionCase("SO")>] SO
        | [<JsonUnionCase("SR")>] SR
        | [<JsonUnionCase("SS")>] SS
        | [<JsonUnionCase("ST")>] ST
        | [<JsonUnionCase("SV")>] SV
        | [<JsonUnionCase("SX")>] SX
        | [<JsonUnionCase("SZ")>] SZ
        | [<JsonUnionCase("TA")>] TA
        | [<JsonUnionCase("TC")>] TC
        | [<JsonUnionCase("TD")>] TD
        | [<JsonUnionCase("TF")>] TF
        | [<JsonUnionCase("TG")>] TG
        | [<JsonUnionCase("TH")>] TH
        | [<JsonUnionCase("TJ")>] TJ
        | [<JsonUnionCase("TK")>] TK
        | [<JsonUnionCase("TL")>] TL
        | [<JsonUnionCase("TM")>] TM
        | [<JsonUnionCase("TN")>] TN
        | [<JsonUnionCase("TO")>] TO
        | [<JsonUnionCase("TR")>] TR
        | [<JsonUnionCase("TT")>] TT
        | [<JsonUnionCase("TV")>] TV
        | [<JsonUnionCase("TW")>] TW
        | [<JsonUnionCase("TZ")>] TZ
        | [<JsonUnionCase("UA")>] UA
        | [<JsonUnionCase("UG")>] UG
        | [<JsonUnionCase("US")>] US
        | [<JsonUnionCase("UY")>] UY
        | [<JsonUnionCase("UZ")>] UZ
        | [<JsonUnionCase("VA")>] VA
        | [<JsonUnionCase("VC")>] VC
        | [<JsonUnionCase("VE")>] VE
        | [<JsonUnionCase("VG")>] VG
        | [<JsonUnionCase("VN")>] VN
        | [<JsonUnionCase("VU")>] VU
        | [<JsonUnionCase("WF")>] WF
        | [<JsonUnionCase("WS")>] WS
        | [<JsonUnionCase("XK")>] XK
        | [<JsonUnionCase("YE")>] YE
        | [<JsonUnionCase("YT")>] YT
        | [<JsonUnionCase("ZA")>] ZA
        | [<JsonUnionCase("ZM")>] ZM
        | [<JsonUnionCase("ZW")>] ZW
        | [<JsonUnionCase("ZZ")>] ZZ

    and PaymentPagesCheckoutSessionShippingCost = {
        ///Total shipping cost before any discounts or taxes are applied.
        AmountSubtotal: int
        ///Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
        AmountTax: int
        ///Total shipping cost after discounts and taxes are applied.
        AmountTotal: int
        ///The ID of the ShippingRate for this order.
        ShippingRate: PaymentPagesCheckoutSessionShippingCostShippingRate'AnyOf option
        ///The taxes applied to the shipping rate.
        Taxes: LineItemsTaxAmount list option
    }
    with
        static member New (amountSubtotal: int, amountTax: int, amountTotal: int, shippingRate: PaymentPagesCheckoutSessionShippingCostShippingRate'AnyOf option, ?taxes: LineItemsTaxAmount list) =
            {
                PaymentPagesCheckoutSessionShippingCost.AmountSubtotal = amountSubtotal //required
                PaymentPagesCheckoutSessionShippingCost.AmountTax = amountTax //required
                PaymentPagesCheckoutSessionShippingCost.AmountTotal = amountTotal //required
                PaymentPagesCheckoutSessionShippingCost.ShippingRate = shippingRate //required
                PaymentPagesCheckoutSessionShippingCost.Taxes = taxes
            }

    and PaymentPagesCheckoutSessionShippingCostShippingRate'AnyOf =
        | String of string
        | ShippingRate of ShippingRate

    and PaymentPagesCheckoutSessionShippingOption = {
        ///A non-negative integer in cents representing how much to charge.
        ShippingAmount: int
        ///The shipping rate.
        ShippingRate: PaymentPagesCheckoutSessionShippingOptionShippingRate'AnyOf
    }
    with
        static member New (shippingAmount: int, shippingRate: PaymentPagesCheckoutSessionShippingOptionShippingRate'AnyOf) =
            {
                PaymentPagesCheckoutSessionShippingOption.ShippingAmount = shippingAmount //required
                PaymentPagesCheckoutSessionShippingOption.ShippingRate = shippingRate //required
            }

    and PaymentPagesCheckoutSessionShippingOptionShippingRate'AnyOf =
        | String of string
        | ShippingRate of ShippingRate

    and PaymentPagesCheckoutSessionTaxId = {
        ///The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`
        Type: PaymentPagesCheckoutSessionTaxIdType
        ///The value of the tax ID.
        Value: string option
    }
    with
        static member New (``type``: PaymentPagesCheckoutSessionTaxIdType, value: string option) =
            {
                PaymentPagesCheckoutSessionTaxId.Type = ``type`` //required
                PaymentPagesCheckoutSessionTaxId.Value = value //required
            }

    and PaymentPagesCheckoutSessionTaxIdType =
        | AdNrt
        | AeTrn
        | ArCuit
        | AuAbn
        | AuArn
        | BgUic
        | BoTin
        | BrCnpj
        | BrCpf
        | CaBn
        | CaGstHst
        | CaPstBc
        | CaPstMb
        | CaPstSk
        | CaQst
        | ChVat
        | ClTin
        | CnTin
        | CoNit
        | CrTin
        | DoRcn
        | EcRuc
        | EgTin
        | EsCif
        | EuOssVat
        | EuVat
        | GbVat
        | GeVat
        | HkBr
        | HuTin
        | IdNpwp
        | IlVat
        | InGst
        | IsVat
        | JpCn
        | JpRn
        | JpTrn
        | KePin
        | KrBrn
        | LiUid
        | MxRfc
        | MyFrp
        | MyItn
        | MySst
        | NoVat
        | NzGst
        | PeRuc
        | PhTin
        | RoTin
        | RsPib
        | RuInn
        | RuKpp
        | SaVat
        | SgGst
        | SgUen
        | SiTin
        | SvNit
        | ThVat
        | TrTin
        | TwVat
        | UaVat
        | Unknown
        | UsEin
        | UyRuc
        | VeRif
        | VnTin
        | ZaVat

    and PaymentPagesCheckoutSessionTaxIdCollection = {
        ///Indicates whether tax ID collection is enabled for the session
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PaymentPagesCheckoutSessionTaxIdCollection.Enabled = enabled //required
            }

    and PaymentPagesCheckoutSessionTotalDetails = {
        ///This is the sum of all the discounts.
        AmountDiscount: int
        ///This is the sum of all the shipping amounts.
        AmountShipping: int option
        ///This is the sum of all the tax amounts.
        AmountTax: int
        Breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown option
    }
    with
        static member New (amountDiscount: int, amountShipping: int option, amountTax: int, ?breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown) =
            {
                PaymentPagesCheckoutSessionTotalDetails.AmountDiscount = amountDiscount //required
                PaymentPagesCheckoutSessionTotalDetails.AmountShipping = amountShipping //required
                PaymentPagesCheckoutSessionTotalDetails.AmountTax = amountTax //required
                PaymentPagesCheckoutSessionTotalDetails.Breakdown = breakdown
            }

    and PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown = {
        ///The aggregated discounts.
        Discounts: LineItemsDiscountAmount list
        ///The aggregated tax amounts by rate.
        Taxes: LineItemsTaxAmount list
    }
    with
        static member New (discounts: LineItemsDiscountAmount list, taxes: LineItemsTaxAmount list) =
            {
                PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown.Discounts = discounts //required
                PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown.Taxes = taxes //required
            }

    and PaymentSource =
        | Account of Account
        | BankAccount of BankAccount
        | Card of Card
        | Source of Source

    ///A `Payout` object is created when you receive funds from Stripe, or when you
    ///initiate a payout to either a bank account or debit card of a [connected
    ///Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
    ///as well as list all payouts. Payouts are made on [varying
    ///schedules](/docs/connect/manage-payout-schedule), depending on your country and
    ///industry.
    ///Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
    and Payout = {
        ///Amount (in cents (or local equivalent)) to be transferred to your bank account or debit card.
        Amount: int
        ///Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ArrivalDate: DateTime
        ///Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
        Automatic: bool
        ///ID of the balance transaction that describes the impact of this payout on your account balance.
        BalanceTransaction: PayoutBalanceTransaction'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///ID of the bank account or card the payout was sent to.
        Destination: PayoutDestination'AnyOf option
        ///If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
        FailureBalanceTransaction: PayoutFailureBalanceTransaction'AnyOf option
        ///Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
        FailureCode: string option
        ///Message to user further explaining reason for payout failure if available.
        FailureMessage: string option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. (See [Bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks) for more information.)
        Method: PayoutMethod
        ///If the payout reverses another, this is the ID of the original payout.
        OriginalPayout: PayoutOriginalPayout'AnyOf option
        ///If `completed`, the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) may be used to list all Balance Transactions that were paid out in this payout.
        ReconciliationStatus: PayoutReconciliationStatus
        ///If the payout was reversed, this is the ID of the payout that reverses this payout.
        ReversedBy: PayoutReversedBy'AnyOf option
        ///The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
        SourceType: PayoutSourceType
        ///Extra information about a payout to be displayed on the user's bank statement.
        StatementDescriptor: string option
        ///Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
        Status: PayoutStatus
        ///Can be `bank_account` or `card`.
        Type: PayoutType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "payout"

        static member New (amount: int, arrivalDate: DateTime, automatic: bool, balanceTransaction: PayoutBalanceTransaction'AnyOf option, created: DateTime, currency: string, description: string option, destination: PayoutDestination'AnyOf option, failureBalanceTransaction: PayoutFailureBalanceTransaction'AnyOf option, failureCode: string option, failureMessage: string option, id: string, livemode: bool, metadata: Map<string, string> option, method: PayoutMethod, originalPayout: PayoutOriginalPayout'AnyOf option, reconciliationStatus: PayoutReconciliationStatus, reversedBy: PayoutReversedBy'AnyOf option, sourceType: PayoutSourceType, statementDescriptor: string option, status: PayoutStatus, ``type``: PayoutType) =
            {
                Payout.Amount = amount //required
                Payout.ArrivalDate = arrivalDate //required
                Payout.Automatic = automatic //required
                Payout.BalanceTransaction = balanceTransaction //required
                Payout.Created = created //required
                Payout.Currency = currency //required
                Payout.Description = description //required
                Payout.Destination = destination //required
                Payout.FailureBalanceTransaction = failureBalanceTransaction //required
                Payout.FailureCode = failureCode //required
                Payout.FailureMessage = failureMessage //required
                Payout.Id = id //required
                Payout.Livemode = livemode //required
                Payout.Metadata = metadata //required
                Payout.Method = method //required
                Payout.OriginalPayout = originalPayout //required
                Payout.ReconciliationStatus = reconciliationStatus //required
                Payout.ReversedBy = reversedBy //required
                Payout.SourceType = sourceType //required
                Payout.StatementDescriptor = statementDescriptor //required
                Payout.Status = status //required
                Payout.Type = ``type`` //required
            }

    and PayoutBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and PayoutDestination'AnyOf =
        | String of string
        | ExternalAccount of ExternalAccount
        | DeletedExternalAccount of DeletedExternalAccount

    and PayoutFailureBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and PayoutMethod =
        | Standard
        | Instant

    and PayoutOriginalPayout'AnyOf =
        | String of string
        | Payout of Payout

    and PayoutReconciliationStatus =
        | Completed
        | InProgress
        | NotApplicable

    and PayoutReversedBy'AnyOf =
        | String of string
        | Payout of Payout

    and PayoutSourceType =
        | Card
        | Fpx
        | BankAccount

    and PayoutStatus =
        | Paid
        | Pending
        | InTransit
        | Canceled
        | Failed

    and PayoutType =
        | BankAccount
        | Card

    and PaypalSellerProtection = {
        ///An array of conditions that are covered for the transaction, if applicable.
        DisputeCategories: PaypalSellerProtectionDisputeCategories list option
        ///Indicates whether the transaction is eligible for PayPal's seller protection.
        Status: PaypalSellerProtectionStatus
    }
    with
        static member New (disputeCategories: PaypalSellerProtectionDisputeCategories list option, status: PaypalSellerProtectionStatus) =
            {
                PaypalSellerProtection.DisputeCategories = disputeCategories //required
                PaypalSellerProtection.Status = status //required
            }

    and PaypalSellerProtectionStatus =
        | Eligible
        | NotEligible
        | PartiallyEligible

    and PaypalSellerProtectionDisputeCategories =
        | Fraudulent
        | ProductNotReceived

    and Period = {
        ///The end date of this usage period. All usage up to and including this point in time is included.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]End: DateTime option
        ///The start date of this usage period. All usage after this point in time is included.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Start: DateTime option
    }
    with
        static member New (``end``: DateTime option, start: DateTime option) =
            {
                Period.End = ``end`` //required
                Period.Start = start //required
            }

    ///This is an object representing a person associated with a Stripe account.
    ///A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
    ///See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform prefilling and account onboarding steps.
    ///Related guide: [Handling identity verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information)
    and Person = {
        ///The account the person is associated with.
        Account: string option
        Address: Address option
        ///The Kana variation of the person's address (Japan only).
        AddressKana: LegalEntityJapanAddress option
        ///The Kanji variation of the person's address (Japan only).
        AddressKanji: LegalEntityJapanAddress option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        Dob: LegalEntityDob option
        ///The person's email address.
        Email: string option
        ///The person's first name.
        FirstName: string option
        ///The Kana variation of the person's first name (Japan only).
        FirstNameKana: string option
        ///The Kanji variation of the person's first name (Japan only).
        FirstNameKanji: string option
        ///A list of alternate names or aliases that the person is known by.
        FullNameAliases: string list option
        ///Information about the [upcoming new requirements for this person](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
        FutureRequirements: PersonFutureRequirements option
        ///The person's gender (International regulations require either "male" or "female").
        Gender: string option
        ///Unique identifier for the object.
        Id: string
        ///Whether the person's `id_number` was provided.
        IdNumberProvided: bool option
        ///Whether the person's `id_number_secondary` was provided.
        IdNumberSecondaryProvided: bool option
        ///The person's last name.
        LastName: string option
        ///The Kana variation of the person's last name (Japan only).
        LastNameKana: string option
        ///The Kanji variation of the person's last name (Japan only).
        LastNameKanji: string option
        ///The person's maiden name.
        MaidenName: string option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The country where the person is a national.
        Nationality: string option
        ///The person's phone number.
        Phone: string option
        ///Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
        PoliticalExposure: PersonPoliticalExposure option
        RegisteredAddress: Address option
        Relationship: PersonRelationship option
        ///Information about the requirements for this person, including what information needs to be collected, and by when.
        Requirements: PersonRequirements option
        ///Whether the last four digits of the person's Social Security number have been provided (U.S. only).
        SsnLast4Provided: bool option
        Verification: LegalEntityPersonVerification option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "person"

        static member New (created: DateTime, id: string, ?account: string, ?address: Address, ?addressKana: LegalEntityJapanAddress option, ?addressKanji: LegalEntityJapanAddress option, ?dob: LegalEntityDob, ?email: string option, ?firstName: string option, ?firstNameKana: string option, ?firstNameKanji: string option, ?fullNameAliases: string list, ?futureRequirements: PersonFutureRequirements option, ?gender: string option, ?idNumberProvided: bool, ?idNumberSecondaryProvided: bool, ?lastName: string option, ?lastNameKana: string option, ?lastNameKanji: string option, ?maidenName: string option, ?metadata: Map<string, string>, ?nationality: string option, ?phone: string option, ?politicalExposure: PersonPoliticalExposure, ?registeredAddress: Address, ?relationship: PersonRelationship, ?requirements: PersonRequirements option, ?ssnLast4Provided: bool, ?verification: LegalEntityPersonVerification) =
            {
                Person.Created = created //required
                Person.Id = id //required
                Person.Account = account
                Person.Address = address
                Person.AddressKana = addressKana |> Option.flatten
                Person.AddressKanji = addressKanji |> Option.flatten
                Person.Dob = dob
                Person.Email = email |> Option.flatten
                Person.FirstName = firstName |> Option.flatten
                Person.FirstNameKana = firstNameKana |> Option.flatten
                Person.FirstNameKanji = firstNameKanji |> Option.flatten
                Person.FullNameAliases = fullNameAliases
                Person.FutureRequirements = futureRequirements |> Option.flatten
                Person.Gender = gender |> Option.flatten
                Person.IdNumberProvided = idNumberProvided
                Person.IdNumberSecondaryProvided = idNumberSecondaryProvided
                Person.LastName = lastName |> Option.flatten
                Person.LastNameKana = lastNameKana |> Option.flatten
                Person.LastNameKanji = lastNameKanji |> Option.flatten
                Person.MaidenName = maidenName |> Option.flatten
                Person.Metadata = metadata
                Person.Nationality = nationality |> Option.flatten
                Person.Phone = phone |> Option.flatten
                Person.PoliticalExposure = politicalExposure
                Person.RegisteredAddress = registeredAddress
                Person.Relationship = relationship
                Person.Requirements = requirements |> Option.flatten
                Person.SsnLast4Provided = ssnLast4Provided
                Person.Verification = verification
            }

    and PersonPoliticalExposure =
        | Existing
        | [<JsonUnionCase("none")>] None'

    and PersonFutureRequirements = {
        ///Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
        Alternatives: AccountRequirementsAlternative list option
        ///Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
        CurrentlyDue: string list
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list
        ///Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
        EventuallyDue: string list
        ///Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
        PastDue: string list
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
        PendingVerification: string list
    }
    with
        static member New (alternatives: AccountRequirementsAlternative list option, currentlyDue: string list, errors: AccountRequirementsError list, eventuallyDue: string list, pastDue: string list, pendingVerification: string list) =
            {
                PersonFutureRequirements.Alternatives = alternatives //required
                PersonFutureRequirements.CurrentlyDue = currentlyDue //required
                PersonFutureRequirements.Errors = errors //required
                PersonFutureRequirements.EventuallyDue = eventuallyDue //required
                PersonFutureRequirements.PastDue = pastDue //required
                PersonFutureRequirements.PendingVerification = pendingVerification //required
            }

    and PersonRelationship = {
        ///Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
        Director: bool option
        ///Whether the person has significant responsibility to control, manage, or direct the organization.
        Executive: bool option
        ///Whether the person is an owner of the account’s legal entity.
        Owner: bool option
        ///The percent owned by the person of the account's legal entity.
        PercentOwnership: decimal option
        ///Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
        Representative: bool option
        ///The person's title (e.g., CEO, Support Engineer).
        Title: string option
    }
    with
        static member New (director: bool option, executive: bool option, owner: bool option, percentOwnership: decimal option, representative: bool option, title: string option) =
            {
                PersonRelationship.Director = director //required
                PersonRelationship.Executive = executive //required
                PersonRelationship.Owner = owner //required
                PersonRelationship.PercentOwnership = percentOwnership //required
                PersonRelationship.Representative = representative //required
                PersonRelationship.Title = title //required
            }

    and PersonRequirements = {
        ///Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
        Alternatives: AccountRequirementsAlternative list option
        ///Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
        CurrentlyDue: string list
        ///Fields that are `currently_due` and need to be collected again because validation or verification failed.
        Errors: AccountRequirementsError list
        ///Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
        EventuallyDue: string list
        ///Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
        PastDue: string list
        ///Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
        PendingVerification: string list
    }
    with
        static member New (alternatives: AccountRequirementsAlternative list option, currentlyDue: string list, errors: AccountRequirementsError list, eventuallyDue: string list, pastDue: string list, pendingVerification: string list) =
            {
                PersonRequirements.Alternatives = alternatives //required
                PersonRequirements.CurrentlyDue = currentlyDue //required
                PersonRequirements.Errors = errors //required
                PersonRequirements.EventuallyDue = eventuallyDue //required
                PersonRequirements.PastDue = pastDue //required
                PersonRequirements.PendingVerification = pendingVerification //required
            }

    ///You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
    ///Plans define the base price, currency, and billing cycle for recurring purchases of products.
    ///[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
    ///For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
    ///Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
    and Plan = {
        ///Whether the plan can be used for new purchases.
        Active: bool
        ///Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
        AggregateUsage: PlanAggregateUsage option
        ///The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
        Amount: int option
        ///The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
        AmountDecimal: string option
        ///Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
        BillingScheme: PlanBillingScheme
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Unique identifier for the object.
        Id: string
        ///The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
        Interval: PlanInterval
        ///The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
        IntervalCount: int
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///A brief description of the plan, hidden from customers.
        Nickname: string option
        ///The product whose pricing this plan determines.
        Product: PlanProduct'AnyOf option
        ///Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
        Tiers: PlanTier list option
        ///Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
        TiersMode: PlanTiersMode option
        ///Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
        TransformUsage: TransformUsage option
        ///Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
        TrialPeriodDays: int option
        ///Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
        UsageType: PlanUsageType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "plan"

        static member New (active: bool, aggregateUsage: PlanAggregateUsage option, amount: int option, amountDecimal: string option, billingScheme: PlanBillingScheme, created: DateTime, currency: string, id: string, interval: PlanInterval, intervalCount: int, livemode: bool, metadata: Map<string, string> option, nickname: string option, product: PlanProduct'AnyOf option, tiersMode: PlanTiersMode option, transformUsage: TransformUsage option, trialPeriodDays: int option, usageType: PlanUsageType, ?tiers: PlanTier list) =
            {
                Plan.Active = active //required
                Plan.AggregateUsage = aggregateUsage //required
                Plan.Amount = amount //required
                Plan.AmountDecimal = amountDecimal //required
                Plan.BillingScheme = billingScheme //required
                Plan.Created = created //required
                Plan.Currency = currency //required
                Plan.Id = id //required
                Plan.Interval = interval //required
                Plan.IntervalCount = intervalCount //required
                Plan.Livemode = livemode //required
                Plan.Metadata = metadata //required
                Plan.Nickname = nickname //required
                Plan.Product = product //required
                Plan.TiersMode = tiersMode //required
                Plan.TransformUsage = transformUsage //required
                Plan.TrialPeriodDays = trialPeriodDays //required
                Plan.UsageType = usageType //required
                Plan.Tiers = tiers
            }

    and PlanAggregateUsage =
        | LastDuringPeriod
        | LastEver
        | Max
        | Sum

    and PlanBillingScheme =
        | PerUnit
        | Tiered

    and PlanInterval =
        | Day
        | Month
        | Week
        | Year

    and PlanProduct'AnyOf =
        | String of string
        | Product of Product
        | DeletedProduct of DeletedProduct

    and PlanTiersMode =
        | Graduated
        | Volume

    and PlanUsageType =
        | Licensed
        | Metered

    and PlanTier = {
        ///Price for the entire tier.
        FlatAmount: int option
        ///Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
        FlatAmountDecimal: string option
        ///Per unit price for units relevant to the tier.
        UnitAmount: int option
        ///Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
        UnitAmountDecimal: string option
        ///Up to and including to this quantity will be contained in the tier.
        UpTo: int option
    }
    with
        static member New (flatAmount: int option, flatAmountDecimal: string option, unitAmount: int option, unitAmountDecimal: string option, upTo: int option) =
            {
                PlanTier.FlatAmount = flatAmount //required
                PlanTier.FlatAmountDecimal = flatAmountDecimal //required
                PlanTier.UnitAmount = unitAmount //required
                PlanTier.UnitAmountDecimal = unitAmountDecimal //required
                PlanTier.UpTo = upTo //required
            }

    and PlatformTaxFee = {
        ///The Connected account that incurred this charge.
        Account: string
        ///Unique identifier for the object.
        Id: string
        ///The payment object that caused this tax to be inflicted.
        SourceTransaction: string
        ///The type of tax (VAT).
        Type: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "platform_tax_fee"

        static member New (account: string, id: string, sourceTransaction: string, ``type``: string) =
            {
                PlatformTaxFee.Account = account //required
                PlatformTaxFee.Id = id //required
                PlatformTaxFee.SourceTransaction = sourceTransaction //required
                PlatformTaxFee.Type = ``type`` //required
            }

    and PortalBusinessProfile = {
        ///The messaging shown to customers in the portal.
        Headline: string option
        ///A link to the business’s publicly available privacy policy.
        PrivacyPolicyUrl: string option
        ///A link to the business’s publicly available terms of service.
        TermsOfServiceUrl: string option
    }
    with
        static member New (headline: string option, privacyPolicyUrl: string option, termsOfServiceUrl: string option) =
            {
                PortalBusinessProfile.Headline = headline //required
                PortalBusinessProfile.PrivacyPolicyUrl = privacyPolicyUrl //required
                PortalBusinessProfile.TermsOfServiceUrl = termsOfServiceUrl //required
            }

    and PortalCustomerUpdate = {
        ///The types of customer updates that are supported. When empty, customers are not updateable.
        AllowedUpdates: PortalCustomerUpdateAllowedUpdates list
        ///Whether the feature is enabled.
        Enabled: bool
    }
    with
        static member New (allowedUpdates: PortalCustomerUpdateAllowedUpdates list, enabled: bool) =
            {
                PortalCustomerUpdate.AllowedUpdates = allowedUpdates //required
                PortalCustomerUpdate.Enabled = enabled //required
            }

    and PortalCustomerUpdateAllowedUpdates =
        | Address
        | Email
        | Name
        | Phone
        | Shipping
        | TaxId

    and PortalFeatures = {
        CustomerUpdate: PortalCustomerUpdate
        InvoiceHistory: PortalInvoiceList
        PaymentMethodUpdate: PortalPaymentMethodUpdate
        SubscriptionCancel: PortalSubscriptionCancel
        SubscriptionPause: PortalSubscriptionPause
        SubscriptionUpdate: PortalSubscriptionUpdate
    }
    with
        static member New (customerUpdate: PortalCustomerUpdate, invoiceHistory: PortalInvoiceList, paymentMethodUpdate: PortalPaymentMethodUpdate, subscriptionCancel: PortalSubscriptionCancel, subscriptionPause: PortalSubscriptionPause, subscriptionUpdate: PortalSubscriptionUpdate) =
            {
                PortalFeatures.CustomerUpdate = customerUpdate //required
                PortalFeatures.InvoiceHistory = invoiceHistory //required
                PortalFeatures.PaymentMethodUpdate = paymentMethodUpdate //required
                PortalFeatures.SubscriptionCancel = subscriptionCancel //required
                PortalFeatures.SubscriptionPause = subscriptionPause //required
                PortalFeatures.SubscriptionUpdate = subscriptionUpdate //required
            }

    and PortalFlowsAfterCompletionHostedConfirmation = {
        ///A custom message to display to the customer after the flow is completed.
        CustomMessage: string option
    }
    with
        static member New (customMessage: string option) =
            {
                PortalFlowsAfterCompletionHostedConfirmation.CustomMessage = customMessage //required
            }

    and PortalFlowsAfterCompletionRedirect = {
        ///The URL the customer will be redirected to after the flow is completed.
        ReturnUrl: string
    }
    with
        static member New (returnUrl: string) =
            {
                PortalFlowsAfterCompletionRedirect.ReturnUrl = returnUrl //required
            }

    and PortalFlowsCouponOffer = {
        ///The ID of the coupon to be offered.
        Coupon: string
    }
    with
        static member New (coupon: string) =
            {
                PortalFlowsCouponOffer.Coupon = coupon //required
            }

    and PortalFlowsFlow = {
        AfterCompletion: PortalFlowsFlowAfterCompletion
        ///Configuration when `flow.type=subscription_cancel`.
        SubscriptionCancel: PortalFlowsFlowSubscriptionCancel option
        ///Configuration when `flow.type=subscription_update`.
        SubscriptionUpdate: PortalFlowsFlowSubscriptionUpdate option
        ///Configuration when `flow.type=subscription_update_confirm`.
        SubscriptionUpdateConfirm: PortalFlowsFlowSubscriptionUpdateConfirm option
        ///Type of flow that the customer will go through.
        Type: PortalFlowsFlowType
    }
    with
        static member New (afterCompletion: PortalFlowsFlowAfterCompletion, subscriptionCancel: PortalFlowsFlowSubscriptionCancel option, subscriptionUpdate: PortalFlowsFlowSubscriptionUpdate option, subscriptionUpdateConfirm: PortalFlowsFlowSubscriptionUpdateConfirm option, ``type``: PortalFlowsFlowType) =
            {
                PortalFlowsFlow.AfterCompletion = afterCompletion //required
                PortalFlowsFlow.SubscriptionCancel = subscriptionCancel //required
                PortalFlowsFlow.SubscriptionUpdate = subscriptionUpdate //required
                PortalFlowsFlow.SubscriptionUpdateConfirm = subscriptionUpdateConfirm //required
                PortalFlowsFlow.Type = ``type`` //required
            }

    and PortalFlowsFlowType =
        | PaymentMethodUpdate
        | SubscriptionCancel
        | SubscriptionUpdate
        | SubscriptionUpdateConfirm

    and PortalFlowsFlowAfterCompletion = {
        ///Configuration when `after_completion.type=hosted_confirmation`.
        HostedConfirmation: PortalFlowsAfterCompletionHostedConfirmation option
        ///Configuration when `after_completion.type=redirect`.
        Redirect: PortalFlowsAfterCompletionRedirect option
        ///The specified type of behavior after the flow is completed.
        Type: PortalFlowsFlowAfterCompletionType
    }
    with
        static member New (hostedConfirmation: PortalFlowsAfterCompletionHostedConfirmation option, redirect: PortalFlowsAfterCompletionRedirect option, ``type``: PortalFlowsFlowAfterCompletionType) =
            {
                PortalFlowsFlowAfterCompletion.HostedConfirmation = hostedConfirmation //required
                PortalFlowsFlowAfterCompletion.Redirect = redirect //required
                PortalFlowsFlowAfterCompletion.Type = ``type`` //required
            }

    and PortalFlowsFlowAfterCompletionType =
        | HostedConfirmation
        | PortalHomepage
        | Redirect

    and PortalFlowsFlowSubscriptionCancel = {
        ///Specify a retention strategy to be used in the cancellation flow.
        Retention: PortalFlowsRetention option
        ///The ID of the subscription to be canceled.
        Subscription: string
    }
    with
        static member New (retention: PortalFlowsRetention option, subscription: string) =
            {
                PortalFlowsFlowSubscriptionCancel.Retention = retention //required
                PortalFlowsFlowSubscriptionCancel.Subscription = subscription //required
            }

    and PortalFlowsFlowSubscriptionUpdate = {
        ///The ID of the subscription to be updated.
        Subscription: string
    }
    with
        static member New (subscription: string) =
            {
                PortalFlowsFlowSubscriptionUpdate.Subscription = subscription //required
            }

    and PortalFlowsFlowSubscriptionUpdateConfirm = {
        ///The coupon or promotion code to apply to this subscription update. Currently, only up to one may be specified.
        Discounts: PortalFlowsSubscriptionUpdateConfirmDiscount list option
        ///The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable.
        Items: PortalFlowsSubscriptionUpdateConfirmItem list
        ///The ID of the subscription to be updated.
        Subscription: string
    }
    with
        static member New (discounts: PortalFlowsSubscriptionUpdateConfirmDiscount list option, items: PortalFlowsSubscriptionUpdateConfirmItem list, subscription: string) =
            {
                PortalFlowsFlowSubscriptionUpdateConfirm.Discounts = discounts //required
                PortalFlowsFlowSubscriptionUpdateConfirm.Items = items //required
                PortalFlowsFlowSubscriptionUpdateConfirm.Subscription = subscription //required
            }

    and PortalFlowsRetention = {
        ///Configuration when `retention.type=coupon_offer`.
        CouponOffer: PortalFlowsCouponOffer option
    }
    with
        ///Type of retention strategy that will be used.
        member _.Type = "coupon_offer"

        static member New (couponOffer: PortalFlowsCouponOffer option) =
            {
                PortalFlowsRetention.CouponOffer = couponOffer //required
            }

    and PortalFlowsSubscriptionUpdateConfirmDiscount = {
        ///The ID of the coupon to apply to this subscription update.
        Coupon: string option
        ///The ID of a promotion code to apply to this subscription update.
        PromotionCode: string option
    }
    with
        static member New (coupon: string option, promotionCode: string option) =
            {
                PortalFlowsSubscriptionUpdateConfirmDiscount.Coupon = coupon //required
                PortalFlowsSubscriptionUpdateConfirmDiscount.PromotionCode = promotionCode //required
            }

    and PortalFlowsSubscriptionUpdateConfirmItem = {
        ///The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated.
        Id: string option
        ///The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products).
        Price: string option
        ///[Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow.
        Quantity: int option
    }
    with
        static member New (id: string option, price: string option, ?quantity: int) =
            {
                PortalFlowsSubscriptionUpdateConfirmItem.Id = id //required
                PortalFlowsSubscriptionUpdateConfirmItem.Price = price //required
                PortalFlowsSubscriptionUpdateConfirmItem.Quantity = quantity
            }

    and PortalInvoiceList = {
        ///Whether the feature is enabled.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PortalInvoiceList.Enabled = enabled //required
            }

    and PortalLoginPage = {
        ///If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.
        ///If `false`, the previously generated `url`, if any, will be deactivated.
        Enabled: bool
        ///A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal.
        Url: string option
    }
    with
        static member New (enabled: bool, url: string option) =
            {
                PortalLoginPage.Enabled = enabled //required
                PortalLoginPage.Url = url //required
            }

    and PortalPaymentMethodUpdate = {
        ///Whether the feature is enabled.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PortalPaymentMethodUpdate.Enabled = enabled //required
            }

    and PortalSubscriptionCancel = {
        CancellationReason: PortalSubscriptionCancellationReason
        ///Whether the feature is enabled.
        Enabled: bool
        ///Whether to cancel subscriptions immediately or at the end of the billing period.
        Mode: PortalSubscriptionCancelMode
        ///Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
        ProrationBehavior: PortalSubscriptionCancelProrationBehavior
    }
    with
        static member New (cancellationReason: PortalSubscriptionCancellationReason, enabled: bool, mode: PortalSubscriptionCancelMode, prorationBehavior: PortalSubscriptionCancelProrationBehavior) =
            {
                PortalSubscriptionCancel.CancellationReason = cancellationReason //required
                PortalSubscriptionCancel.Enabled = enabled //required
                PortalSubscriptionCancel.Mode = mode //required
                PortalSubscriptionCancel.ProrationBehavior = prorationBehavior //required
            }

    and PortalSubscriptionCancelMode =
        | AtPeriodEnd
        | Immediately

    and PortalSubscriptionCancelProrationBehavior =
        | AlwaysInvoice
        | CreateProrations
        | [<JsonUnionCase("none")>] None'

    and PortalSubscriptionCancellationReason = {
        ///Whether the feature is enabled.
        Enabled: bool
        ///Which cancellation reasons will be given as options to the customer.
        Options: PortalSubscriptionCancellationReasonOptions list
    }
    with
        static member New (enabled: bool, options: PortalSubscriptionCancellationReasonOptions list) =
            {
                PortalSubscriptionCancellationReason.Enabled = enabled //required
                PortalSubscriptionCancellationReason.Options = options //required
            }

    and PortalSubscriptionCancellationReasonOptions =
        | CustomerService
        | LowQuality
        | MissingFeatures
        | Other
        | SwitchedService
        | TooComplex
        | TooExpensive
        | Unused

    and PortalSubscriptionPause = {
        ///Whether the feature is enabled.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                PortalSubscriptionPause.Enabled = enabled //required
            }

    and PortalSubscriptionUpdate = {
        ///The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
        DefaultAllowedUpdates: PortalSubscriptionUpdateDefaultAllowedUpdates list
        ///Whether the feature is enabled.
        Enabled: bool
        ///The list of products that support subscription updates.
        Products: PortalSubscriptionUpdateProduct list option
        ///Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
        ProrationBehavior: PortalSubscriptionUpdateProrationBehavior
    }
    with
        static member New (defaultAllowedUpdates: PortalSubscriptionUpdateDefaultAllowedUpdates list, enabled: bool, products: PortalSubscriptionUpdateProduct list option, prorationBehavior: PortalSubscriptionUpdateProrationBehavior) =
            {
                PortalSubscriptionUpdate.DefaultAllowedUpdates = defaultAllowedUpdates //required
                PortalSubscriptionUpdate.Enabled = enabled //required
                PortalSubscriptionUpdate.Products = products //required
                PortalSubscriptionUpdate.ProrationBehavior = prorationBehavior //required
            }

    and PortalSubscriptionUpdateProrationBehavior =
        | AlwaysInvoice
        | CreateProrations
        | [<JsonUnionCase("none")>] None'

    and PortalSubscriptionUpdateDefaultAllowedUpdates =
        | Price
        | PromotionCode
        | Quantity

    and PortalSubscriptionUpdateProduct = {
        ///The list of price IDs which, when subscribed to, a subscription can be updated.
        Prices: string list
        ///The product ID.
        Product: string
    }
    with
        static member New (prices: string list, product: string) =
            {
                PortalSubscriptionUpdateProduct.Prices = prices //required
                PortalSubscriptionUpdateProduct.Product = product //required
            }

    ///Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
    ///[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
    ///For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
    ///Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
    and Price = {
        ///Whether the price can be used for new purchases.
        Active: bool
        ///Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
        BillingScheme: PriceBillingScheme
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
        CurrencyOptions: Map<string, string list> option
        ///When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
        CustomUnitAmount: CustomUnitAmount option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
        LookupKey: string option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///A brief description of the price, hidden from customers.
        Nickname: string option
        ///The ID of the product this price is associated with.
        Product: PriceProduct'AnyOf
        ///The recurring components of a price such as `interval` and `usage_type`.
        Recurring: Recurring option
        ///Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
        TaxBehavior: PriceTaxBehavior option
        ///Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
        Tiers: PriceTier list option
        ///Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
        TiersMode: PriceTiersMode option
        ///Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
        TransformQuantity: TransformQuantity option
        ///One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
        Type: PriceType
        ///The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
        UnitAmount: int option
        ///The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
        UnitAmountDecimal: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "price"

        static member New (active: bool, billingScheme: PriceBillingScheme, created: DateTime, currency: string, customUnitAmount: CustomUnitAmount option, id: string, livemode: bool, lookupKey: string option, metadata: Map<string, string>, nickname: string option, product: PriceProduct'AnyOf, recurring: Recurring option, taxBehavior: PriceTaxBehavior option, tiersMode: PriceTiersMode option, transformQuantity: TransformQuantity option, ``type``: PriceType, unitAmount: int option, unitAmountDecimal: string option, ?currencyOptions: Map<string, string list>, ?tiers: PriceTier list) =
            {
                Price.Active = active //required
                Price.BillingScheme = billingScheme //required
                Price.Created = created //required
                Price.Currency = currency //required
                Price.CustomUnitAmount = customUnitAmount //required
                Price.Id = id //required
                Price.Livemode = livemode //required
                Price.LookupKey = lookupKey //required
                Price.Metadata = metadata //required
                Price.Nickname = nickname //required
                Price.Product = product //required
                Price.Recurring = recurring //required
                Price.TaxBehavior = taxBehavior //required
                Price.TiersMode = tiersMode //required
                Price.TransformQuantity = transformQuantity //required
                Price.Type = ``type`` //required
                Price.UnitAmount = unitAmount //required
                Price.UnitAmountDecimal = unitAmountDecimal //required
                Price.CurrencyOptions = currencyOptions
                Price.Tiers = tiers
            }

    and PriceBillingScheme =
        | PerUnit
        | Tiered

    and PriceProduct'AnyOf =
        | String of string
        | Product of Product
        | DeletedProduct of DeletedProduct

    and PriceTaxBehavior =
        | Exclusive
        | Inclusive
        | Unspecified

    and PriceTiersMode =
        | Graduated
        | Volume

    and PriceType =
        | OneTime
        | Recurring

    and PriceTier = {
        ///Price for the entire tier.
        FlatAmount: int option
        ///Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
        FlatAmountDecimal: string option
        ///Per unit price for units relevant to the tier.
        UnitAmount: int option
        ///Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
        UnitAmountDecimal: string option
        ///Up to and including to this quantity will be contained in the tier.
        UpTo: int option
    }
    with
        static member New (flatAmount: int option, flatAmountDecimal: string option, unitAmount: int option, unitAmountDecimal: string option, upTo: int option) =
            {
                PriceTier.FlatAmount = flatAmount //required
                PriceTier.FlatAmountDecimal = flatAmountDecimal //required
                PriceTier.UnitAmount = unitAmount //required
                PriceTier.UnitAmountDecimal = unitAmountDecimal //required
                PriceTier.UpTo = upTo //required
            }

    ///Products describe the specific goods or services you offer to your customers.
    ///For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
    ///They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
    ///Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
    ///[share a Payment Link](https://stripe.com/docs/payment-links),
    ///[accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
    ///and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
    and Product = {
        ///Whether the product is currently available for purchase.
        Active: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
        DefaultPrice: ProductDefaultPrice'AnyOf option
        ///The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
        Description: string option
        ///Unique identifier for the object.
        Id: string
        ///A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        Images: string list
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The product's name, meant to be displayable to the customer.
        Name: string
        ///The dimensions of this product for shipping purposes.
        PackageDimensions: PackageDimensions option
        ///Whether this product is shipped (i.e., physical goods).
        Shippable: bool option
        ///Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
        StatementDescriptor: string option
        ///A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
        TaxCode: ProductTaxCode'AnyOf option
        ///The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans.
        Type: ProductType
        ///A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
        UnitLabel: string option
        ///Time at which the object was last updated. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Updated: DateTime
        ///A URL of a publicly-accessible webpage for this product.
        Url: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "product"

        static member New (active: bool, created: DateTime, description: string option, id: string, images: string list, livemode: bool, metadata: Map<string, string>, name: string, packageDimensions: PackageDimensions option, shippable: bool option, taxCode: ProductTaxCode'AnyOf option, ``type``: ProductType, updated: DateTime, url: string option, ?defaultPrice: ProductDefaultPrice'AnyOf option, ?statementDescriptor: string option, ?unitLabel: string option) =
            {
                Product.Active = active //required
                Product.Created = created //required
                Product.Description = description //required
                Product.Id = id //required
                Product.Images = images //required
                Product.Livemode = livemode //required
                Product.Metadata = metadata //required
                Product.Name = name //required
                Product.PackageDimensions = packageDimensions //required
                Product.Shippable = shippable //required
                Product.TaxCode = taxCode //required
                Product.Type = ``type`` //required
                Product.Updated = updated //required
                Product.Url = url //required
                Product.DefaultPrice = defaultPrice |> Option.flatten
                Product.StatementDescriptor = statementDescriptor |> Option.flatten
                Product.UnitLabel = unitLabel |> Option.flatten
            }

    and ProductDefaultPrice'AnyOf =
        | String of string
        | Price of Price

    and ProductTaxCode'AnyOf =
        | String of string
        | TaxCode of TaxCode

    and ProductType =
        | Good
        | Service

    ///A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
    ///create multiple codes for a single coupon.
    and PromotionCode = {
        ///Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
        Active: bool
        ///The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
        Code: string
        Coupon: Coupon
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The customer that this promotion code can be used by.
        Customer: PromotionCodeCustomer'AnyOf option
        ///Date at which the promotion code can no longer be redeemed.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Maximum number of times this promotion code can be redeemed.
        MaxRedemptions: int option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        Restrictions: PromotionCodesResourceRestrictions
        ///Number of times this promotion code has been used.
        TimesRedeemed: int
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "promotion_code"

        static member New (active: bool, code: string, coupon: Coupon, created: DateTime, customer: PromotionCodeCustomer'AnyOf option, expiresAt: DateTime option, id: string, livemode: bool, maxRedemptions: int option, metadata: Map<string, string> option, restrictions: PromotionCodesResourceRestrictions, timesRedeemed: int) =
            {
                PromotionCode.Active = active //required
                PromotionCode.Code = code //required
                PromotionCode.Coupon = coupon //required
                PromotionCode.Created = created //required
                PromotionCode.Customer = customer //required
                PromotionCode.ExpiresAt = expiresAt //required
                PromotionCode.Id = id //required
                PromotionCode.Livemode = livemode //required
                PromotionCode.MaxRedemptions = maxRedemptions //required
                PromotionCode.Metadata = metadata //required
                PromotionCode.Restrictions = restrictions //required
                PromotionCode.TimesRedeemed = timesRedeemed //required
            }

    and PromotionCodeCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and PromotionCodeCurrencyOption = {
        ///Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
        MinimumAmount: int
    }
    with
        static member New (minimumAmount: int) =
            {
                PromotionCodeCurrencyOption.MinimumAmount = minimumAmount //required
            }

    and PromotionCodesResourceRestrictions = {
        ///Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
        CurrencyOptions: Map<string, string list> option
        ///A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
        FirstTimeTransaction: bool
        ///Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
        MinimumAmount: int option
        ///Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
        MinimumAmountCurrency: string option
    }
    with
        static member New (firstTimeTransaction: bool, minimumAmount: int option, minimumAmountCurrency: string option, ?currencyOptions: Map<string, string list>) =
            {
                PromotionCodesResourceRestrictions.FirstTimeTransaction = firstTimeTransaction //required
                PromotionCodesResourceRestrictions.MinimumAmount = minimumAmount //required
                PromotionCodesResourceRestrictions.MinimumAmountCurrency = minimumAmountCurrency //required
                PromotionCodesResourceRestrictions.CurrencyOptions = currencyOptions
            }

    ///A Quote is a way to model prices that you'd like to provide to a customer.
    ///Once accepted, it will automatically create an invoice, subscription or subscription schedule.
    and Quote = {
        ///Total before any discounts or taxes are applied.
        AmountSubtotal: int
        ///Total after discounts and taxes are applied.
        AmountTotal: int
        ///ID of the Connect Application that created the quote.
        Application: QuoteApplication'AnyOf option
        ///The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
        ApplicationFeeAmount: int option
        ///A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
        ApplicationFeePercent: decimal option
        AutomaticTax: QuotesResourceAutomaticTax
        ///Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
        CollectionMethod: QuoteCollectionMethod
        Computed: QuotesResourceComputed
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string option
        ///The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
        Customer: QuoteCustomer'AnyOf option
        ///The tax rates applied to this quote.
        DefaultTaxRates: QuoteDefaultTaxRates'AnyOf list option
        ///A description that will be displayed on the quote PDF.
        Description: string option
        ///The discounts applied to this quote.
        Discounts: QuoteDiscounts'AnyOf list
        ///The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
        ///A footer that will be displayed on the quote PDF.
        Footer: string option
        ///Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
        FromQuote: QuotesResourceFromQuote option
        ///A header that will be displayed on the quote PDF.
        Header: string option
        ///Unique identifier for the object.
        Id: string
        ///The invoice that was created from this quote.
        Invoice: QuoteInvoice'AnyOf option
        ///All invoices will be billed using the specified settings.
        InvoiceSettings: InvoiceSettingQuoteSetting option
        ///A list of items the customer is being quoted for.
        LineItems: QuoteLineItems option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
        Number: string option
        ///The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
        OnBehalfOf: QuoteOnBehalfOf'AnyOf option
        ///The status of the quote.
        Status: QuoteStatus
        StatusTransitions: QuotesResourceStatusTransitions
        ///The subscription that was created or updated from this quote.
        Subscription: QuoteSubscription'AnyOf option
        SubscriptionData: QuotesResourceSubscriptionDataSubscriptionData
        ///The subscription schedule that was created or updated from this quote.
        SubscriptionSchedule: QuoteSubscriptionSchedule'AnyOf option
        ///ID of the test clock this quote belongs to.
        TestClock: QuoteTestClock'AnyOf option
        TotalDetails: QuotesResourceTotalDetails
        ///The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
        TransferData: QuotesResourceTransferData option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "quote"

        static member New (amountSubtotal: int, amountTotal: int, application: QuoteApplication'AnyOf option, applicationFeeAmount: int option, applicationFeePercent: decimal option, automaticTax: QuotesResourceAutomaticTax, collectionMethod: QuoteCollectionMethod, computed: QuotesResourceComputed, created: DateTime, currency: string option, customer: QuoteCustomer'AnyOf option, description: string option, discounts: QuoteDiscounts'AnyOf list, expiresAt: DateTime, footer: string option, fromQuote: QuotesResourceFromQuote option, header: string option, id: string, invoice: QuoteInvoice'AnyOf option, invoiceSettings: InvoiceSettingQuoteSetting option, livemode: bool, metadata: Map<string, string>, number: string option, onBehalfOf: QuoteOnBehalfOf'AnyOf option, status: QuoteStatus, statusTransitions: QuotesResourceStatusTransitions, subscription: QuoteSubscription'AnyOf option, subscriptionData: QuotesResourceSubscriptionDataSubscriptionData, subscriptionSchedule: QuoteSubscriptionSchedule'AnyOf option, testClock: QuoteTestClock'AnyOf option, totalDetails: QuotesResourceTotalDetails, transferData: QuotesResourceTransferData option, ?defaultTaxRates: QuoteDefaultTaxRates'AnyOf list, ?lineItems: QuoteLineItems) =
            {
                Quote.AmountSubtotal = amountSubtotal //required
                Quote.AmountTotal = amountTotal //required
                Quote.Application = application //required
                Quote.ApplicationFeeAmount = applicationFeeAmount //required
                Quote.ApplicationFeePercent = applicationFeePercent //required
                Quote.AutomaticTax = automaticTax //required
                Quote.CollectionMethod = collectionMethod //required
                Quote.Computed = computed //required
                Quote.Created = created //required
                Quote.Currency = currency //required
                Quote.Customer = customer //required
                Quote.Description = description //required
                Quote.Discounts = discounts //required
                Quote.ExpiresAt = expiresAt //required
                Quote.Footer = footer //required
                Quote.FromQuote = fromQuote //required
                Quote.Header = header //required
                Quote.Id = id //required
                Quote.Invoice = invoice //required
                Quote.InvoiceSettings = invoiceSettings //required
                Quote.Livemode = livemode //required
                Quote.Metadata = metadata //required
                Quote.Number = number //required
                Quote.OnBehalfOf = onBehalfOf //required
                Quote.Status = status //required
                Quote.StatusTransitions = statusTransitions //required
                Quote.Subscription = subscription //required
                Quote.SubscriptionData = subscriptionData //required
                Quote.SubscriptionSchedule = subscriptionSchedule //required
                Quote.TestClock = testClock //required
                Quote.TotalDetails = totalDetails //required
                Quote.TransferData = transferData //required
                Quote.DefaultTaxRates = defaultTaxRates
                Quote.LineItems = lineItems
            }

    and QuoteApplication'AnyOf =
        | String of string
        | Application of Application
        | DeletedApplication of DeletedApplication

    and QuoteCollectionMethod =
        | ChargeAutomatically
        | SendInvoice

    and QuoteCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and QuoteInvoice'AnyOf =
        | String of string
        | Invoice of Invoice
        | DeletedInvoice of DeletedInvoice

    and QuoteOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and QuoteStatus =
        | Accepted
        | Canceled
        | Draft
        | Open

    and QuoteSubscription'AnyOf =
        | String of string
        | Subscription of Subscription

    and QuoteSubscriptionSchedule'AnyOf =
        | String of string
        | SubscriptionSchedule of SubscriptionSchedule

    and QuoteTestClock'AnyOf =
        | String of string
        | TestHelpersTestClock of TestHelpersTestClock

    and QuoteDefaultTaxRates'AnyOf =
        | String of string
        | TaxRate of TaxRate

    and QuoteDiscounts'AnyOf =
        | String of string
        | Discount of Discount

    ///A list of items the customer is being quoted for.
    and QuoteLineItems = {
        ///Details about each object.
        Data: Item list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: Item list, hasMore: bool, url: string) =
            {
                QuoteLineItems.Data = data //required
                QuoteLineItems.HasMore = hasMore //required
                QuoteLineItems.Url = url //required
            }

    and QuotesResourceAutomaticTax = {
        ///Automatically calculate taxes
        Enabled: bool
        ///The status of the most recent automated tax calculation for this quote.
        Status: QuotesResourceAutomaticTaxStatus option
    }
    with
        static member New (enabled: bool, status: QuotesResourceAutomaticTaxStatus option) =
            {
                QuotesResourceAutomaticTax.Enabled = enabled //required
                QuotesResourceAutomaticTax.Status = status //required
            }

    and QuotesResourceAutomaticTaxStatus =
        | Complete
        | Failed
        | RequiresLocationInputs

    and QuotesResourceComputed = {
        ///The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
        Recurring: QuotesResourceRecurring option
        Upfront: QuotesResourceUpfront
    }
    with
        static member New (recurring: QuotesResourceRecurring option, upfront: QuotesResourceUpfront) =
            {
                QuotesResourceComputed.Recurring = recurring //required
                QuotesResourceComputed.Upfront = upfront //required
            }

    and QuotesResourceFromQuote = {
        ///Whether this quote is a revision of a different quote.
        IsRevision: bool
        ///The quote that was cloned.
        Quote: QuotesResourceFromQuoteQuote'AnyOf
    }
    with
        static member New (isRevision: bool, quote: QuotesResourceFromQuoteQuote'AnyOf) =
            {
                QuotesResourceFromQuote.IsRevision = isRevision //required
                QuotesResourceFromQuote.Quote = quote //required
            }

    and QuotesResourceFromQuoteQuote'AnyOf =
        | String of string
        | Quote of Quote

    and QuotesResourceRecurring = {
        ///Total before any discounts or taxes are applied.
        AmountSubtotal: int
        ///Total after discounts and taxes are applied.
        AmountTotal: int
        ///The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
        Interval: QuotesResourceRecurringInterval
        ///The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
        IntervalCount: int
        TotalDetails: QuotesResourceTotalDetails
    }
    with
        static member New (amountSubtotal: int, amountTotal: int, interval: QuotesResourceRecurringInterval, intervalCount: int, totalDetails: QuotesResourceTotalDetails) =
            {
                QuotesResourceRecurring.AmountSubtotal = amountSubtotal //required
                QuotesResourceRecurring.AmountTotal = amountTotal //required
                QuotesResourceRecurring.Interval = interval //required
                QuotesResourceRecurring.IntervalCount = intervalCount //required
                QuotesResourceRecurring.TotalDetails = totalDetails //required
            }

    and QuotesResourceRecurringInterval =
        | Day
        | Month
        | Week
        | Year

    and QuotesResourceStatusTransitions = {
        ///The time that the quote was accepted. Measured in seconds since Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]AcceptedAt: DateTime option
        ///The time that the quote was canceled. Measured in seconds since Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///The time that the quote was finalized. Measured in seconds since Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]FinalizedAt: DateTime option
    }
    with
        static member New (acceptedAt: DateTime option, canceledAt: DateTime option, finalizedAt: DateTime option) =
            {
                QuotesResourceStatusTransitions.AcceptedAt = acceptedAt //required
                QuotesResourceStatusTransitions.CanceledAt = canceledAt //required
                QuotesResourceStatusTransitions.FinalizedAt = finalizedAt //required
            }

    and QuotesResourceSubscriptionDataSubscriptionData = {
        ///The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.
        Description: string option
        ///When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EffectiveDate: DateTime option
        ///Integer representing the number of trial period days before the customer is charged for the first time.
        TrialPeriodDays: int option
    }
    with
        static member New (description: string option, effectiveDate: DateTime option, trialPeriodDays: int option) =
            {
                QuotesResourceSubscriptionDataSubscriptionData.Description = description //required
                QuotesResourceSubscriptionDataSubscriptionData.EffectiveDate = effectiveDate //required
                QuotesResourceSubscriptionDataSubscriptionData.TrialPeriodDays = trialPeriodDays //required
            }

    and QuotesResourceTotalDetails = {
        ///This is the sum of all the discounts.
        AmountDiscount: int
        ///This is the sum of all the shipping amounts.
        AmountShipping: int option
        ///This is the sum of all the tax amounts.
        AmountTax: int
        Breakdown: QuotesResourceTotalDetailsResourceBreakdown option
    }
    with
        static member New (amountDiscount: int, amountShipping: int option, amountTax: int, ?breakdown: QuotesResourceTotalDetailsResourceBreakdown) =
            {
                QuotesResourceTotalDetails.AmountDiscount = amountDiscount //required
                QuotesResourceTotalDetails.AmountShipping = amountShipping //required
                QuotesResourceTotalDetails.AmountTax = amountTax //required
                QuotesResourceTotalDetails.Breakdown = breakdown
            }

    and QuotesResourceTotalDetailsResourceBreakdown = {
        ///The aggregated discounts.
        Discounts: LineItemsDiscountAmount list
        ///The aggregated tax amounts by rate.
        Taxes: LineItemsTaxAmount list
    }
    with
        static member New (discounts: LineItemsDiscountAmount list, taxes: LineItemsTaxAmount list) =
            {
                QuotesResourceTotalDetailsResourceBreakdown.Discounts = discounts //required
                QuotesResourceTotalDetailsResourceBreakdown.Taxes = taxes //required
            }

    and QuotesResourceTransferData = {
        ///The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
        Amount: int option
        ///A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
        AmountPercent: decimal option
        ///The account where funds from the payment will be transferred to upon payment success.
        Destination: QuotesResourceTransferDataDestination'AnyOf
    }
    with
        static member New (amount: int option, amountPercent: decimal option, destination: QuotesResourceTransferDataDestination'AnyOf) =
            {
                QuotesResourceTransferData.Amount = amount //required
                QuotesResourceTransferData.AmountPercent = amountPercent //required
                QuotesResourceTransferData.Destination = destination //required
            }

    and QuotesResourceTransferDataDestination'AnyOf =
        | String of string
        | Account of Account

    and QuotesResourceUpfront = {
        ///Total before any discounts or taxes are applied.
        AmountSubtotal: int
        ///Total after discounts and taxes are applied.
        AmountTotal: int
        ///The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
        LineItems: QuotesResourceUpfrontLineItems option
        TotalDetails: QuotesResourceTotalDetails
    }
    with
        static member New (amountSubtotal: int, amountTotal: int, totalDetails: QuotesResourceTotalDetails, ?lineItems: QuotesResourceUpfrontLineItems) =
            {
                QuotesResourceUpfront.AmountSubtotal = amountSubtotal //required
                QuotesResourceUpfront.AmountTotal = amountTotal //required
                QuotesResourceUpfront.TotalDetails = totalDetails //required
                QuotesResourceUpfront.LineItems = lineItems
            }

    ///The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
    and QuotesResourceUpfrontLineItems = {
        ///Details about each object.
        Data: Item list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: Item list, hasMore: bool, url: string) =
            {
                QuotesResourceUpfrontLineItems.Data = data //required
                QuotesResourceUpfrontLineItems.HasMore = hasMore //required
                QuotesResourceUpfrontLineItems.Url = url //required
            }

    ///An early fraud warning indicates that the card issuer has notified us that a
    ///charge may be fraudulent.
    ///Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
    and RadarEarlyFraudWarning = {
        ///An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
        Actionable: bool
        ///ID of the charge this early fraud warning is for, optionally expanded.
        Charge: RadarEarlyFraudWarningCharge'AnyOf
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
        FraudType: string
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///ID of the Payment Intent this early fraud warning is for, optionally expanded.
        PaymentIntent: RadarEarlyFraudWarningPaymentIntent'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "radar.early_fraud_warning"

        static member New (actionable: bool, charge: RadarEarlyFraudWarningCharge'AnyOf, created: DateTime, fraudType: string, id: string, livemode: bool, ?paymentIntent: RadarEarlyFraudWarningPaymentIntent'AnyOf) =
            {
                RadarEarlyFraudWarning.Actionable = actionable //required
                RadarEarlyFraudWarning.Charge = charge //required
                RadarEarlyFraudWarning.Created = created //required
                RadarEarlyFraudWarning.FraudType = fraudType //required
                RadarEarlyFraudWarning.Id = id //required
                RadarEarlyFraudWarning.Livemode = livemode //required
                RadarEarlyFraudWarning.PaymentIntent = paymentIntent
            }

    and RadarEarlyFraudWarningCharge'AnyOf =
        | String of string
        | Charge of Charge

    and RadarEarlyFraudWarningPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    ///Value lists allow you to group values together which can then be referenced in rules.
    ///Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
    and RadarValueList = {
        ///The name of the value list for use in rules.
        Alias: string
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The name or email address of the user who created this value list.
        CreatedBy: string
        ///Unique identifier for the object.
        Id: string
        ///The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
        ItemType: RadarValueListItemType
        ///List of items contained within this value list.
        ListItems: RadarValueListListItems
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The name of the value list.
        Name: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "radar.value_list"

        static member New (alias: string, created: DateTime, createdBy: string, id: string, itemType: RadarValueListItemType, listItems: RadarValueListListItems, livemode: bool, metadata: Map<string, string>, name: string) =
            {
                RadarValueList.Alias = alias //required
                RadarValueList.Created = created //required
                RadarValueList.CreatedBy = createdBy //required
                RadarValueList.Id = id //required
                RadarValueList.ItemType = itemType //required
                RadarValueList.ListItems = listItems //required
                RadarValueList.Livemode = livemode //required
                RadarValueList.Metadata = metadata //required
                RadarValueList.Name = name //required
            }

    and RadarValueListItemType =
        | CardBin
        | CardFingerprint
        | CaseSensitiveString
        | Country
        | CustomerId
        | Email
        | IpAddress
        | SepaDebitFingerprint
        | String
        | UsBankAccountFingerprint

    ///List of items contained within this value list.
    and RadarValueListListItems = {
        ///Details about each object.
        Data: RadarValueListItem list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: RadarValueListItem list, hasMore: bool, url: string) =
            {
                RadarValueListListItems.Data = data //required
                RadarValueListListItems.HasMore = hasMore //required
                RadarValueListListItems.Url = url //required
            }

    ///Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
    ///Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
    and RadarValueListItem = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The name or email address of the user who added this item to the value list.
        CreatedBy: string
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The value of the item.
        Value: string
        ///The identifier of the value list this item belongs to.
        ValueList: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "radar.value_list_item"

        static member New (created: DateTime, createdBy: string, id: string, livemode: bool, value: string, valueList: string) =
            {
                RadarValueListItem.Created = created //required
                RadarValueListItem.CreatedBy = createdBy //required
                RadarValueListItem.Id = id //required
                RadarValueListItem.Livemode = livemode //required
                RadarValueListItem.Value = value //required
                RadarValueListItem.ValueList = valueList //required
            }

    ///Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
    and RadarRadarOptions = {
        ///A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.
        Session: string option
    }
    with
        static member New (?session: string) =
            {
                RadarRadarOptions.Session = session
            }

    and RadarReviewResourceLocation = {
        ///The city where the payment originated.
        City: string option
        ///Two-letter ISO code representing the country where the payment originated.
        Country: string option
        ///The geographic latitude where the payment originated.
        Latitude: decimal option
        ///The geographic longitude where the payment originated.
        Longitude: decimal option
        ///The state/county/province/region where the payment originated.
        Region: string option
    }
    with
        static member New (city: string option, country: string option, latitude: decimal option, longitude: decimal option, region: string option) =
            {
                RadarReviewResourceLocation.City = city //required
                RadarReviewResourceLocation.Country = country //required
                RadarReviewResourceLocation.Latitude = latitude //required
                RadarReviewResourceLocation.Longitude = longitude //required
                RadarReviewResourceLocation.Region = region //required
            }

    and RadarReviewResourceSession = {
        ///The browser used in this browser session (e.g., `Chrome`).
        Browser: string option
        ///Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
        Device: string option
        ///The platform for the browser session (e.g., `Macintosh`).
        Platform: string option
        ///The version for the browser session (e.g., `61.0.3163.100`).
        Version: string option
    }
    with
        static member New (browser: string option, device: string option, platform: string option, version: string option) =
            {
                RadarReviewResourceSession.Browser = browser //required
                RadarReviewResourceSession.Device = device //required
                RadarReviewResourceSession.Platform = platform //required
                RadarReviewResourceSession.Version = version //required
            }

    and ReceivedPaymentMethodDetailsFinancialAccount = {
        ///The FinancialAccount ID.
        Id: string
    }
    with
        ///The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`.
        member _.Network = "stripe"

        static member New (id: string) =
            {
                ReceivedPaymentMethodDetailsFinancialAccount.Id = id //required
            }

    and Recurring = {
        ///Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
        AggregateUsage: RecurringAggregateUsage option
        ///The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
        Interval: RecurringInterval
        ///The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
        IntervalCount: int
        ///Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
        TrialPeriodDays: int option
        ///Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
        UsageType: RecurringUsageType
    }
    with
        static member New (aggregateUsage: RecurringAggregateUsage option, interval: RecurringInterval, intervalCount: int, trialPeriodDays: int option, usageType: RecurringUsageType) =
            {
                Recurring.AggregateUsage = aggregateUsage //required
                Recurring.Interval = interval //required
                Recurring.IntervalCount = intervalCount //required
                Recurring.TrialPeriodDays = trialPeriodDays //required
                Recurring.UsageType = usageType //required
            }

    and RecurringAggregateUsage =
        | LastDuringPeriod
        | LastEver
        | Max
        | Sum

    and RecurringInterval =
        | Day
        | Month
        | Week
        | Year

    and RecurringUsageType =
        | Licensed
        | Metered

    ///`Refund` objects allow you to refund a charge that has previously been created
    ///but not yet refunded. Funds will be refunded to the credit or debit card that
    ///was originally charged.
    ///Related guide: [Refunds](https://stripe.com/docs/refunds)
    and Refund = {
        ///Amount, in cents (or local equivalent).
        Amount: int
        ///Balance transaction that describes the impact on your account balance.
        BalanceTransaction: RefundBalanceTransaction'AnyOf option
        ///ID of the charge that was refunded.
        Charge: RefundCharge'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
        Description: string option
        ///If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
        FailureBalanceTransaction: RefundFailureBalanceTransaction'AnyOf option
        ///If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request` or `unknown`.
        FailureReason: RefundFailureReason option
        ///Unique identifier for the object.
        Id: string
        ///For payment methods without native refund support (e.g., Konbini, PromptPay), email for the customer to receive refund instructions.
        InstructionsEmail: string option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        NextAction: RefundNextAction option
        ///ID of the PaymentIntent that was refunded.
        PaymentIntent: RefundPaymentIntent'AnyOf option
        ///Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
        Reason: RefundReason option
        ///This is the transaction number that appears on email receipts sent for this refund.
        ReceiptNumber: string option
        ///The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
        SourceTransferReversal: RefundSourceTransferReversal'AnyOf option
        ///Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
        Status: RefundStatus option
        ///If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
        TransferReversal: RefundTransferReversal'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "refund"

        static member New (amount: int, balanceTransaction: RefundBalanceTransaction'AnyOf option, charge: RefundCharge'AnyOf option, created: DateTime, currency: string, id: string, metadata: Map<string, string> option, paymentIntent: RefundPaymentIntent'AnyOf option, reason: RefundReason option, receiptNumber: string option, sourceTransferReversal: RefundSourceTransferReversal'AnyOf option, status: RefundStatus option, transferReversal: RefundTransferReversal'AnyOf option, ?description: string, ?failureBalanceTransaction: RefundFailureBalanceTransaction'AnyOf, ?failureReason: RefundFailureReason, ?instructionsEmail: string, ?nextAction: RefundNextAction) =
            {
                Refund.Amount = amount //required
                Refund.BalanceTransaction = balanceTransaction //required
                Refund.Charge = charge //required
                Refund.Created = created //required
                Refund.Currency = currency //required
                Refund.Id = id //required
                Refund.Metadata = metadata //required
                Refund.PaymentIntent = paymentIntent //required
                Refund.Reason = reason //required
                Refund.ReceiptNumber = receiptNumber //required
                Refund.SourceTransferReversal = sourceTransferReversal //required
                Refund.Status = status //required
                Refund.TransferReversal = transferReversal //required
                Refund.Description = description
                Refund.FailureBalanceTransaction = failureBalanceTransaction
                Refund.FailureReason = failureReason
                Refund.InstructionsEmail = instructionsEmail
                Refund.NextAction = nextAction
            }

    and RefundBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and RefundCharge'AnyOf =
        | String of string
        | Charge of Charge

    and RefundFailureBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and RefundFailureReason =
        | LostOrStolenCard
        | ExpiredOrCanceledCard
        | ChargeForPendingRefundDisputed
        | InsufficientFunds
        | Declined
        | MerchantRequest
        | Unknown

    and RefundPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and RefundReason =
        | Duplicate
        | ExpiredUncapturedCharge
        | Fraudulent
        | RequestedByCustomer

    and RefundSourceTransferReversal'AnyOf =
        | String of string
        | TransferReversal of TransferReversal

    and RefundStatus =
        | Pending
        | Succeeded
        | Failed

    and RefundTransferReversal'AnyOf =
        | String of string
        | TransferReversal of TransferReversal

    and RefundNextAction = {
        ///Contains the refund details.
        DisplayDetails: RefundNextActionDisplayDetails option
        ///Type of the next action to perform.
        Type: string
    }
    with
        static member New (displayDetails: RefundNextActionDisplayDetails option, ``type``: string) =
            {
                RefundNextAction.DisplayDetails = displayDetails //required
                RefundNextAction.Type = ``type`` //required
            }

    and RefundNextActionDisplayDetails = {
        EmailSent: EmailSent
        ///The expiry timestamp.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
    }
    with
        static member New (emailSent: EmailSent, expiresAt: DateTime) =
            {
                RefundNextActionDisplayDetails.EmailSent = emailSent //required
                RefundNextActionDisplayDetails.ExpiresAt = expiresAt //required
            }

    ///The Report Run object represents an instance of a report type generated with
    ///specific run parameters. Once the object is created, Stripe begins processing the report.
    ///When the report has finished running, it will give you a reference to a file
    ///where you can retrieve your results. For an overview, see
    ///[API Access to Reports](https://stripe.com/docs/reporting/statements/api).
    ///Note that certain report types can only be run based on your live-mode data (not test-mode
    ///data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
    and ReportingReportRun = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///If something should go wrong during the run, a message about the failure (populated when
        /// `status=failed`).
        Error: string option
        ///Unique identifier for the object.
        Id: string
        ///`true` if the report is run on live mode data and `false` if it is run on test mode data.
        Livemode: bool
        Parameters: FinancialReportingFinanceReportRunRunParameters
        ///The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
        ReportType: string
        ///The file object representing the result of the report run (populated when
        /// `status=succeeded`).
        Result: File option
        ///Status of this report run. This will be `pending` when the run is initially created.
        /// When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
        /// Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
        Status: string
        ///Timestamp at which this run successfully finished (populated when
        /// `status=succeeded`). Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]SucceededAt: DateTime option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "reporting.report_run"

        static member New (created: DateTime, error: string option, id: string, livemode: bool, parameters: FinancialReportingFinanceReportRunRunParameters, reportType: string, result: File option, status: string, succeededAt: DateTime option) =
            {
                ReportingReportRun.Created = created //required
                ReportingReportRun.Error = error //required
                ReportingReportRun.Id = id //required
                ReportingReportRun.Livemode = livemode //required
                ReportingReportRun.Parameters = parameters //required
                ReportingReportRun.ReportType = reportType //required
                ReportingReportRun.Result = result //required
                ReportingReportRun.Status = status //required
                ReportingReportRun.SucceededAt = succeededAt //required
            }

    ///The Report Type resource corresponds to a particular type of report, such as
    ///the "Activity summary" or "Itemized payouts" reports. These objects are
    ///identified by an ID belonging to a set of enumerated values. See
    ///[API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
    ///for those Report Type IDs, along with required and optional parameters.
    ///Note that certain report types can only be run based on your live-mode data (not test-mode
    ///data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
    and ReportingReportType = {
        ///Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]DataAvailableEnd: DateTime
        ///Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]DataAvailableStart: DateTime
        ///List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
        DefaultColumns: string list option
        ///The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Human-readable name of the Report Type
        Name: string
        ///When this Report Type was latest updated. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Updated: DateTime
        ///Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
        Version: int
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "reporting.report_type"

        static member New (dataAvailableEnd: DateTime, dataAvailableStart: DateTime, defaultColumns: string list option, id: string, livemode: bool, name: string, updated: DateTime, version: int) =
            {
                ReportingReportType.DataAvailableEnd = dataAvailableEnd //required
                ReportingReportType.DataAvailableStart = dataAvailableStart //required
                ReportingReportType.DefaultColumns = defaultColumns //required
                ReportingReportType.Id = id //required
                ReportingReportType.Livemode = livemode //required
                ReportingReportType.Name = name //required
                ReportingReportType.Updated = updated //required
                ReportingReportType.Version = version //required
            }

    and ReserveTransaction = {
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Unique identifier for the object.
        Id: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "reserve_transaction"

        static member New (amount: int, currency: string, description: string option, id: string) =
            {
                ReserveTransaction.Amount = amount //required
                ReserveTransaction.Currency = currency //required
                ReserveTransaction.Description = description //required
                ReserveTransaction.Id = id //required
            }

    ///Reviews can be used to supplement automated fraud detection with human expertise.
    ///Learn more about [Radar](/radar) and reviewing payments
    ///[here](https://stripe.com/docs/radar/reviews).
    and Review = {
        ///The ZIP or postal code of the card used, if applicable.
        BillingZip: string option
        ///The charge associated with this review.
        Charge: ReviewCharge'AnyOf option
        ///The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
        ClosedReason: ReviewClosedReason option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Unique identifier for the object.
        Id: string
        ///The IP address where the payment originated.
        IpAddress: string option
        ///Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
        IpAddressLocation: RadarReviewResourceLocation option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///If `true`, the review needs action.
        Open: bool
        ///The reason the review was opened. One of `rule` or `manual`.
        OpenedReason: ReviewOpenedReason
        ///The PaymentIntent ID associated with this review, if one exists.
        PaymentIntent: ReviewPaymentIntent'AnyOf option
        ///The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
        Reason: ReviewReason
        ///Information related to the browsing session of the user who initiated the payment.
        Session: RadarReviewResourceSession option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "review"

        static member New (billingZip: string option, charge: ReviewCharge'AnyOf option, closedReason: ReviewClosedReason option, created: DateTime, id: string, ipAddress: string option, ipAddressLocation: RadarReviewResourceLocation option, livemode: bool, ``open``: bool, openedReason: ReviewOpenedReason, reason: ReviewReason, session: RadarReviewResourceSession option, ?paymentIntent: ReviewPaymentIntent'AnyOf) =
            {
                Review.BillingZip = billingZip //required
                Review.Charge = charge //required
                Review.ClosedReason = closedReason //required
                Review.Created = created //required
                Review.Id = id //required
                Review.IpAddress = ipAddress //required
                Review.IpAddressLocation = ipAddressLocation //required
                Review.Livemode = livemode //required
                Review.Open = ``open`` //required
                Review.OpenedReason = openedReason //required
                Review.Reason = reason //required
                Review.Session = session //required
                Review.PaymentIntent = paymentIntent
            }

    and ReviewCharge'AnyOf =
        | String of string
        | Charge of Charge

    and ReviewClosedReason =
        | Approved
        | Disputed
        | Redacted
        | Refunded
        | RefundedAsFraud

    and ReviewOpenedReason =
        | Manual
        | Rule

    and ReviewPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and ReviewReason =
        | Rule
        | Manual
        | Approved
        | Refunded
        | RefundedAsFraud
        | Disputed
        | Redacted

    and Rule = {
        ///The action taken on the payment.
        Action: string
        ///Unique identifier for the object.
        Id: string
        ///The predicate to evaluate the payment against.
        Predicate: string
    }
    with
        static member New (action: string, id: string, predicate: string) =
            {
                Rule.Action = action //required
                Rule.Id = id //required
                Rule.Predicate = predicate //required
            }

    ///If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
    ///receive a `sigma.scheduled_query_run.created` webhook each time the query
    ///runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
    ///retrieve the query results.
    and ScheduledQueryRun = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///When the query was run, Sigma contained a snapshot of your Stripe data at this time.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]DataLoadTime: DateTime
        Error: SigmaScheduledQueryRunError option
        ///The file object representing the results of the query.
        File: File option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Time at which the result expires and is no longer available for download.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ResultAvailableUntil: DateTime
        ///SQL for the query.
        Sql: string
        ///The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
        Status: string
        ///Title of the query.
        Title: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "scheduled_query_run"

        static member New (created: DateTime, dataLoadTime: DateTime, file: File option, id: string, livemode: bool, resultAvailableUntil: DateTime, sql: string, status: string, title: string, ?error: SigmaScheduledQueryRunError) =
            {
                ScheduledQueryRun.Created = created //required
                ScheduledQueryRun.DataLoadTime = dataLoadTime //required
                ScheduledQueryRun.File = file //required
                ScheduledQueryRun.Id = id //required
                ScheduledQueryRun.Livemode = livemode //required
                ScheduledQueryRun.ResultAvailableUntil = resultAvailableUntil //required
                ScheduledQueryRun.Sql = sql //required
                ScheduledQueryRun.Status = status //required
                ScheduledQueryRun.Title = title //required
                ScheduledQueryRun.Error = error
            }

    and SchedulesPhaseAutomaticTax = {
        ///Whether Stripe automatically computes tax on invoices created during this phase.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                SchedulesPhaseAutomaticTax.Enabled = enabled //required
            }

    and SecretServiceResourceScope = {
        ///The secret scope type.
        Type: SecretServiceResourceScopeType
        ///The user ID, if type is set to "user"
        User: string option
    }
    with
        static member New (``type``: SecretServiceResourceScopeType, ?user: string) =
            {
                SecretServiceResourceScope.Type = ``type`` //required
                SecretServiceResourceScope.User = user
            }

    and SecretServiceResourceScopeType =
        | Account
        | User

    and SepaDebitGeneratedFrom = {
        ///The ID of the Charge that generated this PaymentMethod, if any.
        Charge: SepaDebitGeneratedFromCharge'AnyOf option
        ///The ID of the SetupAttempt that generated this PaymentMethod, if any.
        SetupAttempt: SepaDebitGeneratedFromSetupAttempt'AnyOf option
    }
    with
        static member New (charge: SepaDebitGeneratedFromCharge'AnyOf option, setupAttempt: SepaDebitGeneratedFromSetupAttempt'AnyOf option) =
            {
                SepaDebitGeneratedFrom.Charge = charge //required
                SepaDebitGeneratedFrom.SetupAttempt = setupAttempt //required
            }

    and SepaDebitGeneratedFromCharge'AnyOf =
        | String of string
        | Charge of Charge

    and SepaDebitGeneratedFromSetupAttempt'AnyOf =
        | String of string
        | SetupAttempt of SetupAttempt

    ///A SetupAttempt describes one attempted confirmation of a SetupIntent,
    ///whether that confirmation was successful or unsuccessful. You can use
    ///SetupAttempts to inspect details of a specific attempt at setting up a
    ///payment method using a SetupIntent.
    and SetupAttempt = {
        ///The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
        Application: SetupAttemptApplication'AnyOf option
        ///If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
        ///It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
        AttachToSelf: bool option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
        Customer: SetupAttemptCustomer'AnyOf option
        ///Indicates the directions of money movement for which this payment method is intended to be used.
        ///Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
        FlowDirections: SetupAttemptFlowDirections list option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
        OnBehalfOf: SetupAttemptOnBehalfOf'AnyOf option
        ///ID of the payment method used with this SetupAttempt.
        PaymentMethod: SetupAttemptPaymentMethod'AnyOf
        PaymentMethodDetails: SetupAttemptPaymentMethodDetails
        ///The error encountered during this attempt to confirm the SetupIntent, if any.
        SetupError: ApiErrors option
        ///ID of the SetupIntent that this attempt belongs to.
        SetupIntent: SetupAttemptSetupIntent'AnyOf
        ///Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
        Status: SetupAttemptStatus
        ///The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
        Usage: SetupAttemptUsage
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "setup_attempt"

        static member New (application: SetupAttemptApplication'AnyOf option, created: DateTime, customer: SetupAttemptCustomer'AnyOf option, flowDirections: SetupAttemptFlowDirections list option, id: string, livemode: bool, onBehalfOf: SetupAttemptOnBehalfOf'AnyOf option, paymentMethod: SetupAttemptPaymentMethod'AnyOf, paymentMethodDetails: SetupAttemptPaymentMethodDetails, setupError: ApiErrors option, setupIntent: SetupAttemptSetupIntent'AnyOf, status: SetupAttemptStatus, usage: SetupAttemptUsage, ?attachToSelf: bool) =
            {
                SetupAttempt.Application = application //required
                SetupAttempt.Created = created //required
                SetupAttempt.Customer = customer //required
                SetupAttempt.FlowDirections = flowDirections //required
                SetupAttempt.Id = id //required
                SetupAttempt.Livemode = livemode //required
                SetupAttempt.OnBehalfOf = onBehalfOf //required
                SetupAttempt.PaymentMethod = paymentMethod //required
                SetupAttempt.PaymentMethodDetails = paymentMethodDetails //required
                SetupAttempt.SetupError = setupError //required
                SetupAttempt.SetupIntent = setupIntent //required
                SetupAttempt.Status = status //required
                SetupAttempt.Usage = usage //required
                SetupAttempt.AttachToSelf = attachToSelf
            }

    and SetupAttemptApplication'AnyOf =
        | String of string
        | Application of Application

    and SetupAttemptCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and SetupAttemptOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and SetupAttemptPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SetupAttemptSetupIntent'AnyOf =
        | String of string
        | SetupIntent of SetupIntent

    and SetupAttemptStatus =
        | RequiresConfirmation
        | RequiresAction
        | Processing
        | Succeeded
        | Failed
        | Abandoned

    and SetupAttemptUsage =
        | OffSession
        | OnSession

    and SetupAttemptFlowDirections =
        | Inbound
        | Outbound

    and SetupAttemptPaymentMethodDetails = {
        AcssDebit: SetupAttemptPaymentMethodDetailsAcssDebit option
        AuBecsDebit: SetupAttemptPaymentMethodDetailsAuBecsDebit option
        BacsDebit: SetupAttemptPaymentMethodDetailsBacsDebit option
        Bancontact: SetupAttemptPaymentMethodDetailsBancontact option
        Boleto: SetupAttemptPaymentMethodDetailsBoleto option
        Card: SetupAttemptPaymentMethodDetailsCard option
        CardPresent: SetupAttemptPaymentMethodDetailsCardPresent option
        Cashapp: SetupAttemptPaymentMethodDetailsCashapp option
        Ideal: SetupAttemptPaymentMethodDetailsIdeal option
        Klarna: SetupAttemptPaymentMethodDetailsKlarna option
        Link: SetupAttemptPaymentMethodDetailsLink option
        Paypal: SetupAttemptPaymentMethodDetailsPaypal option
        SepaDebit: SetupAttemptPaymentMethodDetailsSepaDebit option
        Sofort: SetupAttemptPaymentMethodDetailsSofort option
        ///The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
        Type: string
        UsBankAccount: SetupAttemptPaymentMethodDetailsUsBankAccount option
    }
    with
        static member New (``type``: string, ?acssDebit: SetupAttemptPaymentMethodDetailsAcssDebit, ?auBecsDebit: SetupAttemptPaymentMethodDetailsAuBecsDebit, ?bacsDebit: SetupAttemptPaymentMethodDetailsBacsDebit, ?bancontact: SetupAttemptPaymentMethodDetailsBancontact, ?boleto: SetupAttemptPaymentMethodDetailsBoleto, ?card: SetupAttemptPaymentMethodDetailsCard, ?cardPresent: SetupAttemptPaymentMethodDetailsCardPresent, ?cashapp: SetupAttemptPaymentMethodDetailsCashapp, ?ideal: SetupAttemptPaymentMethodDetailsIdeal, ?klarna: SetupAttemptPaymentMethodDetailsKlarna, ?link: SetupAttemptPaymentMethodDetailsLink, ?paypal: SetupAttemptPaymentMethodDetailsPaypal, ?sepaDebit: SetupAttemptPaymentMethodDetailsSepaDebit, ?sofort: SetupAttemptPaymentMethodDetailsSofort, ?usBankAccount: SetupAttemptPaymentMethodDetailsUsBankAccount) =
            {
                SetupAttemptPaymentMethodDetails.Type = ``type`` //required
                SetupAttemptPaymentMethodDetails.AcssDebit = acssDebit
                SetupAttemptPaymentMethodDetails.AuBecsDebit = auBecsDebit
                SetupAttemptPaymentMethodDetails.BacsDebit = bacsDebit
                SetupAttemptPaymentMethodDetails.Bancontact = bancontact
                SetupAttemptPaymentMethodDetails.Boleto = boleto
                SetupAttemptPaymentMethodDetails.Card = card
                SetupAttemptPaymentMethodDetails.CardPresent = cardPresent
                SetupAttemptPaymentMethodDetails.Cashapp = cashapp
                SetupAttemptPaymentMethodDetails.Ideal = ideal
                SetupAttemptPaymentMethodDetails.Klarna = klarna
                SetupAttemptPaymentMethodDetails.Link = link
                SetupAttemptPaymentMethodDetails.Paypal = paypal
                SetupAttemptPaymentMethodDetails.SepaDebit = sepaDebit
                SetupAttemptPaymentMethodDetails.Sofort = sofort
                SetupAttemptPaymentMethodDetails.UsBankAccount = usBankAccount
            }

    and SetupAttemptPaymentMethodDetailsAcssDebit = {
        SetupAttemptPaymentMethodDetailsAcssDebit: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsAcssDebit: string option) =
            {
                SetupAttemptPaymentMethodDetailsAcssDebit.SetupAttemptPaymentMethodDetailsAcssDebit = setupAttemptPaymentMethodDetailsAcssDebit |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsAuBecsDebit = {
        SetupAttemptPaymentMethodDetailsAuBecsDebit: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsAuBecsDebit: string option) =
            {
                SetupAttemptPaymentMethodDetailsAuBecsDebit.SetupAttemptPaymentMethodDetailsAuBecsDebit = setupAttemptPaymentMethodDetailsAuBecsDebit |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsBacsDebit = {
        SetupAttemptPaymentMethodDetailsBacsDebit: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsBacsDebit: string option) =
            {
                SetupAttemptPaymentMethodDetailsBacsDebit.SetupAttemptPaymentMethodDetailsBacsDebit = setupAttemptPaymentMethodDetailsBacsDebit |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsBancontact = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Bank Identifier Code of the bank associated with the bank account.
        Bic: string option
        ///The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        GeneratedSepaDebit: SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebit'AnyOf option
        ///The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        GeneratedSepaDebitMandate: SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandate'AnyOf option
        ///Last four characters of the IBAN.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///Preferred language of the Bancontact authorization page that the customer is redirected to.
        ///Can be one of `en`, `de`, `fr`, or `nl`
        PreferredLanguage: SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage option
        ///Owner's verified full name. Values are verified or provided by Bancontact directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
    }
    with
        static member New (bankCode: string option, bankName: string option, bic: string option, generatedSepaDebit: SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebit'AnyOf option, generatedSepaDebitMandate: SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandate'AnyOf option, ibanLast4: string option, preferredLanguage: SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage option, verifiedName: string option) =
            {
                SetupAttemptPaymentMethodDetailsBancontact.BankCode = bankCode //required
                SetupAttemptPaymentMethodDetailsBancontact.BankName = bankName //required
                SetupAttemptPaymentMethodDetailsBancontact.Bic = bic //required
                SetupAttemptPaymentMethodDetailsBancontact.GeneratedSepaDebit = generatedSepaDebit //required
                SetupAttemptPaymentMethodDetailsBancontact.GeneratedSepaDebitMandate = generatedSepaDebitMandate //required
                SetupAttemptPaymentMethodDetailsBancontact.IbanLast4 = ibanLast4 //required
                SetupAttemptPaymentMethodDetailsBancontact.PreferredLanguage = preferredLanguage //required
                SetupAttemptPaymentMethodDetailsBancontact.VerifiedName = verifiedName //required
            }

    and SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebit'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and SetupAttemptPaymentMethodDetailsBancontactPreferredLanguage =
        | De
        | En
        | Fr
        | Nl

    and SetupAttemptPaymentMethodDetailsBoleto = {
        SetupAttemptPaymentMethodDetailsBoleto: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsBoleto: string option) =
            {
                SetupAttemptPaymentMethodDetailsBoleto.SetupAttemptPaymentMethodDetailsBoleto = setupAttemptPaymentMethodDetailsBoleto |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsCard = {
        ///Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Brand: SetupAttemptPaymentMethodDetailsCardBrand option
        ///Check results by Card networks on Card address and CVC at the time of authorization
        Checks: PaymentMethodDetailsCardChecks option
        ///Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        Country: string option
        ///A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        Description: string option
        ///Two-digit number representing the card's expiration month.
        ExpMonth: int option
        ///Four-digit number representing the card's expiration year.
        ExpYear: int option
        ///Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        ///*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        Fingerprint: string option
        ///Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        Funding: SetupAttemptPaymentMethodDetailsCardFunding option
        ///Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        Iin: string option
        ///The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        Issuer: string option
        ///The last four digits of the card.
        [<JsonField(Name="last4")>]Last4: string option
        ///Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        Network: SetupAttemptPaymentMethodDetailsCardNetwork option
        ///Populated if this authorization used 3D Secure authentication.
        ThreeDSecure: ThreeDSecureDetails option
        ///If this Card is part of a card wallet, this contains the details of the card wallet.
        Wallet: SetupAttemptPaymentMethodDetailsCardWallet option
    }
    with
        static member New (brand: SetupAttemptPaymentMethodDetailsCardBrand option, checks: PaymentMethodDetailsCardChecks option, country: string option, expMonth: int option, expYear: int option, funding: SetupAttemptPaymentMethodDetailsCardFunding option, last4: string option, network: SetupAttemptPaymentMethodDetailsCardNetwork option, threeDSecure: ThreeDSecureDetails option, wallet: SetupAttemptPaymentMethodDetailsCardWallet option, ?description: string option, ?fingerprint: string option, ?iin: string option, ?issuer: string option) =
            {
                SetupAttemptPaymentMethodDetailsCard.Brand = brand //required
                SetupAttemptPaymentMethodDetailsCard.Checks = checks //required
                SetupAttemptPaymentMethodDetailsCard.Country = country //required
                SetupAttemptPaymentMethodDetailsCard.ExpMonth = expMonth //required
                SetupAttemptPaymentMethodDetailsCard.ExpYear = expYear //required
                SetupAttemptPaymentMethodDetailsCard.Funding = funding //required
                SetupAttemptPaymentMethodDetailsCard.Last4 = last4 //required
                SetupAttemptPaymentMethodDetailsCard.Network = network //required
                SetupAttemptPaymentMethodDetailsCard.ThreeDSecure = threeDSecure //required
                SetupAttemptPaymentMethodDetailsCard.Wallet = wallet //required
                SetupAttemptPaymentMethodDetailsCard.Description = description |> Option.flatten
                SetupAttemptPaymentMethodDetailsCard.Fingerprint = fingerprint |> Option.flatten
                SetupAttemptPaymentMethodDetailsCard.Iin = iin |> Option.flatten
                SetupAttemptPaymentMethodDetailsCard.Issuer = issuer |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsCardBrand =
        | Amex
        | Diners
        | Discover
        | EftposAu
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and SetupAttemptPaymentMethodDetailsCardFunding =
        | Credit
        | Debit
        | Prepaid
        | Unknown

    and SetupAttemptPaymentMethodDetailsCardNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Visa
        | Unknown

    and SetupAttemptPaymentMethodDetailsCardPresent = {
        ///The ID of the Card PaymentMethod which was generated by this SetupAttempt.
        GeneratedCard: SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'AnyOf option
    }
    with
        static member New (generatedCard: SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'AnyOf option) =
            {
                SetupAttemptPaymentMethodDetailsCardPresent.GeneratedCard = generatedCard //required
            }

    and SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SetupAttemptPaymentMethodDetailsCardWallet = {
        ApplePay: PaymentMethodDetailsCardWalletApplePay option
        GooglePay: PaymentMethodDetailsCardWalletGooglePay option
        ///The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
        Type: SetupAttemptPaymentMethodDetailsCardWalletType
    }
    with
        static member New (``type``: SetupAttemptPaymentMethodDetailsCardWalletType, ?applePay: PaymentMethodDetailsCardWalletApplePay, ?googlePay: PaymentMethodDetailsCardWalletGooglePay) =
            {
                SetupAttemptPaymentMethodDetailsCardWallet.Type = ``type`` //required
                SetupAttemptPaymentMethodDetailsCardWallet.ApplePay = applePay
                SetupAttemptPaymentMethodDetailsCardWallet.GooglePay = googlePay
            }

    and SetupAttemptPaymentMethodDetailsCardWalletType =
        | ApplePay
        | GooglePay
        | Link

    and SetupAttemptPaymentMethodDetailsCashapp = {
        SetupAttemptPaymentMethodDetailsCashapp: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsCashapp: string option) =
            {
                SetupAttemptPaymentMethodDetailsCashapp.SetupAttemptPaymentMethodDetailsCashapp = setupAttemptPaymentMethodDetailsCashapp |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsIdeal = {
        ///The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
        Bank: SetupAttemptPaymentMethodDetailsIdealBank option
        ///The Bank Identifier Code of the customer's bank.
        Bic: SetupAttemptPaymentMethodDetailsIdealBic option
        ///The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        GeneratedSepaDebit: SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebit'AnyOf option
        ///The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        GeneratedSepaDebitMandate: SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandate'AnyOf option
        ///Last four characters of the IBAN.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///Owner's verified full name. Values are verified or provided by iDEAL directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
    }
    with
        static member New (bank: SetupAttemptPaymentMethodDetailsIdealBank option, bic: SetupAttemptPaymentMethodDetailsIdealBic option, generatedSepaDebit: SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebit'AnyOf option, generatedSepaDebitMandate: SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandate'AnyOf option, ibanLast4: string option, verifiedName: string option) =
            {
                SetupAttemptPaymentMethodDetailsIdeal.Bank = bank //required
                SetupAttemptPaymentMethodDetailsIdeal.Bic = bic //required
                SetupAttemptPaymentMethodDetailsIdeal.GeneratedSepaDebit = generatedSepaDebit //required
                SetupAttemptPaymentMethodDetailsIdeal.GeneratedSepaDebitMandate = generatedSepaDebitMandate //required
                SetupAttemptPaymentMethodDetailsIdeal.IbanLast4 = ibanLast4 //required
                SetupAttemptPaymentMethodDetailsIdeal.VerifiedName = verifiedName //required
            }

    and SetupAttemptPaymentMethodDetailsIdealBank =
        | AbnAmro
        | AsnBank
        | Bunq
        | Handelsbanken
        | Ing
        | Knab
        | Moneyou
        | Rabobank
        | Regiobank
        | Revolut
        | SnsBank
        | TriodosBank
        | VanLanschot
        | Yoursafe

    and SetupAttemptPaymentMethodDetailsIdealBic =
        | [<JsonUnionCase("ABNANL2A")>] ABNANL2A
        | [<JsonUnionCase("ASNBNL21")>] ASNBNL21
        | [<JsonUnionCase("BITSNL2A")>] BITSNL2A
        | [<JsonUnionCase("BUNQNL2A")>] BUNQNL2A
        | [<JsonUnionCase("FVLBNL22")>] FVLBNL22
        | [<JsonUnionCase("HANDNL2A")>] HANDNL2A
        | [<JsonUnionCase("INGBNL2A")>] INGBNL2A
        | [<JsonUnionCase("KNABNL2H")>] KNABNL2H
        | [<JsonUnionCase("MOYONL21")>] MOYONL21
        | [<JsonUnionCase("RABONL2U")>] RABONL2U
        | [<JsonUnionCase("RBRBNL21")>] RBRBNL21
        | [<JsonUnionCase("REVOIE23")>] REVOIE23
        | [<JsonUnionCase("REVOLT21")>] REVOLT21
        | [<JsonUnionCase("SNSBNL2A")>] SNSBNL2A
        | [<JsonUnionCase("TRIONL2U")>] TRIONL2U

    and SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebit'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and SetupAttemptPaymentMethodDetailsKlarna = {
        SetupAttemptPaymentMethodDetailsKlarna: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsKlarna: string option) =
            {
                SetupAttemptPaymentMethodDetailsKlarna.SetupAttemptPaymentMethodDetailsKlarna = setupAttemptPaymentMethodDetailsKlarna |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsLink = {
        SetupAttemptPaymentMethodDetailsLink: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsLink: string option) =
            {
                SetupAttemptPaymentMethodDetailsLink.SetupAttemptPaymentMethodDetailsLink = setupAttemptPaymentMethodDetailsLink |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsPaypal = {
        SetupAttemptPaymentMethodDetailsPaypal: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsPaypal: string option) =
            {
                SetupAttemptPaymentMethodDetailsPaypal.SetupAttemptPaymentMethodDetailsPaypal = setupAttemptPaymentMethodDetailsPaypal |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsSepaDebit = {
        SetupAttemptPaymentMethodDetailsSepaDebit: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsSepaDebit: string option) =
            {
                SetupAttemptPaymentMethodDetailsSepaDebit.SetupAttemptPaymentMethodDetailsSepaDebit = setupAttemptPaymentMethodDetailsSepaDebit |> Option.flatten
            }

    and SetupAttemptPaymentMethodDetailsSofort = {
        ///Bank code of bank associated with the bank account.
        BankCode: string option
        ///Name of the bank associated with the bank account.
        BankName: string option
        ///Bank Identifier Code of the bank associated with the bank account.
        Bic: string option
        ///The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        GeneratedSepaDebit: SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebit'AnyOf option
        ///The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        GeneratedSepaDebitMandate: SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandate'AnyOf option
        ///Last four characters of the IBAN.
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        ///Preferred language of the Sofort authorization page that the customer is redirected to.
        ///Can be one of `en`, `de`, `fr`, or `nl`
        PreferredLanguage: SetupAttemptPaymentMethodDetailsSofortPreferredLanguage option
        ///Owner's verified full name. Values are verified or provided by Sofort directly
        ///(if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
    }
    with
        static member New (bankCode: string option, bankName: string option, bic: string option, generatedSepaDebit: SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebit'AnyOf option, generatedSepaDebitMandate: SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandate'AnyOf option, ibanLast4: string option, preferredLanguage: SetupAttemptPaymentMethodDetailsSofortPreferredLanguage option, verifiedName: string option) =
            {
                SetupAttemptPaymentMethodDetailsSofort.BankCode = bankCode //required
                SetupAttemptPaymentMethodDetailsSofort.BankName = bankName //required
                SetupAttemptPaymentMethodDetailsSofort.Bic = bic //required
                SetupAttemptPaymentMethodDetailsSofort.GeneratedSepaDebit = generatedSepaDebit //required
                SetupAttemptPaymentMethodDetailsSofort.GeneratedSepaDebitMandate = generatedSepaDebitMandate //required
                SetupAttemptPaymentMethodDetailsSofort.IbanLast4 = ibanLast4 //required
                SetupAttemptPaymentMethodDetailsSofort.PreferredLanguage = preferredLanguage //required
                SetupAttemptPaymentMethodDetailsSofort.VerifiedName = verifiedName //required
            }

    and SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebit'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and SetupAttemptPaymentMethodDetailsSofortPreferredLanguage =
        | De
        | En
        | Fr
        | Nl

    and SetupAttemptPaymentMethodDetailsUsBankAccount = {
        SetupAttemptPaymentMethodDetailsUsBankAccount: string option
    }
    with
        static member New (?setupAttemptPaymentMethodDetailsUsBankAccount: string option) =
            {
                SetupAttemptPaymentMethodDetailsUsBankAccount.SetupAttemptPaymentMethodDetailsUsBankAccount = setupAttemptPaymentMethodDetailsUsBankAccount |> Option.flatten
            }

    ///A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
    ///For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
    ///Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
    ///Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
    ///Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
    ///The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
    ///you through the setup process.
    ///Successful SetupIntents result in payment credentials that are optimized for future payments.
    ///For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
    ///[Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
    ///in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
    ///If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
    ///it will automatically attach the resulting payment method to that Customer.
    ///We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
    ///PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
    ///By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
    ///even as regulations change over time.
    ///Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents)
    and SetupIntent = {
        ///ID of the Connect application that created the SetupIntent.
        Application: SetupIntentApplication'AnyOf option
        ///If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
        ///It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
        AttachToSelf: bool option
        ///Settings for dynamic payment methods compatible with this Setup Intent
        AutomaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsSetupIntent option
        ///Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
        CancellationReason: SetupIntentCancellationReason option
        ///The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
        ///The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
        ClientSecret: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///ID of the Customer this SetupIntent belongs to, if one exists.
        ///If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
        Customer: SetupIntentCustomer'AnyOf option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Indicates the directions of money movement for which this payment method is intended to be used.
        ///Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
        FlowDirections: SetupIntentFlowDirections list option
        ///Unique identifier for the object.
        Id: string
        ///The error encountered in the previous SetupIntent confirmation.
        LastSetupError: ApiErrors option
        ///The most recent SetupAttempt for this SetupIntent.
        LatestAttempt: SetupIntentLatestAttempt'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///ID of the multi use Mandate generated by the SetupIntent.
        Mandate: SetupIntentMandate'AnyOf option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
        NextAction: SetupIntentNextAction option
        ///The account (if any) for which the setup is intended.
        OnBehalfOf: SetupIntentOnBehalfOf'AnyOf option
        ///ID of the payment method used with this SetupIntent.
        PaymentMethod: SetupIntentPaymentMethod'AnyOf option
        ///Payment-method-specific configuration for this SetupIntent.
        PaymentMethodOptions: SetupIntentPaymentMethodOptions option
        ///The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
        PaymentMethodTypes: string list
        ///ID of the single_use Mandate generated by the SetupIntent.
        SingleUseMandate: SetupIntentSingleUseMandate'AnyOf option
        ///[Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
        Status: SetupIntentStatus
        ///Indicates how the payment method is intended to be used in the future.
        ///Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
        Usage: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "setup_intent"

        static member New (application: SetupIntentApplication'AnyOf option, automaticPaymentMethods: PaymentFlowsAutomaticPaymentMethodsSetupIntent option, cancellationReason: SetupIntentCancellationReason option, clientSecret: string option, created: DateTime, customer: SetupIntentCustomer'AnyOf option, description: string option, flowDirections: SetupIntentFlowDirections list option, id: string, lastSetupError: ApiErrors option, latestAttempt: SetupIntentLatestAttempt'AnyOf option, livemode: bool, mandate: SetupIntentMandate'AnyOf option, metadata: Map<string, string> option, nextAction: SetupIntentNextAction option, onBehalfOf: SetupIntentOnBehalfOf'AnyOf option, paymentMethod: SetupIntentPaymentMethod'AnyOf option, paymentMethodOptions: SetupIntentPaymentMethodOptions option, paymentMethodTypes: string list, singleUseMandate: SetupIntentSingleUseMandate'AnyOf option, status: SetupIntentStatus, usage: string, ?attachToSelf: bool) =
            {
                SetupIntent.Application = application //required
                SetupIntent.AutomaticPaymentMethods = automaticPaymentMethods //required
                SetupIntent.CancellationReason = cancellationReason //required
                SetupIntent.ClientSecret = clientSecret //required
                SetupIntent.Created = created //required
                SetupIntent.Customer = customer //required
                SetupIntent.Description = description //required
                SetupIntent.FlowDirections = flowDirections //required
                SetupIntent.Id = id //required
                SetupIntent.LastSetupError = lastSetupError //required
                SetupIntent.LatestAttempt = latestAttempt //required
                SetupIntent.Livemode = livemode //required
                SetupIntent.Mandate = mandate //required
                SetupIntent.Metadata = metadata //required
                SetupIntent.NextAction = nextAction //required
                SetupIntent.OnBehalfOf = onBehalfOf //required
                SetupIntent.PaymentMethod = paymentMethod //required
                SetupIntent.PaymentMethodOptions = paymentMethodOptions //required
                SetupIntent.PaymentMethodTypes = paymentMethodTypes //required
                SetupIntent.SingleUseMandate = singleUseMandate //required
                SetupIntent.Status = status //required
                SetupIntent.Usage = usage //required
                SetupIntent.AttachToSelf = attachToSelf
            }

    and SetupIntentApplication'AnyOf =
        | String of string
        | Application of Application

    and SetupIntentCancellationReason =
        | Abandoned
        | Duplicate
        | RequestedByCustomer

    and SetupIntentCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and SetupIntentLatestAttempt'AnyOf =
        | String of string
        | SetupAttempt of SetupAttempt

    and SetupIntentMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and SetupIntentOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and SetupIntentPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SetupIntentSingleUseMandate'AnyOf =
        | String of string
        | Mandate of Mandate

    and SetupIntentStatus =
        | Canceled
        | Processing
        | RequiresAction
        | RequiresConfirmation
        | RequiresPaymentMethod
        | Succeeded

    and SetupIntentFlowDirections =
        | Inbound
        | Outbound

    and SetupIntentNextAction = {
        CashappHandleRedirectOrDisplayQrCode: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode option
        RedirectToUrl: SetupIntentNextActionRedirectToUrl option
        ///Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
        Type: SetupIntentNextActionType
        ///When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
        UseStripeSdk: string option
        VerifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits option
    }
    with
        static member New (``type``: SetupIntentNextActionType, ?cashappHandleRedirectOrDisplayQrCode: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode, ?redirectToUrl: SetupIntentNextActionRedirectToUrl, ?useStripeSdk: string, ?verifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits) =
            {
                SetupIntentNextAction.Type = ``type`` //required
                SetupIntentNextAction.CashappHandleRedirectOrDisplayQrCode = cashappHandleRedirectOrDisplayQrCode
                SetupIntentNextAction.RedirectToUrl = redirectToUrl
                SetupIntentNextAction.UseStripeSdk = useStripeSdk
                SetupIntentNextAction.VerifyWithMicrodeposits = verifyWithMicrodeposits
            }

    and SetupIntentNextActionType =
        | RedirectToUrl
        | UseStripeSdk
        | AlipayHandleRedirect
        | OxxoDisplayDetails
        | VerifyWithMicrodeposits

    and SetupIntentNextActionRedirectToUrl = {
        ///If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
        ReturnUrl: string option
        ///The URL you must redirect your customer to in order to authenticate.
        Url: string option
    }
    with
        static member New (returnUrl: string option, url: string option) =
            {
                SetupIntentNextActionRedirectToUrl.ReturnUrl = returnUrl //required
                SetupIntentNextActionRedirectToUrl.Url = url //required
            }

    and SetupIntentNextActionVerifyWithMicrodeposits = {
        ///The timestamp when the microdeposits are expected to land.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ArrivalDate: DateTime
        ///The URL for the hosted verification page, which allows customers to verify their bank account.
        HostedVerificationUrl: string
        ///The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
        MicrodepositType: SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType option
    }
    with
        static member New (arrivalDate: DateTime, hostedVerificationUrl: string, microdepositType: SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType option) =
            {
                SetupIntentNextActionVerifyWithMicrodeposits.ArrivalDate = arrivalDate //required
                SetupIntentNextActionVerifyWithMicrodeposits.HostedVerificationUrl = hostedVerificationUrl //required
                SetupIntentNextActionVerifyWithMicrodeposits.MicrodepositType = microdepositType //required
            }

    and SetupIntentNextActionVerifyWithMicrodepositsMicrodepositType =
        | Amounts
        | DescriptorCode

    and SetupIntentPaymentMethodOptions = {
        AcssDebit: SetupIntentPaymentMethodOptionsAcssDebit option
        Card: SetupIntentPaymentMethodOptionsCard option
        Link: SetupIntentPaymentMethodOptionsLink option
        Paypal: SetupIntentPaymentMethodOptionsPaypal option
        SepaDebit: SetupIntentPaymentMethodOptionsSepaDebit option
        UsBankAccount: SetupIntentPaymentMethodOptionsUsBankAccount option
    }
    with
        static member New (?acssDebit: SetupIntentPaymentMethodOptionsAcssDebit, ?card: SetupIntentPaymentMethodOptionsCard, ?link: SetupIntentPaymentMethodOptionsLink, ?paypal: SetupIntentPaymentMethodOptionsPaypal, ?sepaDebit: SetupIntentPaymentMethodOptionsSepaDebit, ?usBankAccount: SetupIntentPaymentMethodOptionsUsBankAccount) =
            {
                SetupIntentPaymentMethodOptions.AcssDebit = acssDebit
                SetupIntentPaymentMethodOptions.Card = card
                SetupIntentPaymentMethodOptions.Link = link
                SetupIntentPaymentMethodOptions.Paypal = paypal
                SetupIntentPaymentMethodOptions.SepaDebit = sepaDebit
                SetupIntentPaymentMethodOptions.UsBankAccount = usBankAccount
            }

    and SetupIntentPaymentMethodOptionsAcssDebit = {
        ///Currency supported by the bank account
        Currency: SetupIntentPaymentMethodOptionsAcssDebitCurrency option
        MandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit option
        ///Bank account verification method.
        VerificationMethod: SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod option
    }
    with
        static member New (currency: SetupIntentPaymentMethodOptionsAcssDebitCurrency option, ?mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit, ?verificationMethod: SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod) =
            {
                SetupIntentPaymentMethodOptionsAcssDebit.Currency = currency //required
                SetupIntentPaymentMethodOptionsAcssDebit.MandateOptions = mandateOptions
                SetupIntentPaymentMethodOptionsAcssDebit.VerificationMethod = verificationMethod
            }

    and SetupIntentPaymentMethodOptionsAcssDebitCurrency =
        | Cad
        | Usd

    and SetupIntentPaymentMethodOptionsAcssDebitVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and SetupIntentPaymentMethodOptionsCard = {
        ///Configuration options for setting up an eMandate for cards issued in India.
        MandateOptions: SetupIntentPaymentMethodOptionsCardMandateOptions option
        ///Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time.
        Network: SetupIntentPaymentMethodOptionsCardNetwork option
        ///We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
        RequestThreeDSecure: SetupIntentPaymentMethodOptionsCardRequestThreeDSecure option
    }
    with
        static member New (mandateOptions: SetupIntentPaymentMethodOptionsCardMandateOptions option, network: SetupIntentPaymentMethodOptionsCardNetwork option, requestThreeDSecure: SetupIntentPaymentMethodOptionsCardRequestThreeDSecure option) =
            {
                SetupIntentPaymentMethodOptionsCard.MandateOptions = mandateOptions //required
                SetupIntentPaymentMethodOptionsCard.Network = network //required
                SetupIntentPaymentMethodOptionsCard.RequestThreeDSecure = requestThreeDSecure //required
            }

    and SetupIntentPaymentMethodOptionsCardNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Unknown
        | Visa

    and SetupIntentPaymentMethodOptionsCardRequestThreeDSecure =
        | Any
        | Automatic
        | ChallengeOnly

    and SetupIntentPaymentMethodOptionsCardMandateOptions = {
        ///Amount to be charged for future payments.
        Amount: int
        ///One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
        AmountType: SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///A description of the mandate or subscription that is meant to be displayed to the customer.
        Description: string option
        ///End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EndDate: DateTime option
        ///Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
        Interval: SetupIntentPaymentMethodOptionsCardMandateOptionsInterval
        ///The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
        IntervalCount: int option
        ///Unique identifier for the mandate or subscription.
        Reference: string
        ///Start date of the mandate or subscription. Start date should not be lesser than yesterday.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]StartDate: DateTime
        ///Specifies the type of mandates supported. Possible values are `india`.
        SupportedTypes: string list option
    }
    with
        static member New (amount: int, amountType: SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType, currency: string, description: string option, endDate: DateTime option, interval: SetupIntentPaymentMethodOptionsCardMandateOptionsInterval, intervalCount: int option, reference: string, startDate: DateTime, supportedTypes: string list option) =
            {
                SetupIntentPaymentMethodOptionsCardMandateOptions.Amount = amount //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.AmountType = amountType //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.Currency = currency //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.Description = description //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.EndDate = endDate //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.Interval = interval //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.IntervalCount = intervalCount //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.Reference = reference //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.StartDate = startDate //required
                SetupIntentPaymentMethodOptionsCardMandateOptions.SupportedTypes = supportedTypes //required
            }

    and SetupIntentPaymentMethodOptionsCardMandateOptionsAmountType =
        | Fixed
        | Maximum

    and SetupIntentPaymentMethodOptionsCardMandateOptionsInterval =
        | Day
        | Month
        | Sporadic
        | Week
        | Year

    and SetupIntentPaymentMethodOptionsLink = {
        ///[Deprecated] This is a legacy parameter that no longer has any function.
        PersistentToken: string option
    }
    with
        static member New (persistentToken: string option) =
            {
                SetupIntentPaymentMethodOptionsLink.PersistentToken = persistentToken //required
            }

    and SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
        ///A URL for custom mandate text
        CustomMandateUrl: string option
        ///List of Stripe products where this mandate can be selected automatically.
        DefaultFor: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor list option
        ///Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
        IntervalDescription: string option
        ///Payment schedule for the mandate.
        PaymentSchedule: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule option
        ///Transaction type of the mandate.
        TransactionType: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType option
    }
    with
        static member New (intervalDescription: string option, paymentSchedule: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule option, transactionType: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType option, ?customMandateUrl: string, ?defaultFor: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor list) =
            {
                SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit.IntervalDescription = intervalDescription //required
                SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit.PaymentSchedule = paymentSchedule //required
                SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit.TransactionType = transactionType //required
                SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit.CustomMandateUrl = customMandateUrl
                SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit.DefaultFor = defaultFor
            }

    and SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule =
        | Combined
        | Interval
        | Sporadic

    and SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType =
        | Business
        | Personal

    and SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor =
        | Invoice
        | Subscription

    and SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = {
        SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit: string option
    }
    with
        static member New (?setupIntentPaymentMethodOptionsMandateOptionsSepaDebit: string option) =
            {
                SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit.SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = setupIntentPaymentMethodOptionsMandateOptionsSepaDebit |> Option.flatten
            }

    and SetupIntentPaymentMethodOptionsPaypal = {
        ///The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
        BillingAgreementId: string option
    }
    with
        static member New (billingAgreementId: string option) =
            {
                SetupIntentPaymentMethodOptionsPaypal.BillingAgreementId = billingAgreementId //required
            }

    and SetupIntentPaymentMethodOptionsSepaDebit = {
        MandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit option
    }
    with
        static member New (?mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit) =
            {
                SetupIntentPaymentMethodOptionsSepaDebit.MandateOptions = mandateOptions
            }

    and SetupIntentPaymentMethodOptionsUsBankAccount = {
        FinancialConnections: LinkedAccountOptionsUsBankAccount option
        ///Bank account verification method.
        VerificationMethod: SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod option
    }
    with
        static member New (?financialConnections: LinkedAccountOptionsUsBankAccount, ?verificationMethod: SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod) =
            {
                SetupIntentPaymentMethodOptionsUsBankAccount.FinancialConnections = financialConnections
                SetupIntentPaymentMethodOptionsUsBankAccount.VerificationMethod = verificationMethod
            }

    and SetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and SetupIntentTypeSpecificPaymentMethodOptionsClient = {
        ///Bank account verification method.
        VerificationMethod: SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod option
    }
    with
        static member New (?verificationMethod: SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod) =
            {
                SetupIntentTypeSpecificPaymentMethodOptionsClient.VerificationMethod = verificationMethod
            }

    and SetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod =
        | Automatic
        | Instant
        | Microdeposits

    and Shipping = {
        Address: Address option
        ///The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
        Carrier: string option
        ///Recipient name.
        Name: string option
        ///Recipient phone (including extension).
        Phone: string option
        ///The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
        TrackingNumber: string option
    }
    with
        static member New (?address: Address, ?carrier: string option, ?name: string, ?phone: string option, ?trackingNumber: string option) =
            {
                Shipping.Address = address
                Shipping.Carrier = carrier |> Option.flatten
                Shipping.Name = name
                Shipping.Phone = phone |> Option.flatten
                Shipping.TrackingNumber = trackingNumber |> Option.flatten
            }

    ///Shipping rates describe the price of shipping presented to your customers and
    ///applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
    and ShippingRate = {
        ///Whether the shipping rate can be used for new purchases. Defaults to `true`.
        Active: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
        DeliveryEstimate: ShippingRateDeliveryEstimate option
        ///The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
        DisplayName: string option
        FixedAmount: ShippingRateFixedAmount option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
        TaxBehavior: ShippingRateTaxBehavior option
        ///A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
        TaxCode: ShippingRateTaxCode'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "shipping_rate"
        ///The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
        member _.Type = "fixed_amount"

        static member New (active: bool, created: DateTime, deliveryEstimate: ShippingRateDeliveryEstimate option, displayName: string option, id: string, livemode: bool, metadata: Map<string, string>, taxBehavior: ShippingRateTaxBehavior option, taxCode: ShippingRateTaxCode'AnyOf option, ?fixedAmount: ShippingRateFixedAmount) =
            {
                ShippingRate.Active = active //required
                ShippingRate.Created = created //required
                ShippingRate.DeliveryEstimate = deliveryEstimate //required
                ShippingRate.DisplayName = displayName //required
                ShippingRate.Id = id //required
                ShippingRate.Livemode = livemode //required
                ShippingRate.Metadata = metadata //required
                ShippingRate.TaxBehavior = taxBehavior //required
                ShippingRate.TaxCode = taxCode //required
                ShippingRate.FixedAmount = fixedAmount
            }

    and ShippingRateTaxBehavior =
        | Exclusive
        | Inclusive
        | Unspecified

    and ShippingRateTaxCode'AnyOf =
        | String of string
        | TaxCode of TaxCode

    and ShippingRateCurrencyOption = {
        ///A non-negative integer in cents representing how much to charge.
        Amount: int
        ///Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
        TaxBehavior: ShippingRateCurrencyOptionTaxBehavior
    }
    with
        static member New (amount: int, taxBehavior: ShippingRateCurrencyOptionTaxBehavior) =
            {
                ShippingRateCurrencyOption.Amount = amount //required
                ShippingRateCurrencyOption.TaxBehavior = taxBehavior //required
            }

    and ShippingRateCurrencyOptionTaxBehavior =
        | Exclusive
        | Inclusive
        | Unspecified

    and ShippingRateDeliveryEstimate = {
        ///The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
        Maximum: ShippingRateDeliveryEstimateBound option
        ///The lower bound of the estimated range. If empty, represents no lower bound.
        Minimum: ShippingRateDeliveryEstimateBound option
    }
    with
        static member New (maximum: ShippingRateDeliveryEstimateBound option, minimum: ShippingRateDeliveryEstimateBound option) =
            {
                ShippingRateDeliveryEstimate.Maximum = maximum //required
                ShippingRateDeliveryEstimate.Minimum = minimum //required
            }

    and ShippingRateDeliveryEstimateBound = {
        ///A unit of time.
        Unit: ShippingRateDeliveryEstimateBoundUnit
        ///Must be greater than 0.
        Value: int
    }
    with
        static member New (unit: ShippingRateDeliveryEstimateBoundUnit, value: int) =
            {
                ShippingRateDeliveryEstimateBound.Unit = unit //required
                ShippingRateDeliveryEstimateBound.Value = value //required
            }

    and ShippingRateDeliveryEstimateBoundUnit =
        | BusinessDay
        | Day
        | Hour
        | Month
        | Week

    and ShippingRateFixedAmount = {
        ///A non-negative integer in cents representing how much to charge.
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
        CurrencyOptions: Map<string, string list> option
    }
    with
        static member New (amount: int, currency: string, ?currencyOptions: Map<string, string list>) =
            {
                ShippingRateFixedAmount.Amount = amount //required
                ShippingRateFixedAmount.Currency = currency //required
                ShippingRateFixedAmount.CurrencyOptions = currencyOptions
            }

    and SigmaScheduledQueryRunError = {
        ///Information about the run failure.
        Message: string
    }
    with
        static member New (message: string) =
            {
                SigmaScheduledQueryRunError.Message = message //required
            }

    ///`Source` objects allow you to accept a variety of payment methods. They
    ///represent a customer's payment instrument, and can be used with the Stripe API
    ///just like a `Card` object: once chargeable, they can be charged, or can be
    ///attached to customers.
    ///Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
    ///We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
    ///This newer API provides access to our latest features and payment method types.
    ///Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
    and Source = {
        AchCreditTransfer: SourceTypeAchCreditTransfer option
        AchDebit: SourceTypeAchDebit option
        AcssDebit: SourceTypeAcssDebit option
        Alipay: SourceTypeAlipay option
        ///A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
        Amount: int option
        AuBecsDebit: SourceTypeAuBecsDebit option
        Bancontact: SourceTypeBancontact option
        Card: SourceTypeCard option
        CardPresent: SourceTypeCardPresent option
        ///The client secret of the source. Used for client-side retrieval using a publishable key.
        ClientSecret: string
        CodeVerification: SourceCodeVerificationFlow option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
        Currency: string option
        ///The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
        Customer: string option
        Eps: SourceTypeEps option
        ///The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
        Flow: string
        Giropay: SourceTypeGiropay option
        ///Unique identifier for the object.
        Id: string
        Ideal: SourceTypeIdeal option
        Klarna: SourceTypeKlarna option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        Multibanco: SourceTypeMultibanco option
        ///Information about the owner of the payment instrument that may be used or required by particular source types.
        Owner: SourceOwner option
        [<JsonField(Name="p24")>]P24: SourceTypeP24 option
        Receiver: SourceReceiverFlow option
        Redirect: SourceRedirectFlow option
        SepaCreditTransfer: SourceTypeSepaCreditTransfer option
        SepaDebit: SourceTypeSepaDebit option
        Sofort: SourceTypeSofort option
        SourceOrder: SourceOrder option
        ///Extra information about a source. This will appear on your customer's statement every time you charge the source.
        StatementDescriptor: string option
        ///The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
        Status: SourceStatus
        ThreeDSecure: SourceTypeThreeDSecure option
        ///The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
        Type: SourceType
        ///Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
        Usage: SourceUsage option
        Wechat: SourceTypeWechat option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "source"

        static member New (amount: int option, clientSecret: string, created: DateTime, currency: string option, flow: string, id: string, livemode: bool, metadata: Map<string, string> option, owner: SourceOwner option, statementDescriptor: string option, status: SourceStatus, ``type``: SourceType, usage: SourceUsage option, ?achCreditTransfer: SourceTypeAchCreditTransfer, ?achDebit: SourceTypeAchDebit, ?acssDebit: SourceTypeAcssDebit, ?alipay: SourceTypeAlipay, ?auBecsDebit: SourceTypeAuBecsDebit, ?bancontact: SourceTypeBancontact, ?card: SourceTypeCard, ?cardPresent: SourceTypeCardPresent, ?codeVerification: SourceCodeVerificationFlow, ?customer: string, ?eps: SourceTypeEps, ?giropay: SourceTypeGiropay, ?ideal: SourceTypeIdeal, ?klarna: SourceTypeKlarna, ?multibanco: SourceTypeMultibanco, ?p24: SourceTypeP24, ?receiver: SourceReceiverFlow, ?redirect: SourceRedirectFlow, ?sepaCreditTransfer: SourceTypeSepaCreditTransfer, ?sepaDebit: SourceTypeSepaDebit, ?sofort: SourceTypeSofort, ?sourceOrder: SourceOrder, ?threeDSecure: SourceTypeThreeDSecure, ?wechat: SourceTypeWechat) =
            {
                Source.Amount = amount //required
                Source.ClientSecret = clientSecret //required
                Source.Created = created //required
                Source.Currency = currency //required
                Source.Flow = flow //required
                Source.Id = id //required
                Source.Livemode = livemode //required
                Source.Metadata = metadata //required
                Source.Owner = owner //required
                Source.StatementDescriptor = statementDescriptor //required
                Source.Status = status //required
                Source.Type = ``type`` //required
                Source.Usage = usage //required
                Source.AchCreditTransfer = achCreditTransfer
                Source.AchDebit = achDebit
                Source.AcssDebit = acssDebit
                Source.Alipay = alipay
                Source.AuBecsDebit = auBecsDebit
                Source.Bancontact = bancontact
                Source.Card = card
                Source.CardPresent = cardPresent
                Source.CodeVerification = codeVerification
                Source.Customer = customer
                Source.Eps = eps
                Source.Giropay = giropay
                Source.Ideal = ideal
                Source.Klarna = klarna
                Source.Multibanco = multibanco
                Source.P24 = p24
                Source.Receiver = receiver
                Source.Redirect = redirect
                Source.SepaCreditTransfer = sepaCreditTransfer
                Source.SepaDebit = sepaDebit
                Source.Sofort = sofort
                Source.SourceOrder = sourceOrder
                Source.ThreeDSecure = threeDSecure
                Source.Wechat = wechat
            }

    and SourceStatus =
        | Canceled
        | Chargeable
        | Consumed
        | Failed
        | Pending

    and SourceType =
        | AchCreditTransfer
        | AchDebit
        | AcssDebit
        | Alipay
        | AuBecsDebit
        | Bancontact
        | Card
        | CardPresent
        | Eps
        | Giropay
        | Ideal
        | Klarna
        | Multibanco
        | P24
        | SepaCreditTransfer
        | SepaDebit
        | Sofort
        | ThreeDSecure
        | Wechat

    and SourceUsage =
        | Reusable
        | SingleUse

    and SourceCodeVerificationFlow = {
        ///The number of attempts remaining to authenticate the source object with a verification code.
        AttemptsRemaining: int
        ///The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
        Status: string
    }
    with
        static member New (attemptsRemaining: int, status: string) =
            {
                SourceCodeVerificationFlow.AttemptsRemaining = attemptsRemaining //required
                SourceCodeVerificationFlow.Status = status //required
            }

    ///Source mandate notifications should be created when a notification related to
    ///a source mandate must be sent to the payer. They will trigger a webhook or
    ///deliver an email to the customer.
    and SourceMandateNotification = {
        AcssDebit: SourceMandateNotificationAcssDebitData option
        ///A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.
        Amount: int option
        BacsDebit: SourceMandateNotificationBacsDebitData option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.
        Reason: SourceMandateNotificationReason
        SepaDebit: SourceMandateNotificationSepaDebitData option
        Source: Source
        ///The status of the mandate notification. Valid statuses are `pending` or `submitted`.
        Status: SourceMandateNotificationStatus
        ///The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.
        Type: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "source_mandate_notification"

        static member New (amount: int option, created: DateTime, id: string, livemode: bool, reason: SourceMandateNotificationReason, source: Source, status: SourceMandateNotificationStatus, ``type``: string, ?acssDebit: SourceMandateNotificationAcssDebitData, ?bacsDebit: SourceMandateNotificationBacsDebitData, ?sepaDebit: SourceMandateNotificationSepaDebitData) =
            {
                SourceMandateNotification.Amount = amount //required
                SourceMandateNotification.Created = created //required
                SourceMandateNotification.Id = id //required
                SourceMandateNotification.Livemode = livemode //required
                SourceMandateNotification.Reason = reason //required
                SourceMandateNotification.Source = source //required
                SourceMandateNotification.Status = status //required
                SourceMandateNotification.Type = ``type`` //required
                SourceMandateNotification.AcssDebit = acssDebit
                SourceMandateNotification.BacsDebit = bacsDebit
                SourceMandateNotification.SepaDebit = sepaDebit
            }

    and SourceMandateNotificationReason =
        | MandateConfirmed
        | DebitInitiated

    and SourceMandateNotificationStatus =
        | Pending
        | Submitted

    and SourceMandateNotificationAcssDebitData = {
        ///The statement descriptor associate with the debit.
        StatementDescriptor: string option
    }
    with
        static member New (?statementDescriptor: string) =
            {
                SourceMandateNotificationAcssDebitData.StatementDescriptor = statementDescriptor
            }

    and SourceMandateNotificationBacsDebitData = {
        ///Last 4 digits of the account number associated with the debit.
        [<JsonField(Name="last4")>]Last4: string option
    }
    with
        static member New (?last4: string) =
            {
                SourceMandateNotificationBacsDebitData.Last4 = last4
            }

    and SourceMandateNotificationSepaDebitData = {
        ///SEPA creditor ID.
        CreditorIdentifier: string option
        ///Last 4 digits of the account number associated with the debit.
        [<JsonField(Name="last4")>]Last4: string option
        ///Mandate reference associated with the debit.
        MandateReference: string option
    }
    with
        static member New (?creditorIdentifier: string, ?last4: string, ?mandateReference: string) =
            {
                SourceMandateNotificationSepaDebitData.CreditorIdentifier = creditorIdentifier
                SourceMandateNotificationSepaDebitData.Last4 = last4
                SourceMandateNotificationSepaDebitData.MandateReference = mandateReference
            }

    and SourceOrder = {
        ///A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
        Amount: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The email address of the customer placing the order.
        Email: string option
        ///List of items constituting the order.
        Items: SourceOrderItem list option
        Shipping: Shipping option
    }
    with
        static member New (amount: int, currency: string, items: SourceOrderItem list option, ?email: string, ?shipping: Shipping) =
            {
                SourceOrder.Amount = amount //required
                SourceOrder.Currency = currency //required
                SourceOrder.Items = items //required
                SourceOrder.Email = email
                SourceOrder.Shipping = shipping
            }

    and SourceOrderItem = {
        ///The amount (price) for this order item.
        Amount: int option
        ///This currency of this order item. Required when `amount` is present.
        Currency: string option
        ///Human-readable description for this order item.
        Description: string option
        ///The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
        Parent: string option
        ///The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
        Quantity: int option
        ///The type of this order item. Must be `sku`, `tax`, or `shipping`.
        Type: SourceOrderItemType option
    }
    with
        static member New (amount: int option, currency: string option, description: string option, parent: string option, ``type``: SourceOrderItemType option, ?quantity: int) =
            {
                SourceOrderItem.Amount = amount //required
                SourceOrderItem.Currency = currency //required
                SourceOrderItem.Description = description //required
                SourceOrderItem.Parent = parent //required
                SourceOrderItem.Type = ``type`` //required
                SourceOrderItem.Quantity = quantity
            }

    and SourceOrderItemType =
        | Sku
        | Tax
        | Shipping

    and SourceOwner = {
        ///Owner's address.
        Address: Address option
        ///Owner's email address.
        Email: string option
        ///Owner's full name.
        Name: string option
        ///Owner's phone number (including extension).
        Phone: string option
        ///Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedAddress: Address option
        ///Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedEmail: string option
        ///Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedName: string option
        ///Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        VerifiedPhone: string option
    }
    with
        static member New (address: Address option, email: string option, name: string option, phone: string option, verifiedAddress: Address option, verifiedEmail: string option, verifiedName: string option, verifiedPhone: string option) =
            {
                SourceOwner.Address = address //required
                SourceOwner.Email = email //required
                SourceOwner.Name = name //required
                SourceOwner.Phone = phone //required
                SourceOwner.VerifiedAddress = verifiedAddress //required
                SourceOwner.VerifiedEmail = verifiedEmail //required
                SourceOwner.VerifiedName = verifiedName //required
                SourceOwner.VerifiedPhone = verifiedPhone //required
            }

    and SourceReceiverFlow = {
        ///The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
        Address: string option
        ///The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
        AmountCharged: int
        ///The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
        AmountReceived: int
        ///The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
        AmountReturned: int
        ///Type of refund attribute method, one of `email`, `manual`, or `none`.
        RefundAttributesMethod: SourceReceiverFlowRefundAttributesMethod
        ///Type of refund attribute status, one of `missing`, `requested`, or `available`.
        RefundAttributesStatus: SourceReceiverFlowRefundAttributesStatus
    }
    with
        static member New (address: string option, amountCharged: int, amountReceived: int, amountReturned: int, refundAttributesMethod: SourceReceiverFlowRefundAttributesMethod, refundAttributesStatus: SourceReceiverFlowRefundAttributesStatus) =
            {
                SourceReceiverFlow.Address = address //required
                SourceReceiverFlow.AmountCharged = amountCharged //required
                SourceReceiverFlow.AmountReceived = amountReceived //required
                SourceReceiverFlow.AmountReturned = amountReturned //required
                SourceReceiverFlow.RefundAttributesMethod = refundAttributesMethod //required
                SourceReceiverFlow.RefundAttributesStatus = refundAttributesStatus //required
            }

    and SourceReceiverFlowRefundAttributesMethod =
        | Email
        | Manual
        | [<JsonUnionCase("none")>] None'

    and SourceReceiverFlowRefundAttributesStatus =
        | Missing
        | Requested
        | Available

    and SourceRedirectFlow = {
        ///The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
        FailureReason: string option
        ///The URL you provide to redirect the customer to after they authenticated their payment.
        ReturnUrl: string
        ///The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
        Status: string
        ///The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
        Url: string
    }
    with
        static member New (failureReason: string option, returnUrl: string, status: string, url: string) =
            {
                SourceRedirectFlow.FailureReason = failureReason //required
                SourceRedirectFlow.ReturnUrl = returnUrl //required
                SourceRedirectFlow.Status = status //required
                SourceRedirectFlow.Url = url //required
            }

    ///Some payment methods have no required amount that a customer must send.
    ///Customers can be instructed to send any amount, and it can be made up of
    ///multiple transactions. As such, sources can have multiple associated
    ///transactions.
    and SourceTransaction = {
        AchCreditTransfer: SourceTransactionAchCreditTransferData option
        ///A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
        Amount: int
        ChfCreditTransfer: SourceTransactionChfCreditTransferData option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        GbpCreditTransfer: SourceTransactionGbpCreditTransferData option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        PaperCheck: SourceTransactionPaperCheckData option
        SepaCreditTransfer: SourceTransactionSepaCreditTransferData option
        ///The ID of the source this transaction is attached to.
        Source: string
        ///The status of the transaction, one of `succeeded`, `pending`, or `failed`.
        Status: SourceTransactionStatus
        ///The type of source this transaction is attached to.
        Type: SourceTransactionType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "source_transaction"

        static member New (amount: int, created: DateTime, currency: string, id: string, livemode: bool, source: string, status: SourceTransactionStatus, ``type``: SourceTransactionType, ?achCreditTransfer: SourceTransactionAchCreditTransferData, ?chfCreditTransfer: SourceTransactionChfCreditTransferData, ?gbpCreditTransfer: SourceTransactionGbpCreditTransferData, ?paperCheck: SourceTransactionPaperCheckData, ?sepaCreditTransfer: SourceTransactionSepaCreditTransferData) =
            {
                SourceTransaction.Amount = amount //required
                SourceTransaction.Created = created //required
                SourceTransaction.Currency = currency //required
                SourceTransaction.Id = id //required
                SourceTransaction.Livemode = livemode //required
                SourceTransaction.Source = source //required
                SourceTransaction.Status = status //required
                SourceTransaction.Type = ``type`` //required
                SourceTransaction.AchCreditTransfer = achCreditTransfer
                SourceTransaction.ChfCreditTransfer = chfCreditTransfer
                SourceTransaction.GbpCreditTransfer = gbpCreditTransfer
                SourceTransaction.PaperCheck = paperCheck
                SourceTransaction.SepaCreditTransfer = sepaCreditTransfer
            }

    and SourceTransactionStatus =
        | Succeeded
        | Pending
        | Failed

    and SourceTransactionType =
        | AchCreditTransfer
        | AchDebit
        | Alipay
        | Bancontact
        | Card
        | CardPresent
        | Eps
        | Giropay
        | Ideal
        | Klarna
        | Multibanco
        | P24
        | SepaDebit
        | Sofort
        | ThreeDSecure
        | Wechat

    and SourceTransactionAchCreditTransferData = {
        ///Customer data associated with the transfer.
        CustomerData: string option
        ///Bank account fingerprint associated with the transfer.
        Fingerprint: string option
        ///Last 4 digits of the account number associated with the transfer.
        [<JsonField(Name="last4")>]Last4: string option
        ///Routing number associated with the transfer.
        RoutingNumber: string option
    }
    with
        static member New (?customerData: string, ?fingerprint: string, ?last4: string, ?routingNumber: string) =
            {
                SourceTransactionAchCreditTransferData.CustomerData = customerData
                SourceTransactionAchCreditTransferData.Fingerprint = fingerprint
                SourceTransactionAchCreditTransferData.Last4 = last4
                SourceTransactionAchCreditTransferData.RoutingNumber = routingNumber
            }

    and SourceTransactionChfCreditTransferData = {
        ///Reference associated with the transfer.
        Reference: string option
        ///Sender's country address.
        SenderAddressCountry: string option
        ///Sender's line 1 address.
        [<JsonField(Name="sender_address_line1")>]SenderAddressLine1: string option
        ///Sender's bank account IBAN.
        SenderIban: string option
        ///Sender's name.
        SenderName: string option
    }
    with
        static member New (?reference: string, ?senderAddressCountry: string, ?senderAddressLine1: string, ?senderIban: string, ?senderName: string) =
            {
                SourceTransactionChfCreditTransferData.Reference = reference
                SourceTransactionChfCreditTransferData.SenderAddressCountry = senderAddressCountry
                SourceTransactionChfCreditTransferData.SenderAddressLine1 = senderAddressLine1
                SourceTransactionChfCreditTransferData.SenderIban = senderIban
                SourceTransactionChfCreditTransferData.SenderName = senderName
            }

    and SourceTransactionGbpCreditTransferData = {
        ///Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
        Fingerprint: string option
        ///The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
        FundingMethod: string option
        ///Last 4 digits of sender account number associated with the transfer.
        [<JsonField(Name="last4")>]Last4: string option
        ///Sender entered arbitrary information about the transfer.
        Reference: string option
        ///Sender account number associated with the transfer.
        SenderAccountNumber: string option
        ///Sender name associated with the transfer.
        SenderName: string option
        ///Sender sort code associated with the transfer.
        SenderSortCode: string option
    }
    with
        static member New (?fingerprint: string, ?fundingMethod: string, ?last4: string, ?reference: string, ?senderAccountNumber: string, ?senderName: string, ?senderSortCode: string) =
            {
                SourceTransactionGbpCreditTransferData.Fingerprint = fingerprint
                SourceTransactionGbpCreditTransferData.FundingMethod = fundingMethod
                SourceTransactionGbpCreditTransferData.Last4 = last4
                SourceTransactionGbpCreditTransferData.Reference = reference
                SourceTransactionGbpCreditTransferData.SenderAccountNumber = senderAccountNumber
                SourceTransactionGbpCreditTransferData.SenderName = senderName
                SourceTransactionGbpCreditTransferData.SenderSortCode = senderSortCode
            }

    and SourceTransactionPaperCheckData = {
        ///Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
        AvailableAt: string option
        ///Comma-separated list of invoice IDs associated with the paper check.
        Invoices: string option
    }
    with
        static member New (?availableAt: string, ?invoices: string) =
            {
                SourceTransactionPaperCheckData.AvailableAt = availableAt
                SourceTransactionPaperCheckData.Invoices = invoices
            }

    and SourceTransactionSepaCreditTransferData = {
        ///Reference associated with the transfer.
        Reference: string option
        ///Sender's bank account IBAN.
        SenderIban: string option
        ///Sender's name.
        SenderName: string option
    }
    with
        static member New (?reference: string, ?senderIban: string, ?senderName: string) =
            {
                SourceTransactionSepaCreditTransferData.Reference = reference
                SourceTransactionSepaCreditTransferData.SenderIban = senderIban
                SourceTransactionSepaCreditTransferData.SenderName = senderName
            }

    and SourceTypeAchCreditTransfer = {
        AccountNumber: string option
        BankName: string option
        Fingerprint: string option
        RefundAccountHolderName: string option
        RefundAccountHolderType: string option
        RefundRoutingNumber: string option
        RoutingNumber: string option
        SwiftCode: string option
    }
    with
        static member New (?accountNumber: string option, ?bankName: string option, ?fingerprint: string option, ?refundAccountHolderName: string option, ?refundAccountHolderType: string option, ?refundRoutingNumber: string option, ?routingNumber: string option, ?swiftCode: string option) =
            {
                SourceTypeAchCreditTransfer.AccountNumber = accountNumber |> Option.flatten
                SourceTypeAchCreditTransfer.BankName = bankName |> Option.flatten
                SourceTypeAchCreditTransfer.Fingerprint = fingerprint |> Option.flatten
                SourceTypeAchCreditTransfer.RefundAccountHolderName = refundAccountHolderName |> Option.flatten
                SourceTypeAchCreditTransfer.RefundAccountHolderType = refundAccountHolderType |> Option.flatten
                SourceTypeAchCreditTransfer.RefundRoutingNumber = refundRoutingNumber |> Option.flatten
                SourceTypeAchCreditTransfer.RoutingNumber = routingNumber |> Option.flatten
                SourceTypeAchCreditTransfer.SwiftCode = swiftCode |> Option.flatten
            }

    and SourceTypeAchDebit = {
        BankName: string option
        Country: string option
        Fingerprint: string option
        [<JsonField(Name="last4")>]Last4: string option
        RoutingNumber: string option
        Type: string option
    }
    with
        static member New (?bankName: string option, ?country: string option, ?fingerprint: string option, ?last4: string option, ?routingNumber: string option, ?``type``: string option) =
            {
                SourceTypeAchDebit.BankName = bankName |> Option.flatten
                SourceTypeAchDebit.Country = country |> Option.flatten
                SourceTypeAchDebit.Fingerprint = fingerprint |> Option.flatten
                SourceTypeAchDebit.Last4 = last4 |> Option.flatten
                SourceTypeAchDebit.RoutingNumber = routingNumber |> Option.flatten
                SourceTypeAchDebit.Type = ``type`` |> Option.flatten
            }

    and SourceTypeAcssDebit = {
        BankAddressCity: string option
        BankAddressLine1: string option
        BankAddressLine2: string option
        BankAddressPostalCode: string option
        BankName: string option
        Category: string option
        Country: string option
        Fingerprint: string option
        [<JsonField(Name="last4")>]Last4: string option
        RoutingNumber: string option
    }
    with
        static member New (?bankAddressCity: string option, ?bankAddressLine1: string option, ?bankAddressLine2: string option, ?bankAddressPostalCode: string option, ?bankName: string option, ?category: string option, ?country: string option, ?fingerprint: string option, ?last4: string option, ?routingNumber: string option) =
            {
                SourceTypeAcssDebit.BankAddressCity = bankAddressCity |> Option.flatten
                SourceTypeAcssDebit.BankAddressLine1 = bankAddressLine1 |> Option.flatten
                SourceTypeAcssDebit.BankAddressLine2 = bankAddressLine2 |> Option.flatten
                SourceTypeAcssDebit.BankAddressPostalCode = bankAddressPostalCode |> Option.flatten
                SourceTypeAcssDebit.BankName = bankName |> Option.flatten
                SourceTypeAcssDebit.Category = category |> Option.flatten
                SourceTypeAcssDebit.Country = country |> Option.flatten
                SourceTypeAcssDebit.Fingerprint = fingerprint |> Option.flatten
                SourceTypeAcssDebit.Last4 = last4 |> Option.flatten
                SourceTypeAcssDebit.RoutingNumber = routingNumber |> Option.flatten
            }

    and SourceTypeAlipay = {
        DataString: string option
        NativeUrl: string option
        StatementDescriptor: string option
    }
    with
        static member New (?dataString: string option, ?nativeUrl: string option, ?statementDescriptor: string option) =
            {
                SourceTypeAlipay.DataString = dataString |> Option.flatten
                SourceTypeAlipay.NativeUrl = nativeUrl |> Option.flatten
                SourceTypeAlipay.StatementDescriptor = statementDescriptor |> Option.flatten
            }

    and SourceTypeAuBecsDebit = {
        BsbNumber: string option
        Fingerprint: string option
        [<JsonField(Name="last4")>]Last4: string option
    }
    with
        static member New (?bsbNumber: string option, ?fingerprint: string option, ?last4: string option) =
            {
                SourceTypeAuBecsDebit.BsbNumber = bsbNumber |> Option.flatten
                SourceTypeAuBecsDebit.Fingerprint = fingerprint |> Option.flatten
                SourceTypeAuBecsDebit.Last4 = last4 |> Option.flatten
            }

    and SourceTypeBancontact = {
        BankCode: string option
        BankName: string option
        Bic: string option
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        PreferredLanguage: string option
        StatementDescriptor: string option
    }
    with
        static member New (?bankCode: string option, ?bankName: string option, ?bic: string option, ?ibanLast4: string option, ?preferredLanguage: string option, ?statementDescriptor: string option) =
            {
                SourceTypeBancontact.BankCode = bankCode |> Option.flatten
                SourceTypeBancontact.BankName = bankName |> Option.flatten
                SourceTypeBancontact.Bic = bic |> Option.flatten
                SourceTypeBancontact.IbanLast4 = ibanLast4 |> Option.flatten
                SourceTypeBancontact.PreferredLanguage = preferredLanguage |> Option.flatten
                SourceTypeBancontact.StatementDescriptor = statementDescriptor |> Option.flatten
            }

    and SourceTypeCard = {
        [<JsonField(Name="address_line1_check")>]AddressLine1Check: string option
        AddressZipCheck: string option
        Brand: string option
        Country: string option
        CvcCheck: string option
        Description: string option
        [<JsonField(Name="dynamic_last4")>]DynamicLast4: string option
        ExpMonth: int option
        ExpYear: int option
        Fingerprint: string option
        Funding: string option
        Iin: string option
        Issuer: string option
        [<JsonField(Name="last4")>]Last4: string option
        Name: string option
        ThreeDSecure: string option
        TokenizationMethod: string option
    }
    with
        static member New (?addressLine1Check: string option, ?addressZipCheck: string option, ?brand: string option, ?country: string option, ?cvcCheck: string option, ?description: string, ?dynamicLast4: string option, ?expMonth: int option, ?expYear: int option, ?fingerprint: string, ?funding: string option, ?iin: string, ?issuer: string, ?last4: string option, ?name: string option, ?threeDSecure: string, ?tokenizationMethod: string option) =
            {
                SourceTypeCard.AddressLine1Check = addressLine1Check |> Option.flatten
                SourceTypeCard.AddressZipCheck = addressZipCheck |> Option.flatten
                SourceTypeCard.Brand = brand |> Option.flatten
                SourceTypeCard.Country = country |> Option.flatten
                SourceTypeCard.CvcCheck = cvcCheck |> Option.flatten
                SourceTypeCard.Description = description
                SourceTypeCard.DynamicLast4 = dynamicLast4 |> Option.flatten
                SourceTypeCard.ExpMonth = expMonth |> Option.flatten
                SourceTypeCard.ExpYear = expYear |> Option.flatten
                SourceTypeCard.Fingerprint = fingerprint
                SourceTypeCard.Funding = funding |> Option.flatten
                SourceTypeCard.Iin = iin
                SourceTypeCard.Issuer = issuer
                SourceTypeCard.Last4 = last4 |> Option.flatten
                SourceTypeCard.Name = name |> Option.flatten
                SourceTypeCard.ThreeDSecure = threeDSecure
                SourceTypeCard.TokenizationMethod = tokenizationMethod |> Option.flatten
            }

    and SourceTypeCardPresent = {
        ApplicationCryptogram: string option
        ApplicationPreferredName: string option
        AuthorizationCode: string option
        AuthorizationResponseCode: string option
        Brand: string option
        Country: string option
        CvmType: string option
        DataType: string option
        DedicatedFileName: string option
        Description: string option
        EmvAuthData: string option
        EvidenceCustomerSignature: string option
        EvidenceTransactionCertificate: string option
        ExpMonth: int option
        ExpYear: int option
        Fingerprint: string option
        Funding: string option
        Iin: string option
        Issuer: string option
        [<JsonField(Name="last4")>]Last4: string option
        PosDeviceId: string option
        PosEntryMode: string option
        ReadMethod: string option
        Reader: string option
        TerminalVerificationResults: string option
        TransactionStatusInformation: string option
    }
    with
        static member New (?applicationCryptogram: string, ?applicationPreferredName: string, ?authorizationCode: string option, ?authorizationResponseCode: string, ?brand: string option, ?country: string option, ?cvmType: string, ?dataType: string option, ?dedicatedFileName: string, ?description: string, ?emvAuthData: string, ?evidenceCustomerSignature: string option, ?evidenceTransactionCertificate: string option, ?expMonth: int option, ?expYear: int option, ?fingerprint: string, ?funding: string option, ?iin: string, ?issuer: string, ?last4: string option, ?posDeviceId: string option, ?posEntryMode: string, ?readMethod: string option, ?reader: string option, ?terminalVerificationResults: string, ?transactionStatusInformation: string) =
            {
                SourceTypeCardPresent.ApplicationCryptogram = applicationCryptogram
                SourceTypeCardPresent.ApplicationPreferredName = applicationPreferredName
                SourceTypeCardPresent.AuthorizationCode = authorizationCode |> Option.flatten
                SourceTypeCardPresent.AuthorizationResponseCode = authorizationResponseCode
                SourceTypeCardPresent.Brand = brand |> Option.flatten
                SourceTypeCardPresent.Country = country |> Option.flatten
                SourceTypeCardPresent.CvmType = cvmType
                SourceTypeCardPresent.DataType = dataType |> Option.flatten
                SourceTypeCardPresent.DedicatedFileName = dedicatedFileName
                SourceTypeCardPresent.Description = description
                SourceTypeCardPresent.EmvAuthData = emvAuthData
                SourceTypeCardPresent.EvidenceCustomerSignature = evidenceCustomerSignature |> Option.flatten
                SourceTypeCardPresent.EvidenceTransactionCertificate = evidenceTransactionCertificate |> Option.flatten
                SourceTypeCardPresent.ExpMonth = expMonth |> Option.flatten
                SourceTypeCardPresent.ExpYear = expYear |> Option.flatten
                SourceTypeCardPresent.Fingerprint = fingerprint
                SourceTypeCardPresent.Funding = funding |> Option.flatten
                SourceTypeCardPresent.Iin = iin
                SourceTypeCardPresent.Issuer = issuer
                SourceTypeCardPresent.Last4 = last4 |> Option.flatten
                SourceTypeCardPresent.PosDeviceId = posDeviceId |> Option.flatten
                SourceTypeCardPresent.PosEntryMode = posEntryMode
                SourceTypeCardPresent.ReadMethod = readMethod |> Option.flatten
                SourceTypeCardPresent.Reader = reader |> Option.flatten
                SourceTypeCardPresent.TerminalVerificationResults = terminalVerificationResults
                SourceTypeCardPresent.TransactionStatusInformation = transactionStatusInformation
            }

    and SourceTypeEps = {
        Reference: string option
        StatementDescriptor: string option
    }
    with
        static member New (?reference: string option, ?statementDescriptor: string option) =
            {
                SourceTypeEps.Reference = reference |> Option.flatten
                SourceTypeEps.StatementDescriptor = statementDescriptor |> Option.flatten
            }

    and SourceTypeGiropay = {
        BankCode: string option
        BankName: string option
        Bic: string option
        StatementDescriptor: string option
    }
    with
        static member New (?bankCode: string option, ?bankName: string option, ?bic: string option, ?statementDescriptor: string option) =
            {
                SourceTypeGiropay.BankCode = bankCode |> Option.flatten
                SourceTypeGiropay.BankName = bankName |> Option.flatten
                SourceTypeGiropay.Bic = bic |> Option.flatten
                SourceTypeGiropay.StatementDescriptor = statementDescriptor |> Option.flatten
            }

    and SourceTypeIdeal = {
        Bank: string option
        Bic: string option
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        StatementDescriptor: string option
    }
    with
        static member New (?bank: string option, ?bic: string option, ?ibanLast4: string option, ?statementDescriptor: string option) =
            {
                SourceTypeIdeal.Bank = bank |> Option.flatten
                SourceTypeIdeal.Bic = bic |> Option.flatten
                SourceTypeIdeal.IbanLast4 = ibanLast4 |> Option.flatten
                SourceTypeIdeal.StatementDescriptor = statementDescriptor |> Option.flatten
            }

    and SourceTypeKlarna = {
        BackgroundImageUrl: string option
        ClientToken: string option
        FirstName: string option
        LastName: string option
        Locale: string option
        LogoUrl: string option
        PageTitle: string option
        PayLaterAssetUrlsDescriptive: string option
        PayLaterAssetUrlsStandard: string option
        PayLaterName: string option
        PayLaterRedirectUrl: string option
        PayNowAssetUrlsDescriptive: string option
        PayNowAssetUrlsStandard: string option
        PayNowName: string option
        PayNowRedirectUrl: string option
        PayOverTimeAssetUrlsDescriptive: string option
        PayOverTimeAssetUrlsStandard: string option
        PayOverTimeName: string option
        PayOverTimeRedirectUrl: string option
        PaymentMethodCategories: string option
        PurchaseCountry: string option
        PurchaseType: string option
        RedirectUrl: string option
        ShippingDelay: int option
        ShippingFirstName: string option
        ShippingLastName: string option
    }
    with
        static member New (?backgroundImageUrl: string, ?clientToken: string option, ?firstName: string, ?lastName: string, ?locale: string, ?logoUrl: string, ?pageTitle: string, ?payLaterAssetUrlsDescriptive: string, ?payLaterAssetUrlsStandard: string, ?payLaterName: string, ?payLaterRedirectUrl: string, ?payNowAssetUrlsDescriptive: string, ?payNowAssetUrlsStandard: string, ?payNowName: string, ?payNowRedirectUrl: string, ?payOverTimeAssetUrlsDescriptive: string, ?payOverTimeAssetUrlsStandard: string, ?payOverTimeName: string, ?payOverTimeRedirectUrl: string, ?paymentMethodCategories: string, ?purchaseCountry: string, ?purchaseType: string, ?redirectUrl: string, ?shippingDelay: int, ?shippingFirstName: string, ?shippingLastName: string) =
            {
                SourceTypeKlarna.BackgroundImageUrl = backgroundImageUrl
                SourceTypeKlarna.ClientToken = clientToken |> Option.flatten
                SourceTypeKlarna.FirstName = firstName
                SourceTypeKlarna.LastName = lastName
                SourceTypeKlarna.Locale = locale
                SourceTypeKlarna.LogoUrl = logoUrl
                SourceTypeKlarna.PageTitle = pageTitle
                SourceTypeKlarna.PayLaterAssetUrlsDescriptive = payLaterAssetUrlsDescriptive
                SourceTypeKlarna.PayLaterAssetUrlsStandard = payLaterAssetUrlsStandard
                SourceTypeKlarna.PayLaterName = payLaterName
                SourceTypeKlarna.PayLaterRedirectUrl = payLaterRedirectUrl
                SourceTypeKlarna.PayNowAssetUrlsDescriptive = payNowAssetUrlsDescriptive
                SourceTypeKlarna.PayNowAssetUrlsStandard = payNowAssetUrlsStandard
                SourceTypeKlarna.PayNowName = payNowName
                SourceTypeKlarna.PayNowRedirectUrl = payNowRedirectUrl
                SourceTypeKlarna.PayOverTimeAssetUrlsDescriptive = payOverTimeAssetUrlsDescriptive
                SourceTypeKlarna.PayOverTimeAssetUrlsStandard = payOverTimeAssetUrlsStandard
                SourceTypeKlarna.PayOverTimeName = payOverTimeName
                SourceTypeKlarna.PayOverTimeRedirectUrl = payOverTimeRedirectUrl
                SourceTypeKlarna.PaymentMethodCategories = paymentMethodCategories
                SourceTypeKlarna.PurchaseCountry = purchaseCountry
                SourceTypeKlarna.PurchaseType = purchaseType
                SourceTypeKlarna.RedirectUrl = redirectUrl
                SourceTypeKlarna.ShippingDelay = shippingDelay
                SourceTypeKlarna.ShippingFirstName = shippingFirstName
                SourceTypeKlarna.ShippingLastName = shippingLastName
            }

    and SourceTypeMultibanco = {
        Entity: string option
        Reference: string option
        RefundAccountHolderAddressCity: string option
        RefundAccountHolderAddressCountry: string option
        [<JsonField(Name="refund_account_holder_address_line1")>]RefundAccountHolderAddressLine1: string option
        [<JsonField(Name="refund_account_holder_address_line2")>]RefundAccountHolderAddressLine2: string option
        RefundAccountHolderAddressPostalCode: string option
        RefundAccountHolderAddressState: string option
        RefundAccountHolderName: string option
        RefundIban: string option
    }
    with
        static member New (?entity: string option, ?reference: string option, ?refundAccountHolderAddressCity: string option, ?refundAccountHolderAddressCountry: string option, ?refundAccountHolderAddressLine1: string option, ?refundAccountHolderAddressLine2: string option, ?refundAccountHolderAddressPostalCode: string option, ?refundAccountHolderAddressState: string option, ?refundAccountHolderName: string option, ?refundIban: string option) =
            {
                SourceTypeMultibanco.Entity = entity |> Option.flatten
                SourceTypeMultibanco.Reference = reference |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderAddressCity = refundAccountHolderAddressCity |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderAddressCountry = refundAccountHolderAddressCountry |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderAddressLine1 = refundAccountHolderAddressLine1 |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderAddressLine2 = refundAccountHolderAddressLine2 |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderAddressPostalCode = refundAccountHolderAddressPostalCode |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderAddressState = refundAccountHolderAddressState |> Option.flatten
                SourceTypeMultibanco.RefundAccountHolderName = refundAccountHolderName |> Option.flatten
                SourceTypeMultibanco.RefundIban = refundIban |> Option.flatten
            }

    and SourceTypeP24 = {
        Reference: string option
    }
    with
        static member New (?reference: string option) =
            {
                SourceTypeP24.Reference = reference |> Option.flatten
            }

    and SourceTypeSepaCreditTransfer = {
        BankName: string option
        Bic: string option
        Iban: string option
        RefundAccountHolderAddressCity: string option
        RefundAccountHolderAddressCountry: string option
        [<JsonField(Name="refund_account_holder_address_line1")>]RefundAccountHolderAddressLine1: string option
        [<JsonField(Name="refund_account_holder_address_line2")>]RefundAccountHolderAddressLine2: string option
        RefundAccountHolderAddressPostalCode: string option
        RefundAccountHolderAddressState: string option
        RefundAccountHolderName: string option
        RefundIban: string option
    }
    with
        static member New (?bankName: string option, ?bic: string option, ?iban: string option, ?refundAccountHolderAddressCity: string option, ?refundAccountHolderAddressCountry: string option, ?refundAccountHolderAddressLine1: string option, ?refundAccountHolderAddressLine2: string option, ?refundAccountHolderAddressPostalCode: string option, ?refundAccountHolderAddressState: string option, ?refundAccountHolderName: string option, ?refundIban: string option) =
            {
                SourceTypeSepaCreditTransfer.BankName = bankName |> Option.flatten
                SourceTypeSepaCreditTransfer.Bic = bic |> Option.flatten
                SourceTypeSepaCreditTransfer.Iban = iban |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderAddressCity = refundAccountHolderAddressCity |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderAddressCountry = refundAccountHolderAddressCountry |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderAddressLine1 = refundAccountHolderAddressLine1 |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderAddressLine2 = refundAccountHolderAddressLine2 |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderAddressPostalCode = refundAccountHolderAddressPostalCode |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderAddressState = refundAccountHolderAddressState |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundAccountHolderName = refundAccountHolderName |> Option.flatten
                SourceTypeSepaCreditTransfer.RefundIban = refundIban |> Option.flatten
            }

    and SourceTypeSepaDebit = {
        BankCode: string option
        BranchCode: string option
        Country: string option
        Fingerprint: string option
        [<JsonField(Name="last4")>]Last4: string option
        MandateReference: string option
        MandateUrl: string option
    }
    with
        static member New (?bankCode: string option, ?branchCode: string option, ?country: string option, ?fingerprint: string option, ?last4: string option, ?mandateReference: string option, ?mandateUrl: string option) =
            {
                SourceTypeSepaDebit.BankCode = bankCode |> Option.flatten
                SourceTypeSepaDebit.BranchCode = branchCode |> Option.flatten
                SourceTypeSepaDebit.Country = country |> Option.flatten
                SourceTypeSepaDebit.Fingerprint = fingerprint |> Option.flatten
                SourceTypeSepaDebit.Last4 = last4 |> Option.flatten
                SourceTypeSepaDebit.MandateReference = mandateReference |> Option.flatten
                SourceTypeSepaDebit.MandateUrl = mandateUrl |> Option.flatten
            }

    and SourceTypeSofort = {
        BankCode: string option
        BankName: string option
        Bic: string option
        Country: string option
        [<JsonField(Name="iban_last4")>]IbanLast4: string option
        PreferredLanguage: string option
        StatementDescriptor: string option
    }
    with
        static member New (?bankCode: string option, ?bankName: string option, ?bic: string option, ?country: string option, ?ibanLast4: string option, ?preferredLanguage: string option, ?statementDescriptor: string option) =
            {
                SourceTypeSofort.BankCode = bankCode |> Option.flatten
                SourceTypeSofort.BankName = bankName |> Option.flatten
                SourceTypeSofort.Bic = bic |> Option.flatten
                SourceTypeSofort.Country = country |> Option.flatten
                SourceTypeSofort.IbanLast4 = ibanLast4 |> Option.flatten
                SourceTypeSofort.PreferredLanguage = preferredLanguage |> Option.flatten
                SourceTypeSofort.StatementDescriptor = statementDescriptor |> Option.flatten
            }

    and SourceTypeThreeDSecure = {
        [<JsonField(Name="address_line1_check")>]AddressLine1Check: string option
        AddressZipCheck: string option
        Authenticated: bool option
        Brand: string option
        Card: string option
        Country: string option
        Customer: string option
        CvcCheck: string option
        Description: string option
        [<JsonField(Name="dynamic_last4")>]DynamicLast4: string option
        ExpMonth: int option
        ExpYear: int option
        Fingerprint: string option
        Funding: string option
        Iin: string option
        Issuer: string option
        [<JsonField(Name="last4")>]Last4: string option
        Name: string option
        ThreeDSecure: string option
        TokenizationMethod: string option
    }
    with
        static member New (?addressLine1Check: string option, ?addressZipCheck: string option, ?authenticated: bool option, ?brand: string option, ?card: string option, ?country: string option, ?customer: string option, ?cvcCheck: string option, ?description: string, ?dynamicLast4: string option, ?expMonth: int option, ?expYear: int option, ?fingerprint: string, ?funding: string option, ?iin: string, ?issuer: string, ?last4: string option, ?name: string option, ?threeDSecure: string, ?tokenizationMethod: string option) =
            {
                SourceTypeThreeDSecure.AddressLine1Check = addressLine1Check |> Option.flatten
                SourceTypeThreeDSecure.AddressZipCheck = addressZipCheck |> Option.flatten
                SourceTypeThreeDSecure.Authenticated = authenticated |> Option.flatten
                SourceTypeThreeDSecure.Brand = brand |> Option.flatten
                SourceTypeThreeDSecure.Card = card |> Option.flatten
                SourceTypeThreeDSecure.Country = country |> Option.flatten
                SourceTypeThreeDSecure.Customer = customer |> Option.flatten
                SourceTypeThreeDSecure.CvcCheck = cvcCheck |> Option.flatten
                SourceTypeThreeDSecure.Description = description
                SourceTypeThreeDSecure.DynamicLast4 = dynamicLast4 |> Option.flatten
                SourceTypeThreeDSecure.ExpMonth = expMonth |> Option.flatten
                SourceTypeThreeDSecure.ExpYear = expYear |> Option.flatten
                SourceTypeThreeDSecure.Fingerprint = fingerprint
                SourceTypeThreeDSecure.Funding = funding |> Option.flatten
                SourceTypeThreeDSecure.Iin = iin
                SourceTypeThreeDSecure.Issuer = issuer
                SourceTypeThreeDSecure.Last4 = last4 |> Option.flatten
                SourceTypeThreeDSecure.Name = name |> Option.flatten
                SourceTypeThreeDSecure.ThreeDSecure = threeDSecure
                SourceTypeThreeDSecure.TokenizationMethod = tokenizationMethod |> Option.flatten
            }

    and SourceTypeWechat = {
        PrepayId: string option
        QrCodeUrl: string option
        StatementDescriptor: string option
    }
    with
        static member New (?prepayId: string, ?qrCodeUrl: string option, ?statementDescriptor: string) =
            {
                SourceTypeWechat.PrepayId = prepayId
                SourceTypeWechat.QrCodeUrl = qrCodeUrl |> Option.flatten
                SourceTypeWechat.StatementDescriptor = statementDescriptor
            }

    ///Subscriptions allow you to charge a customer on a recurring basis.
    ///Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
    and Subscription = {
        ///ID of the Connect Application that created the subscription.
        Application: SubscriptionApplication'AnyOf option
        ///A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
        ApplicationFeePercent: decimal option
        AutomaticTax: SubscriptionAutomaticTax
        ///Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]BillingCycleAnchor: DateTime
        ///Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
        BillingThresholds: SubscriptionBillingThresholds option
        ///A date in the future at which the subscription will automatically get canceled
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CancelAt: DateTime option
        ///If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
        CancelAtPeriodEnd: bool
        ///If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Details about why this subscription was cancelled
        CancellationDetails: CancellationDetails option
        ///Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
        CollectionMethod: SubscriptionCollectionMethod
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CurrentPeriodEnd: DateTime
        ///Start of the current period that the subscription has been invoiced for.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CurrentPeriodStart: DateTime
        ///ID of the customer who owns the subscription.
        Customer: SubscriptionCustomer'AnyOf
        ///Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
        DaysUntilDue: int option
        ///ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
        DefaultPaymentMethod: SubscriptionDefaultPaymentMethod'AnyOf option
        ///ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
        DefaultSource: SubscriptionDefaultSource'AnyOf option
        ///The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
        DefaultTaxRates: TaxRate list option
        ///The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.
        Description: string option
        ///Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
        Discount: Discount option
        ///If the subscription has ended, the date the subscription ended.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EndedAt: DateTime option
        ///Unique identifier for the object.
        Id: string
        ///List of subscription items, each with an attached price.
        Items: SubscriptionItems
        ///The most recent invoice this subscription has generated.
        LatestInvoice: SubscriptionLatestInvoice'AnyOf option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]NextPendingInvoiceItemInvoice: DateTime option
        ///The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details.
        OnBehalfOf: SubscriptionOnBehalfOf'AnyOf option
        ///If specified, payment collection for this subscription will be paused.
        PauseCollection: SubscriptionsResourcePauseCollection option
        ///Payment settings passed on to invoices created by the subscription.
        PaymentSettings: SubscriptionsResourcePaymentSettings option
        ///Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
        PendingInvoiceItemInterval: SubscriptionPendingInvoiceItemInterval option
        ///You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
        PendingSetupIntent: SubscriptionPendingSetupIntent'AnyOf option
        ///If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
        PendingUpdate: SubscriptionsResourcePendingUpdate option
        ///The schedule attached to the subscription
        Schedule: SubscriptionSchedule'AnyOf option
        ///Date when the subscription was first created. The date might differ from the `created` date due to backdating.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]StartDate: DateTime
        ///Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
        ///For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
        ///A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
        ///If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings). 
        ///If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
        Status: SubscriptionStatus
        ///ID of the test clock this subscription belongs to.
        TestClock: SubscriptionTestClock'AnyOf option
        ///The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
        TransferData: SubscriptionTransferData option
        ///If the subscription has a trial, the end of that trial.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]TrialEnd: DateTime option
        ///Settings related to subscription trials.
        TrialSettings: SubscriptionsTrialsResourceTrialSettings option
        ///If the subscription has a trial, the beginning of that trial.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]TrialStart: DateTime option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "subscription"

        static member New (application: SubscriptionApplication'AnyOf option, applicationFeePercent: decimal option, automaticTax: SubscriptionAutomaticTax, billingCycleAnchor: DateTime, billingThresholds: SubscriptionBillingThresholds option, cancelAt: DateTime option, cancelAtPeriodEnd: bool, canceledAt: DateTime option, cancellationDetails: CancellationDetails option, collectionMethod: SubscriptionCollectionMethod, created: DateTime, currency: string, currentPeriodEnd: DateTime, currentPeriodStart: DateTime, customer: SubscriptionCustomer'AnyOf, daysUntilDue: int option, defaultPaymentMethod: SubscriptionDefaultPaymentMethod'AnyOf option, defaultSource: SubscriptionDefaultSource'AnyOf option, description: string option, discount: Discount option, endedAt: DateTime option, id: string, items: SubscriptionItems, latestInvoice: SubscriptionLatestInvoice'AnyOf option, livemode: bool, metadata: Map<string, string>, nextPendingInvoiceItemInvoice: DateTime option, onBehalfOf: SubscriptionOnBehalfOf'AnyOf option, pauseCollection: SubscriptionsResourcePauseCollection option, paymentSettings: SubscriptionsResourcePaymentSettings option, pendingInvoiceItemInterval: SubscriptionPendingInvoiceItemInterval option, pendingSetupIntent: SubscriptionPendingSetupIntent'AnyOf option, pendingUpdate: SubscriptionsResourcePendingUpdate option, schedule: SubscriptionSchedule'AnyOf option, startDate: DateTime, status: SubscriptionStatus, testClock: SubscriptionTestClock'AnyOf option, transferData: SubscriptionTransferData option, trialEnd: DateTime option, trialSettings: SubscriptionsTrialsResourceTrialSettings option, trialStart: DateTime option, ?defaultTaxRates: TaxRate list option) =
            {
                Subscription.Application = application //required
                Subscription.ApplicationFeePercent = applicationFeePercent //required
                Subscription.AutomaticTax = automaticTax //required
                Subscription.BillingCycleAnchor = billingCycleAnchor //required
                Subscription.BillingThresholds = billingThresholds //required
                Subscription.CancelAt = cancelAt //required
                Subscription.CancelAtPeriodEnd = cancelAtPeriodEnd //required
                Subscription.CanceledAt = canceledAt //required
                Subscription.CancellationDetails = cancellationDetails //required
                Subscription.CollectionMethod = collectionMethod //required
                Subscription.Created = created //required
                Subscription.Currency = currency //required
                Subscription.CurrentPeriodEnd = currentPeriodEnd //required
                Subscription.CurrentPeriodStart = currentPeriodStart //required
                Subscription.Customer = customer //required
                Subscription.DaysUntilDue = daysUntilDue //required
                Subscription.DefaultPaymentMethod = defaultPaymentMethod //required
                Subscription.DefaultSource = defaultSource //required
                Subscription.Description = description //required
                Subscription.Discount = discount //required
                Subscription.EndedAt = endedAt //required
                Subscription.Id = id //required
                Subscription.Items = items //required
                Subscription.LatestInvoice = latestInvoice //required
                Subscription.Livemode = livemode //required
                Subscription.Metadata = metadata //required
                Subscription.NextPendingInvoiceItemInvoice = nextPendingInvoiceItemInvoice //required
                Subscription.OnBehalfOf = onBehalfOf //required
                Subscription.PauseCollection = pauseCollection //required
                Subscription.PaymentSettings = paymentSettings //required
                Subscription.PendingInvoiceItemInterval = pendingInvoiceItemInterval //required
                Subscription.PendingSetupIntent = pendingSetupIntent //required
                Subscription.PendingUpdate = pendingUpdate //required
                Subscription.Schedule = schedule //required
                Subscription.StartDate = startDate //required
                Subscription.Status = status //required
                Subscription.TestClock = testClock //required
                Subscription.TransferData = transferData //required
                Subscription.TrialEnd = trialEnd //required
                Subscription.TrialSettings = trialSettings //required
                Subscription.TrialStart = trialStart //required
                Subscription.DefaultTaxRates = defaultTaxRates |> Option.flatten
            }

    and SubscriptionApplication'AnyOf =
        | String of string
        | Application of Application
        | DeletedApplication of DeletedApplication

    and SubscriptionCollectionMethod =
        | ChargeAutomatically
        | SendInvoice

    and SubscriptionCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and SubscriptionDefaultPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SubscriptionDefaultSource'AnyOf =
        | String of string
        | PaymentSource of PaymentSource

    and SubscriptionLatestInvoice'AnyOf =
        | String of string
        | Invoice of Invoice

    and SubscriptionOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and SubscriptionPendingSetupIntent'AnyOf =
        | String of string
        | SetupIntent of SetupIntent

    and SubscriptionSchedule'AnyOf =
        | String of string
        | SubscriptionSchedule of SubscriptionSchedule

    and SubscriptionStatus =
        | Active
        | Canceled
        | Incomplete
        | IncompleteExpired
        | PastDue
        | Paused
        | Trialing
        | Unpaid

    and SubscriptionTestClock'AnyOf =
        | String of string
        | TestHelpersTestClock of TestHelpersTestClock

    ///List of subscription items, each with an attached price.
    and SubscriptionItems = {
        ///Details about each object.
        Data: SubscriptionItem list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: SubscriptionItem list, hasMore: bool, url: string) =
            {
                SubscriptionItems.Data = data //required
                SubscriptionItems.HasMore = hasMore //required
                SubscriptionItems.Url = url //required
            }

    and SubscriptionAutomaticTax = {
        ///Whether Stripe automatically computes tax on this subscription.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                SubscriptionAutomaticTax.Enabled = enabled //required
            }

    and SubscriptionBillingThresholds = {
        ///Monetary threshold that triggers the subscription to create an invoice
        AmountGte: int option
        ///Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
        ResetBillingCycleAnchor: bool option
    }
    with
        static member New (amountGte: int option, resetBillingCycleAnchor: bool option) =
            {
                SubscriptionBillingThresholds.AmountGte = amountGte //required
                SubscriptionBillingThresholds.ResetBillingCycleAnchor = resetBillingCycleAnchor //required
            }

    and SubscriptionDetailsData = {
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will reflect the metadata of the subscription at the time of invoice creation. *Note: This attribute is populated only for invoices created on or after June 29, 2023.*
        Metadata: Map<string, string> option
    }
    with
        static member New (metadata: Map<string, string> option) =
            {
                SubscriptionDetailsData.Metadata = metadata //required
            }

    ///Subscription items allow you to create customer subscriptions with more than
    ///one plan, making it easy to represent complex billing relationships.
    and SubscriptionItem = {
        ///Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
        BillingThresholds: SubscriptionItemBillingThresholds option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        Created: int
        ///Unique identifier for the object.
        Id: string
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        Plan: Plan
        Price: Price
        ///The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
        Quantity: int option
        ///The `subscription` this `subscription_item` belongs to.
        Subscription: string
        ///The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
        TaxRates: TaxRate list option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "subscription_item"

        static member New (billingThresholds: SubscriptionItemBillingThresholds option, created: int, id: string, metadata: Map<string, string>, plan: Plan, price: Price, subscription: string, taxRates: TaxRate list option, ?quantity: int) =
            {
                SubscriptionItem.BillingThresholds = billingThresholds //required
                SubscriptionItem.Created = created //required
                SubscriptionItem.Id = id //required
                SubscriptionItem.Metadata = metadata //required
                SubscriptionItem.Plan = plan //required
                SubscriptionItem.Price = price //required
                SubscriptionItem.Subscription = subscription //required
                SubscriptionItem.TaxRates = taxRates //required
                SubscriptionItem.Quantity = quantity
            }

    and SubscriptionItemBillingThresholds = {
        ///Usage threshold that triggers the subscription to create an invoice
        UsageGte: int option
    }
    with
        static member New (usageGte: int option) =
            {
                SubscriptionItemBillingThresholds.UsageGte = usageGte //required
            }

    and SubscriptionPaymentMethodOptionsCard = {
        MandateOptions: InvoiceMandateOptionsCard option
        ///Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
        Network: SubscriptionPaymentMethodOptionsCardNetwork option
        ///We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
        RequestThreeDSecure: SubscriptionPaymentMethodOptionsCardRequestThreeDSecure option
    }
    with
        static member New (network: SubscriptionPaymentMethodOptionsCardNetwork option, requestThreeDSecure: SubscriptionPaymentMethodOptionsCardRequestThreeDSecure option, ?mandateOptions: InvoiceMandateOptionsCard) =
            {
                SubscriptionPaymentMethodOptionsCard.Network = network //required
                SubscriptionPaymentMethodOptionsCard.RequestThreeDSecure = requestThreeDSecure //required
                SubscriptionPaymentMethodOptionsCard.MandateOptions = mandateOptions
            }

    and SubscriptionPaymentMethodOptionsCardNetwork =
        | Amex
        | CartesBancaires
        | Diners
        | Discover
        | EftposAu
        | Interac
        | Jcb
        | Mastercard
        | Unionpay
        | Unknown
        | Visa

    and SubscriptionPaymentMethodOptionsCardRequestThreeDSecure =
        | Any
        | Automatic

    and SubscriptionPendingInvoiceItemInterval = {
        ///Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
        Interval: SubscriptionPendingInvoiceItemIntervalInterval
        ///The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
        IntervalCount: int
    }
    with
        static member New (interval: SubscriptionPendingInvoiceItemIntervalInterval, intervalCount: int) =
            {
                SubscriptionPendingInvoiceItemInterval.Interval = interval //required
                SubscriptionPendingInvoiceItemInterval.IntervalCount = intervalCount //required
            }

    and SubscriptionPendingInvoiceItemIntervalInterval =
        | Day
        | Month
        | Week
        | Year

    ///A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
    ///Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
    and SubscriptionSchedule = {
        ///ID of the Connect Application that created the schedule.
        Application: SubscriptionScheduleApplication'AnyOf option
        ///Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CompletedAt: DateTime option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
        CurrentPhase: SubscriptionScheduleCurrentPhase option
        ///ID of the customer who owns the subscription schedule.
        Customer: SubscriptionScheduleCustomer'AnyOf
        DefaultSettings: SubscriptionSchedulesResourceDefaultSettings
        ///Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
        EndBehavior: SubscriptionScheduleEndBehavior
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Configuration for the subscription schedule's phases.
        Phases: SubscriptionSchedulePhaseConfiguration list
        ///Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReleasedAt: DateTime option
        ///ID of the subscription once managed by the subscription schedule (if it is released).
        ReleasedSubscription: string option
        ///The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
        Status: SubscriptionScheduleStatus
        ///ID of the subscription managed by the subscription schedule.
        Subscription: SubscriptionScheduleSubscription'AnyOf option
        ///ID of the test clock this subscription schedule belongs to.
        TestClock: SubscriptionScheduleTestClock'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "subscription_schedule"

        static member New (application: SubscriptionScheduleApplication'AnyOf option, canceledAt: DateTime option, completedAt: DateTime option, created: DateTime, currentPhase: SubscriptionScheduleCurrentPhase option, customer: SubscriptionScheduleCustomer'AnyOf, defaultSettings: SubscriptionSchedulesResourceDefaultSettings, endBehavior: SubscriptionScheduleEndBehavior, id: string, livemode: bool, metadata: Map<string, string> option, phases: SubscriptionSchedulePhaseConfiguration list, releasedAt: DateTime option, releasedSubscription: string option, status: SubscriptionScheduleStatus, subscription: SubscriptionScheduleSubscription'AnyOf option, testClock: SubscriptionScheduleTestClock'AnyOf option) =
            {
                SubscriptionSchedule.Application = application //required
                SubscriptionSchedule.CanceledAt = canceledAt //required
                SubscriptionSchedule.CompletedAt = completedAt //required
                SubscriptionSchedule.Created = created //required
                SubscriptionSchedule.CurrentPhase = currentPhase //required
                SubscriptionSchedule.Customer = customer //required
                SubscriptionSchedule.DefaultSettings = defaultSettings //required
                SubscriptionSchedule.EndBehavior = endBehavior //required
                SubscriptionSchedule.Id = id //required
                SubscriptionSchedule.Livemode = livemode //required
                SubscriptionSchedule.Metadata = metadata //required
                SubscriptionSchedule.Phases = phases //required
                SubscriptionSchedule.ReleasedAt = releasedAt //required
                SubscriptionSchedule.ReleasedSubscription = releasedSubscription //required
                SubscriptionSchedule.Status = status //required
                SubscriptionSchedule.Subscription = subscription //required
                SubscriptionSchedule.TestClock = testClock //required
            }

    and SubscriptionScheduleApplication'AnyOf =
        | String of string
        | Application of Application
        | DeletedApplication of DeletedApplication

    and SubscriptionScheduleCustomer'AnyOf =
        | String of string
        | Customer of Customer
        | DeletedCustomer of DeletedCustomer

    and SubscriptionScheduleEndBehavior =
        | Cancel
        | [<JsonUnionCase("none")>] None'
        | Release
        | Renew

    and SubscriptionScheduleStatus =
        | Active
        | Canceled
        | Completed
        | NotStarted
        | Released

    and SubscriptionScheduleSubscription'AnyOf =
        | String of string
        | Subscription of Subscription

    and SubscriptionScheduleTestClock'AnyOf =
        | String of string
        | TestHelpersTestClock of TestHelpersTestClock

    ///An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
    and SubscriptionScheduleAddInvoiceItem = {
        ///ID of the price used to generate the invoice item.
        Price: SubscriptionScheduleAddInvoiceItemPrice'AnyOf
        ///The quantity of the invoice item.
        Quantity: int option
        ///The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
        TaxRates: TaxRate list option
    }
    with
        static member New (price: SubscriptionScheduleAddInvoiceItemPrice'AnyOf, quantity: int option, ?taxRates: TaxRate list option) =
            {
                SubscriptionScheduleAddInvoiceItem.Price = price //required
                SubscriptionScheduleAddInvoiceItem.Quantity = quantity //required
                SubscriptionScheduleAddInvoiceItem.TaxRates = taxRates |> Option.flatten
            }

    and SubscriptionScheduleAddInvoiceItemPrice'AnyOf =
        | String of string
        | Price of Price
        | DeletedPrice of DeletedPrice

    ///A phase item describes the price and quantity of a phase.
    and SubscriptionScheduleConfigurationItem = {
        ///Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
        BillingThresholds: SubscriptionItemBillingThresholds option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered.
        Metadata: Map<string, string> option
        ///ID of the plan to which the customer should be subscribed.
        Plan: SubscriptionScheduleConfigurationItemPlan'AnyOf
        ///ID of the price to which the customer should be subscribed.
        Price: SubscriptionScheduleConfigurationItemPrice'AnyOf
        ///Quantity of the plan to which the customer should be subscribed.
        Quantity: int option
        ///The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
        TaxRates: TaxRate list option
    }
    with
        static member New (billingThresholds: SubscriptionItemBillingThresholds option, metadata: Map<string, string> option, plan: SubscriptionScheduleConfigurationItemPlan'AnyOf, price: SubscriptionScheduleConfigurationItemPrice'AnyOf, ?quantity: int, ?taxRates: TaxRate list option) =
            {
                SubscriptionScheduleConfigurationItem.BillingThresholds = billingThresholds //required
                SubscriptionScheduleConfigurationItem.Metadata = metadata //required
                SubscriptionScheduleConfigurationItem.Plan = plan //required
                SubscriptionScheduleConfigurationItem.Price = price //required
                SubscriptionScheduleConfigurationItem.Quantity = quantity
                SubscriptionScheduleConfigurationItem.TaxRates = taxRates |> Option.flatten
            }

    and SubscriptionScheduleConfigurationItemPlan'AnyOf =
        | String of string
        | Plan of Plan
        | DeletedPlan of DeletedPlan

    and SubscriptionScheduleConfigurationItemPrice'AnyOf =
        | String of string
        | Price of Price
        | DeletedPrice of DeletedPrice

    and SubscriptionScheduleCurrentPhase = {
        ///The end of this phase of the subscription schedule.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EndDate: DateTime
        ///The start of this phase of the subscription schedule.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]StartDate: DateTime
    }
    with
        static member New (endDate: DateTime, startDate: DateTime) =
            {
                SubscriptionScheduleCurrentPhase.EndDate = endDate //required
                SubscriptionScheduleCurrentPhase.StartDate = startDate //required
            }

    ///A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
    and SubscriptionSchedulePhaseConfiguration = {
        ///A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
        AddInvoiceItems: SubscriptionScheduleAddInvoiceItem list
        ///A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
        ApplicationFeePercent: decimal option
        AutomaticTax: SchedulesPhaseAutomaticTax option
        ///Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
        BillingCycleAnchor: SubscriptionSchedulePhaseConfigurationBillingCycleAnchor option
        ///Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
        BillingThresholds: SubscriptionBillingThresholds option
        ///Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
        CollectionMethod: SubscriptionSchedulePhaseConfigurationCollectionMethod option
        ///ID of the coupon to use during this phase of the subscription schedule.
        Coupon: SubscriptionSchedulePhaseConfigurationCoupon'AnyOf option
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
        DefaultPaymentMethod: SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'AnyOf option
        ///The default tax rates to apply to the subscription during this phase of the subscription schedule.
        DefaultTaxRates: TaxRate list option
        ///Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.
        Description: string option
        ///The end of this phase of the subscription schedule.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EndDate: DateTime
        ///The invoice settings applicable during this phase.
        InvoiceSettings: InvoiceSettingSubscriptionSchedulePhaseSetting option
        ///Subscription items to configure the subscription to during this phase of the subscription schedule.
        Items: SubscriptionScheduleConfigurationItem list
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
        Metadata: Map<string, string> option
        ///The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
        OnBehalfOf: SubscriptionSchedulePhaseConfigurationOnBehalfOf'AnyOf option
        ///If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
        ProrationBehavior: SubscriptionSchedulePhaseConfigurationProrationBehavior
        ///The start of this phase of the subscription schedule.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]StartDate: DateTime
        ///The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
        TransferData: SubscriptionTransferData option
        ///When the trial ends within the phase.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]TrialEnd: DateTime option
    }
    with
        static member New (addInvoiceItems: SubscriptionScheduleAddInvoiceItem list, applicationFeePercent: decimal option, billingCycleAnchor: SubscriptionSchedulePhaseConfigurationBillingCycleAnchor option, billingThresholds: SubscriptionBillingThresholds option, collectionMethod: SubscriptionSchedulePhaseConfigurationCollectionMethod option, coupon: SubscriptionSchedulePhaseConfigurationCoupon'AnyOf option, currency: string, defaultPaymentMethod: SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'AnyOf option, description: string option, endDate: DateTime, invoiceSettings: InvoiceSettingSubscriptionSchedulePhaseSetting option, items: SubscriptionScheduleConfigurationItem list, metadata: Map<string, string> option, onBehalfOf: SubscriptionSchedulePhaseConfigurationOnBehalfOf'AnyOf option, prorationBehavior: SubscriptionSchedulePhaseConfigurationProrationBehavior, startDate: DateTime, transferData: SubscriptionTransferData option, trialEnd: DateTime option, ?automaticTax: SchedulesPhaseAutomaticTax, ?defaultTaxRates: TaxRate list option) =
            {
                SubscriptionSchedulePhaseConfiguration.AddInvoiceItems = addInvoiceItems //required
                SubscriptionSchedulePhaseConfiguration.ApplicationFeePercent = applicationFeePercent //required
                SubscriptionSchedulePhaseConfiguration.BillingCycleAnchor = billingCycleAnchor //required
                SubscriptionSchedulePhaseConfiguration.BillingThresholds = billingThresholds //required
                SubscriptionSchedulePhaseConfiguration.CollectionMethod = collectionMethod //required
                SubscriptionSchedulePhaseConfiguration.Coupon = coupon //required
                SubscriptionSchedulePhaseConfiguration.Currency = currency //required
                SubscriptionSchedulePhaseConfiguration.DefaultPaymentMethod = defaultPaymentMethod //required
                SubscriptionSchedulePhaseConfiguration.Description = description //required
                SubscriptionSchedulePhaseConfiguration.EndDate = endDate //required
                SubscriptionSchedulePhaseConfiguration.InvoiceSettings = invoiceSettings //required
                SubscriptionSchedulePhaseConfiguration.Items = items //required
                SubscriptionSchedulePhaseConfiguration.Metadata = metadata //required
                SubscriptionSchedulePhaseConfiguration.OnBehalfOf = onBehalfOf //required
                SubscriptionSchedulePhaseConfiguration.ProrationBehavior = prorationBehavior //required
                SubscriptionSchedulePhaseConfiguration.StartDate = startDate //required
                SubscriptionSchedulePhaseConfiguration.TransferData = transferData //required
                SubscriptionSchedulePhaseConfiguration.TrialEnd = trialEnd //required
                SubscriptionSchedulePhaseConfiguration.AutomaticTax = automaticTax
                SubscriptionSchedulePhaseConfiguration.DefaultTaxRates = defaultTaxRates |> Option.flatten
            }

    and SubscriptionSchedulePhaseConfigurationBillingCycleAnchor =
        | Automatic
        | PhaseStart

    and SubscriptionSchedulePhaseConfigurationCollectionMethod =
        | ChargeAutomatically
        | SendInvoice

    and SubscriptionSchedulePhaseConfigurationCoupon'AnyOf =
        | String of string
        | Coupon of Coupon
        | DeletedCoupon of DeletedCoupon

    and SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SubscriptionSchedulePhaseConfigurationOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and SubscriptionSchedulePhaseConfigurationProrationBehavior =
        | AlwaysInvoice
        | CreateProrations
        | [<JsonUnionCase("none")>] None'

    and SubscriptionSchedulesResourceDefaultSettings = {
        ///A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
        ApplicationFeePercent: decimal option
        AutomaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax option
        ///Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
        BillingCycleAnchor: SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor
        ///Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
        BillingThresholds: SubscriptionBillingThresholds option
        ///Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
        CollectionMethod: SubscriptionSchedulesResourceDefaultSettingsCollectionMethod option
        ///ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
        DefaultPaymentMethod: SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'AnyOf option
        ///Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.
        Description: string option
        ///The subscription schedule's default invoice settings.
        InvoiceSettings: InvoiceSettingSubscriptionScheduleSetting option
        ///The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
        OnBehalfOf: SubscriptionSchedulesResourceDefaultSettingsOnBehalfOf'AnyOf option
        ///The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
        TransferData: SubscriptionTransferData option
    }
    with
        static member New (applicationFeePercent: decimal option, billingCycleAnchor: SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor, billingThresholds: SubscriptionBillingThresholds option, collectionMethod: SubscriptionSchedulesResourceDefaultSettingsCollectionMethod option, defaultPaymentMethod: SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'AnyOf option, description: string option, invoiceSettings: InvoiceSettingSubscriptionScheduleSetting option, onBehalfOf: SubscriptionSchedulesResourceDefaultSettingsOnBehalfOf'AnyOf option, transferData: SubscriptionTransferData option, ?automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax) =
            {
                SubscriptionSchedulesResourceDefaultSettings.ApplicationFeePercent = applicationFeePercent //required
                SubscriptionSchedulesResourceDefaultSettings.BillingCycleAnchor = billingCycleAnchor //required
                SubscriptionSchedulesResourceDefaultSettings.BillingThresholds = billingThresholds //required
                SubscriptionSchedulesResourceDefaultSettings.CollectionMethod = collectionMethod //required
                SubscriptionSchedulesResourceDefaultSettings.DefaultPaymentMethod = defaultPaymentMethod //required
                SubscriptionSchedulesResourceDefaultSettings.Description = description //required
                SubscriptionSchedulesResourceDefaultSettings.InvoiceSettings = invoiceSettings //required
                SubscriptionSchedulesResourceDefaultSettings.OnBehalfOf = onBehalfOf //required
                SubscriptionSchedulesResourceDefaultSettings.TransferData = transferData //required
                SubscriptionSchedulesResourceDefaultSettings.AutomaticTax = automaticTax
            }

    and SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor =
        | Automatic
        | PhaseStart

    and SubscriptionSchedulesResourceDefaultSettingsCollectionMethod =
        | ChargeAutomatically
        | SendInvoice

    and SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'AnyOf =
        | String of string
        | PaymentMethod of PaymentMethod

    and SubscriptionSchedulesResourceDefaultSettingsOnBehalfOf'AnyOf =
        | String of string
        | Account of Account

    and SubscriptionSchedulesResourceDefaultSettingsAutomaticTax = {
        ///Whether Stripe automatically computes tax on invoices created during this phase.
        Enabled: bool
    }
    with
        static member New (enabled: bool) =
            {
                SubscriptionSchedulesResourceDefaultSettingsAutomaticTax.Enabled = enabled //required
            }

    and SubscriptionTransferData = {
        ///A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
        AmountPercent: decimal option
        ///The account where funds from the payment will be transferred to upon payment success.
        Destination: SubscriptionTransferDataDestination'AnyOf
    }
    with
        static member New (amountPercent: decimal option, destination: SubscriptionTransferDataDestination'AnyOf) =
            {
                SubscriptionTransferData.AmountPercent = amountPercent //required
                SubscriptionTransferData.Destination = destination //required
            }

    and SubscriptionTransferDataDestination'AnyOf =
        | String of string
        | Account of Account

    ///The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
    ///should be paused.
    and SubscriptionsResourcePauseCollection = {
        ///The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
        Behavior: SubscriptionsResourcePauseCollectionBehavior
        ///The time after which the subscription will resume collecting payments.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ResumesAt: DateTime option
    }
    with
        static member New (behavior: SubscriptionsResourcePauseCollectionBehavior, resumesAt: DateTime option) =
            {
                SubscriptionsResourcePauseCollection.Behavior = behavior //required
                SubscriptionsResourcePauseCollection.ResumesAt = resumesAt //required
            }

    and SubscriptionsResourcePauseCollectionBehavior =
        | KeepAsDraft
        | MarkUncollectible
        | Void

    and SubscriptionsResourcePaymentMethodOptions = {
        ///This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
        AcssDebit: InvoicePaymentMethodOptionsAcssDebit option
        ///This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
        Bancontact: InvoicePaymentMethodOptionsBancontact option
        ///This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
        Card: SubscriptionPaymentMethodOptionsCard option
        ///This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.
        CustomerBalance: InvoicePaymentMethodOptionsCustomerBalance option
        ///This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription.
        Konbini: InvoicePaymentMethodOptionsKonbini option
        ///This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.
        UsBankAccount: InvoicePaymentMethodOptionsUsBankAccount option
    }
    with
        static member New (acssDebit: InvoicePaymentMethodOptionsAcssDebit option, bancontact: InvoicePaymentMethodOptionsBancontact option, card: SubscriptionPaymentMethodOptionsCard option, customerBalance: InvoicePaymentMethodOptionsCustomerBalance option, konbini: InvoicePaymentMethodOptionsKonbini option, usBankAccount: InvoicePaymentMethodOptionsUsBankAccount option) =
            {
                SubscriptionsResourcePaymentMethodOptions.AcssDebit = acssDebit //required
                SubscriptionsResourcePaymentMethodOptions.Bancontact = bancontact //required
                SubscriptionsResourcePaymentMethodOptions.Card = card //required
                SubscriptionsResourcePaymentMethodOptions.CustomerBalance = customerBalance //required
                SubscriptionsResourcePaymentMethodOptions.Konbini = konbini //required
                SubscriptionsResourcePaymentMethodOptions.UsBankAccount = usBankAccount //required
            }

    and SubscriptionsResourcePaymentSettings = {
        ///Payment-method-specific configuration to provide to invoices created by the subscription.
        PaymentMethodOptions: SubscriptionsResourcePaymentMethodOptions option
        ///The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
        PaymentMethodTypes: SubscriptionsResourcePaymentSettingsPaymentMethodTypes list option
        ///Either `off`, or `on_subscription`. With `on_subscription` Stripe updates `subscription.default_payment_method` when a subscription payment succeeds.
        SaveDefaultPaymentMethod: SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod option
    }
    with
        static member New (paymentMethodOptions: SubscriptionsResourcePaymentMethodOptions option, paymentMethodTypes: SubscriptionsResourcePaymentSettingsPaymentMethodTypes list option, saveDefaultPaymentMethod: SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod option) =
            {
                SubscriptionsResourcePaymentSettings.PaymentMethodOptions = paymentMethodOptions //required
                SubscriptionsResourcePaymentSettings.PaymentMethodTypes = paymentMethodTypes //required
                SubscriptionsResourcePaymentSettings.SaveDefaultPaymentMethod = saveDefaultPaymentMethod //required
            }

    and SubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod =
        | Off
        | OnSubscription

    and SubscriptionsResourcePaymentSettingsPaymentMethodTypes =
        | AchCreditTransfer
        | AchDebit
        | AcssDebit
        | AuBecsDebit
        | BacsDebit
        | Bancontact
        | Boleto
        | Card
        | Cashapp
        | CustomerBalance
        | Fpx
        | Giropay
        | Grabpay
        | Ideal
        | Konbini
        | Link
        | Paynow
        | Paypal
        | Promptpay
        | SepaCreditTransfer
        | SepaDebit
        | Sofort
        | UsBankAccount
        | WechatPay

    ///Pending Updates store the changes pending from a previous update that will be applied
    ///to the Subscription upon successful payment.
    and SubscriptionsResourcePendingUpdate = {
        ///If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]BillingCycleAnchor: DateTime option
        ///The point after which the changes reflected by this update will be discarded and no longer applied.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime
        ///List of subscription items, each with an attached plan, that will be set if the update is applied.
        SubscriptionItems: SubscriptionItem list option
        ///Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]TrialEnd: DateTime option
        ///Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
        TrialFromPlan: bool option
    }
    with
        static member New (billingCycleAnchor: DateTime option, expiresAt: DateTime, subscriptionItems: SubscriptionItem list option, trialEnd: DateTime option, trialFromPlan: bool option) =
            {
                SubscriptionsResourcePendingUpdate.BillingCycleAnchor = billingCycleAnchor //required
                SubscriptionsResourcePendingUpdate.ExpiresAt = expiresAt //required
                SubscriptionsResourcePendingUpdate.SubscriptionItems = subscriptionItems //required
                SubscriptionsResourcePendingUpdate.TrialEnd = trialEnd //required
                SubscriptionsResourcePendingUpdate.TrialFromPlan = trialFromPlan //required
            }

    ///Defines how a subscription behaves when a free trial ends.
    and SubscriptionsTrialsResourceEndBehavior = {
        ///Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
        MissingPaymentMethod: SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod
    }
    with
        static member New (missingPaymentMethod: SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod) =
            {
                SubscriptionsTrialsResourceEndBehavior.MissingPaymentMethod = missingPaymentMethod //required
            }

    and SubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod =
        | Cancel
        | CreateInvoice
        | Pause

    ///Configures how this subscription behaves during the trial period.
    and SubscriptionsTrialsResourceTrialSettings = {
        EndBehavior: SubscriptionsTrialsResourceEndBehavior
    }
    with
        static member New (endBehavior: SubscriptionsTrialsResourceEndBehavior) =
            {
                SubscriptionsTrialsResourceTrialSettings.EndBehavior = endBehavior //required
            }

    ///A Tax Calculation allows you to calculate the tax to collect from your customer.
    ///Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
    and TaxCalculation = {
        ///Total after taxes.
        AmountTotal: int
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
        Customer: string option
        CustomerDetails: TaxProductResourceCustomerDetails
        ///Timestamp of date at which the tax calculation will expire.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpiresAt: DateTime option
        ///Unique identifier for the calculation.
        Id: string option
        ///The list of items the customer is purchasing.
        LineItems: TaxCalculationLineItems option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The shipping cost details for the calculation.
        ShippingCost: TaxProductResourceTaxCalculationShippingCost option
        ///The amount of tax to be collected on top of the line item prices.
        TaxAmountExclusive: int
        ///The amount of tax already included in the line item prices.
        TaxAmountInclusive: int
        ///Breakdown of individual tax amounts that add up to the total.
        TaxBreakdown: TaxProductResourceTaxBreakdown list
        ///Timestamp of date at which the tax rules and rates in effect applies for the calculation.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]TaxDate: DateTime
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax.calculation"

        static member New (amountTotal: int, currency: string, customer: string option, customerDetails: TaxProductResourceCustomerDetails, expiresAt: DateTime option, id: string option, lineItems: TaxCalculationLineItems option, livemode: bool, shippingCost: TaxProductResourceTaxCalculationShippingCost option, taxAmountExclusive: int, taxAmountInclusive: int, taxBreakdown: TaxProductResourceTaxBreakdown list, taxDate: DateTime) =
            {
                TaxCalculation.AmountTotal = amountTotal //required
                TaxCalculation.Currency = currency //required
                TaxCalculation.Customer = customer //required
                TaxCalculation.CustomerDetails = customerDetails //required
                TaxCalculation.ExpiresAt = expiresAt //required
                TaxCalculation.Id = id //required
                TaxCalculation.LineItems = lineItems //required
                TaxCalculation.Livemode = livemode //required
                TaxCalculation.ShippingCost = shippingCost //required
                TaxCalculation.TaxAmountExclusive = taxAmountExclusive //required
                TaxCalculation.TaxAmountInclusive = taxAmountInclusive //required
                TaxCalculation.TaxBreakdown = taxBreakdown //required
                TaxCalculation.TaxDate = taxDate //required
            }

    ///The list of items the customer is purchasing.
    and TaxCalculationLineItems = {
        ///Details about each object.
        Data: TaxCalculationLineItem list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: TaxCalculationLineItem list, hasMore: bool, url: string) =
            {
                TaxCalculationLineItems.Data = data //required
                TaxCalculationLineItems.HasMore = hasMore //required
                TaxCalculationLineItems.Url = url //required
            }

    and TaxCalculationLineItem = {
        ///The line item amount in integer cents. If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
        Amount: int
        ///The amount of tax calculated for this line item, in integer cents.
        AmountTax: int
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The ID of an existing [Product](https://stripe.com/docs/api/products/object).
        Product: string option
        ///The number of units of the item being purchased. For reversals, this is the quantity reversed.
        Quantity: int
        ///A custom identifier for this line item.
        Reference: string option
        ///Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
        TaxBehavior: TaxCalculationLineItemTaxBehavior
        ///Detailed account of taxes relevant to this line item.
        TaxBreakdown: TaxProductResourceLineItemTaxBreakdown list option
        ///The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
        TaxCode: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax.calculation_line_item"

        static member New (amount: int, amountTax: int, id: string, livemode: bool, product: string option, quantity: int, reference: string option, taxBehavior: TaxCalculationLineItemTaxBehavior, taxBreakdown: TaxProductResourceLineItemTaxBreakdown list option, taxCode: string) =
            {
                TaxCalculationLineItem.Amount = amount //required
                TaxCalculationLineItem.AmountTax = amountTax //required
                TaxCalculationLineItem.Id = id //required
                TaxCalculationLineItem.Livemode = livemode //required
                TaxCalculationLineItem.Product = product //required
                TaxCalculationLineItem.Quantity = quantity //required
                TaxCalculationLineItem.Reference = reference //required
                TaxCalculationLineItem.TaxBehavior = taxBehavior //required
                TaxCalculationLineItem.TaxBreakdown = taxBreakdown //required
                TaxCalculationLineItem.TaxCode = taxCode //required
            }

    and TaxCalculationLineItemTaxBehavior =
        | Exclusive
        | Inclusive

    ///You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.
    ///Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
    and TaxSettings = {
        Defaults: TaxProductResourceTaxSettingsDefaults
        ///The place where your business is located.
        HeadOffice: TaxProductResourceTaxSettingsHeadOffice option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.
        Status: TaxSettingsStatus
        StatusDetails: TaxProductResourceTaxSettingsStatusDetails
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax.settings"

        static member New (defaults: TaxProductResourceTaxSettingsDefaults, headOffice: TaxProductResourceTaxSettingsHeadOffice option, livemode: bool, status: TaxSettingsStatus, statusDetails: TaxProductResourceTaxSettingsStatusDetails) =
            {
                TaxSettings.Defaults = defaults //required
                TaxSettings.HeadOffice = headOffice //required
                TaxSettings.Livemode = livemode //required
                TaxSettings.Status = status //required
                TaxSettings.StatusDetails = statusDetails //required
            }

    and TaxSettingsStatus =
        | Active
        | Pending

    ///A Tax Transaction records the tax collected from or refunded to your customer.
    ///Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
    and TaxTransaction = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
        Customer: string option
        CustomerDetails: TaxProductResourceCustomerDetails
        ///Unique identifier for the transaction.
        Id: string
        ///The tax collected or refunded, by line item.
        LineItems: TaxTransactionLineItems option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///A custom unique identifier, such as 'myOrder_123'.
        Reference: string
        ///If `type=reversal`, contains information about what was reversed.
        Reversal: TaxProductResourceTaxTransactionResourceReversal option
        ///The shipping cost details for the transaction.
        ShippingCost: TaxProductResourceTaxTransactionShippingCost option
        ///Timestamp of date at which the tax rules and rates in effect applies for the calculation.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]TaxDate: DateTime
        ///If `reversal`, this transaction reverses an earlier transaction.
        Type: TaxTransactionType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax.transaction"

        static member New (created: DateTime, currency: string, customer: string option, customerDetails: TaxProductResourceCustomerDetails, id: string, lineItems: TaxTransactionLineItems option, livemode: bool, metadata: Map<string, string> option, reference: string, reversal: TaxProductResourceTaxTransactionResourceReversal option, shippingCost: TaxProductResourceTaxTransactionShippingCost option, taxDate: DateTime, ``type``: TaxTransactionType) =
            {
                TaxTransaction.Created = created //required
                TaxTransaction.Currency = currency //required
                TaxTransaction.Customer = customer //required
                TaxTransaction.CustomerDetails = customerDetails //required
                TaxTransaction.Id = id //required
                TaxTransaction.LineItems = lineItems //required
                TaxTransaction.Livemode = livemode //required
                TaxTransaction.Metadata = metadata //required
                TaxTransaction.Reference = reference //required
                TaxTransaction.Reversal = reversal //required
                TaxTransaction.ShippingCost = shippingCost //required
                TaxTransaction.TaxDate = taxDate //required
                TaxTransaction.Type = ``type`` //required
            }

    and TaxTransactionType =
        | Reversal
        | Transaction

    ///The tax collected or refunded, by line item.
    and TaxTransactionLineItems = {
        ///Details about each object.
        Data: TaxTransactionLineItem list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: TaxTransactionLineItem list, hasMore: bool, url: string) =
            {
                TaxTransactionLineItems.Data = data //required
                TaxTransactionLineItems.HasMore = hasMore //required
                TaxTransactionLineItems.Url = url //required
            }

    and TaxTransactionLineItem = {
        ///The line item amount in integer cents. If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
        Amount: int
        ///The amount of tax calculated for this line item, in integer cents.
        AmountTax: int
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The ID of an existing [Product](https://stripe.com/docs/api/products/object).
        Product: string option
        ///The number of units of the item being purchased. For reversals, this is the quantity reversed.
        Quantity: int
        ///A custom identifier for this line item in the transaction.
        Reference: string
        ///If `type=reversal`, contains information about what was reversed.
        Reversal: TaxProductResourceTaxTransactionLineItemResourceReversal option
        ///Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
        TaxBehavior: TaxTransactionLineItemTaxBehavior
        ///The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
        TaxCode: string
        ///If `reversal`, this line item reverses an earlier transaction.
        Type: TaxTransactionLineItemType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax.transaction_line_item"

        static member New (amount: int, amountTax: int, id: string, livemode: bool, metadata: Map<string, string> option, product: string option, quantity: int, reference: string, reversal: TaxProductResourceTaxTransactionLineItemResourceReversal option, taxBehavior: TaxTransactionLineItemTaxBehavior, taxCode: string, ``type``: TaxTransactionLineItemType) =
            {
                TaxTransactionLineItem.Amount = amount //required
                TaxTransactionLineItem.AmountTax = amountTax //required
                TaxTransactionLineItem.Id = id //required
                TaxTransactionLineItem.Livemode = livemode //required
                TaxTransactionLineItem.Metadata = metadata //required
                TaxTransactionLineItem.Product = product //required
                TaxTransactionLineItem.Quantity = quantity //required
                TaxTransactionLineItem.Reference = reference //required
                TaxTransactionLineItem.Reversal = reversal //required
                TaxTransactionLineItem.TaxBehavior = taxBehavior //required
                TaxTransactionLineItem.TaxCode = taxCode //required
                TaxTransactionLineItem.Type = ``type`` //required
            }

    and TaxTransactionLineItemTaxBehavior =
        | Exclusive
        | Inclusive

    and TaxTransactionLineItemType =
        | Reversal
        | Transaction

    ///[Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
    and TaxCode = {
        ///A detailed description of which types of products the tax code represents.
        Description: string
        ///Unique identifier for the object.
        Id: string
        ///A short name for the tax code.
        Name: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax_code"

        static member New (description: string, id: string, name: string) =
            {
                TaxCode.Description = description //required
                TaxCode.Id = id //required
                TaxCode.Name = name //required
            }

    and TaxDeductedAtSource = {
        ///Unique identifier for the object.
        Id: string
        ///The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PeriodEnd: DateTime
        ///The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PeriodStart: DateTime
        ///The TAN that was supplied to Stripe when TDS was assessed
        TaxDeductionAccountNumber: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax_deducted_at_source"

        static member New (id: string, periodEnd: DateTime, periodStart: DateTime, taxDeductionAccountNumber: string) =
            {
                TaxDeductedAtSource.Id = id //required
                TaxDeductedAtSource.PeriodEnd = periodEnd //required
                TaxDeductedAtSource.PeriodStart = periodStart //required
                TaxDeductedAtSource.TaxDeductionAccountNumber = taxDeductionAccountNumber //required
            }

    ///You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
    ///A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
    ///Related guide: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids)
    and TaxId = {
        ///Two-letter ISO code representing the country of the tax ID.
        Country: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///ID of the customer.
        Customer: TaxIdCustomer'AnyOf option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
        Type: TaxIdType
        ///Value of the tax ID.
        Value: string
        ///Tax ID verification information.
        Verification: TaxIdVerification option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax_id"

        static member New (country: string option, created: DateTime, customer: TaxIdCustomer'AnyOf option, id: string, livemode: bool, ``type``: TaxIdType, value: string, verification: TaxIdVerification option) =
            {
                TaxId.Country = country //required
                TaxId.Created = created //required
                TaxId.Customer = customer //required
                TaxId.Id = id //required
                TaxId.Livemode = livemode //required
                TaxId.Type = ``type`` //required
                TaxId.Value = value //required
                TaxId.Verification = verification //required
            }

    and TaxIdCustomer'AnyOf =
        | String of string
        | Customer of Customer

    and TaxIdType =
        | AdNrt
        | AeTrn
        | ArCuit
        | AuAbn
        | AuArn
        | BgUic
        | BoTin
        | BrCnpj
        | BrCpf
        | CaBn
        | CaGstHst
        | CaPstBc
        | CaPstMb
        | CaPstSk
        | CaQst
        | ChVat
        | ClTin
        | CnTin
        | CoNit
        | CrTin
        | DoRcn
        | EcRuc
        | EgTin
        | EsCif
        | EuOssVat
        | EuVat
        | GbVat
        | GeVat
        | HkBr
        | HuTin
        | IdNpwp
        | IlVat
        | InGst
        | IsVat
        | JpCn
        | JpRn
        | JpTrn
        | KePin
        | KrBrn
        | LiUid
        | MxRfc
        | MyFrp
        | MyItn
        | MySst
        | NoVat
        | NzGst
        | PeRuc
        | PhTin
        | RoTin
        | RsPib
        | RuInn
        | RuKpp
        | SaVat
        | SgGst
        | SgUen
        | SiTin
        | SvNit
        | ThVat
        | TrTin
        | TwVat
        | UaVat
        | Unknown
        | UsEin
        | UyRuc
        | VeRif
        | VnTin
        | ZaVat

    and TaxIdVerification = {
        ///Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
        Status: TaxIdVerificationStatus
        ///Verified address.
        VerifiedAddress: string option
        ///Verified name.
        VerifiedName: string option
    }
    with
        static member New (status: TaxIdVerificationStatus, verifiedAddress: string option, verifiedName: string option) =
            {
                TaxIdVerification.Status = status //required
                TaxIdVerification.VerifiedAddress = verifiedAddress //required
                TaxIdVerification.VerifiedName = verifiedName //required
            }

    and TaxIdVerificationStatus =
        | Pending
        | Unavailable
        | Unverified
        | Verified

    and TaxProductResourceCustomerDetails = {
        ///The customer's postal address (for example, home or business location).
        Address: TaxProductResourcePostalAddress option
        ///The type of customer address provided.
        AddressSource: TaxProductResourceCustomerDetailsAddressSource option
        ///The customer's IP address (IPv4 or IPv6).
        IpAddress: string option
        ///The customer's tax IDs (for example, EU VAT numbers).
        TaxIds: TaxProductResourceCustomerDetailsResourceTaxId list
        ///The taxability override used for taxation.
        TaxabilityOverride: TaxProductResourceCustomerDetailsTaxabilityOverride
    }
    with
        static member New (address: TaxProductResourcePostalAddress option, addressSource: TaxProductResourceCustomerDetailsAddressSource option, ipAddress: string option, taxIds: TaxProductResourceCustomerDetailsResourceTaxId list, taxabilityOverride: TaxProductResourceCustomerDetailsTaxabilityOverride) =
            {
                TaxProductResourceCustomerDetails.Address = address //required
                TaxProductResourceCustomerDetails.AddressSource = addressSource //required
                TaxProductResourceCustomerDetails.IpAddress = ipAddress //required
                TaxProductResourceCustomerDetails.TaxIds = taxIds //required
                TaxProductResourceCustomerDetails.TaxabilityOverride = taxabilityOverride //required
            }

    and TaxProductResourceCustomerDetailsAddressSource =
        | Billing
        | Shipping

    and TaxProductResourceCustomerDetailsTaxabilityOverride =
        | CustomerExempt
        | [<JsonUnionCase("none")>] None'
        | ReverseCharge

    and TaxProductResourceCustomerDetailsResourceTaxId = {
        ///The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`
        Type: TaxProductResourceCustomerDetailsResourceTaxIdType
        ///The value of the tax ID.
        Value: string
    }
    with
        static member New (``type``: TaxProductResourceCustomerDetailsResourceTaxIdType, value: string) =
            {
                TaxProductResourceCustomerDetailsResourceTaxId.Type = ``type`` //required
                TaxProductResourceCustomerDetailsResourceTaxId.Value = value //required
            }

    and TaxProductResourceCustomerDetailsResourceTaxIdType =
        | AdNrt
        | AeTrn
        | ArCuit
        | AuAbn
        | AuArn
        | BgUic
        | BoTin
        | BrCnpj
        | BrCpf
        | CaBn
        | CaGstHst
        | CaPstBc
        | CaPstMb
        | CaPstSk
        | CaQst
        | ChVat
        | ClTin
        | CnTin
        | CoNit
        | CrTin
        | DoRcn
        | EcRuc
        | EgTin
        | EsCif
        | EuOssVat
        | EuVat
        | GbVat
        | GeVat
        | HkBr
        | HuTin
        | IdNpwp
        | IlVat
        | InGst
        | IsVat
        | JpCn
        | JpRn
        | JpTrn
        | KePin
        | KrBrn
        | LiUid
        | MxRfc
        | MyFrp
        | MyItn
        | MySst
        | NoVat
        | NzGst
        | PeRuc
        | PhTin
        | RoTin
        | RsPib
        | RuInn
        | RuKpp
        | SaVat
        | SgGst
        | SgUen
        | SiTin
        | SvNit
        | ThVat
        | TrTin
        | TwVat
        | UaVat
        | Unknown
        | UsEin
        | UyRuc
        | VeRif
        | VnTin
        | ZaVat

    and TaxProductResourceJurisdiction = {
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string
        ///A human-readable name for the jurisdiction imposing the tax.
        DisplayName: string
        ///Indicates the level of the jurisdiction imposing the tax.
        Level: TaxProductResourceJurisdictionLevel
        ///[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
        State: string option
    }
    with
        static member New (country: string, displayName: string, level: TaxProductResourceJurisdictionLevel, state: string option) =
            {
                TaxProductResourceJurisdiction.Country = country //required
                TaxProductResourceJurisdiction.DisplayName = displayName //required
                TaxProductResourceJurisdiction.Level = level //required
                TaxProductResourceJurisdiction.State = state //required
            }

    and TaxProductResourceJurisdictionLevel =
        | City
        | Country
        | County
        | District
        | State

    and TaxProductResourceLineItemTaxBreakdown = {
        ///The amount of tax, in integer cents.
        Amount: int
        Jurisdiction: TaxProductResourceJurisdiction
        ///Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address).
        Sourcing: TaxProductResourceLineItemTaxBreakdownSourcing
        ///Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax.
        TaxRateDetails: TaxProductResourceLineItemTaxRateDetails option
        ///The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
        TaxabilityReason: TaxProductResourceLineItemTaxBreakdownTaxabilityReason
        ///The amount on which tax is calculated, in integer cents.
        TaxableAmount: int
    }
    with
        static member New (amount: int, jurisdiction: TaxProductResourceJurisdiction, sourcing: TaxProductResourceLineItemTaxBreakdownSourcing, taxRateDetails: TaxProductResourceLineItemTaxRateDetails option, taxabilityReason: TaxProductResourceLineItemTaxBreakdownTaxabilityReason, taxableAmount: int) =
            {
                TaxProductResourceLineItemTaxBreakdown.Amount = amount //required
                TaxProductResourceLineItemTaxBreakdown.Jurisdiction = jurisdiction //required
                TaxProductResourceLineItemTaxBreakdown.Sourcing = sourcing //required
                TaxProductResourceLineItemTaxBreakdown.TaxRateDetails = taxRateDetails //required
                TaxProductResourceLineItemTaxBreakdown.TaxabilityReason = taxabilityReason //required
                TaxProductResourceLineItemTaxBreakdown.TaxableAmount = taxableAmount //required
            }

    and TaxProductResourceLineItemTaxBreakdownSourcing =
        | Destination
        | Origin

    and TaxProductResourceLineItemTaxBreakdownTaxabilityReason =
        | CustomerExempt
        | NotCollecting
        | NotSubjectToTax
        | NotSupported
        | PortionProductExempt
        | PortionReducedRated
        | PortionStandardRated
        | ProductExempt
        | ProductExemptHoliday
        | ProportionallyRated
        | ReducedRated
        | ReverseCharge
        | StandardRated
        | TaxableBasisReduced
        | ZeroRated

    and TaxProductResourceLineItemTaxRateDetails = {
        ///A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)".
        DisplayName: string
        ///The tax rate percentage as a string. For example, 8.5% is represented as "8.5".
        PercentageDecimal: string
        ///The tax type, such as `vat` or `sales_tax`.
        TaxType: TaxProductResourceLineItemTaxRateDetailsTaxType
    }
    with
        static member New (displayName: string, percentageDecimal: string, taxType: TaxProductResourceLineItemTaxRateDetailsTaxType) =
            {
                TaxProductResourceLineItemTaxRateDetails.DisplayName = displayName //required
                TaxProductResourceLineItemTaxRateDetails.PercentageDecimal = percentageDecimal //required
                TaxProductResourceLineItemTaxRateDetails.TaxType = taxType //required
            }

    and TaxProductResourceLineItemTaxRateDetailsTaxType =
        | AmusementTax
        | CommunicationsTax
        | Gst
        | Hst
        | Igst
        | Jct
        | LeaseTax
        | Pst
        | Qst
        | Rst
        | SalesTax
        | Vat

    and TaxProductResourcePostalAddress = {
        ///City, district, suburb, town, or village.
        City: string option
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string
        ///Address line 1 (e.g., street, PO Box, or company name).
        [<JsonField(Name="line1")>]Line1: string option
        ///Address line 2 (e.g., apartment, suite, unit, or building).
        [<JsonField(Name="line2")>]Line2: string option
        ///ZIP or postal code.
        PostalCode: string option
        ///State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX".
        State: string option
    }
    with
        static member New (city: string option, country: string, line1: string option, line2: string option, postalCode: string option, state: string option) =
            {
                TaxProductResourcePostalAddress.City = city //required
                TaxProductResourcePostalAddress.Country = country //required
                TaxProductResourcePostalAddress.Line1 = line1 //required
                TaxProductResourcePostalAddress.Line2 = line2 //required
                TaxProductResourcePostalAddress.PostalCode = postalCode //required
                TaxProductResourcePostalAddress.State = state //required
            }

    and TaxProductResourceTaxBreakdown = {
        ///The amount of tax, in integer cents.
        Amount: int
        ///Specifies whether the tax amount is included in the line item amount.
        Inclusive: bool
        TaxRateDetails: TaxProductResourceTaxRateDetails
        ///The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
        TaxabilityReason: TaxProductResourceTaxBreakdownTaxabilityReason
        ///The amount on which tax is calculated, in integer cents.
        TaxableAmount: int
    }
    with
        static member New (amount: int, inclusive: bool, taxRateDetails: TaxProductResourceTaxRateDetails, taxabilityReason: TaxProductResourceTaxBreakdownTaxabilityReason, taxableAmount: int) =
            {
                TaxProductResourceTaxBreakdown.Amount = amount //required
                TaxProductResourceTaxBreakdown.Inclusive = inclusive //required
                TaxProductResourceTaxBreakdown.TaxRateDetails = taxRateDetails //required
                TaxProductResourceTaxBreakdown.TaxabilityReason = taxabilityReason //required
                TaxProductResourceTaxBreakdown.TaxableAmount = taxableAmount //required
            }

    and TaxProductResourceTaxBreakdownTaxabilityReason =
        | CustomerExempt
        | NotCollecting
        | NotSubjectToTax
        | NotSupported
        | PortionProductExempt
        | PortionReducedRated
        | PortionStandardRated
        | ProductExempt
        | ProductExemptHoliday
        | ProportionallyRated
        | ReducedRated
        | ReverseCharge
        | StandardRated
        | TaxableBasisReduced
        | ZeroRated

    and TaxProductResourceTaxCalculationShippingCost = {
        ///The shipping amount in integer cents. If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
        Amount: int
        ///The amount of tax calculated for shipping, in integer cents.
        AmountTax: int
        ///The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
        ShippingRate: string option
        ///Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
        TaxBehavior: TaxProductResourceTaxCalculationShippingCostTaxBehavior
        ///Detailed account of taxes relevant to shipping cost.
        TaxBreakdown: TaxProductResourceLineItemTaxBreakdown list option
        ///The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
        TaxCode: string
    }
    with
        static member New (amount: int, amountTax: int, taxBehavior: TaxProductResourceTaxCalculationShippingCostTaxBehavior, taxCode: string, ?shippingRate: string, ?taxBreakdown: TaxProductResourceLineItemTaxBreakdown list) =
            {
                TaxProductResourceTaxCalculationShippingCost.Amount = amount //required
                TaxProductResourceTaxCalculationShippingCost.AmountTax = amountTax //required
                TaxProductResourceTaxCalculationShippingCost.TaxBehavior = taxBehavior //required
                TaxProductResourceTaxCalculationShippingCost.TaxCode = taxCode //required
                TaxProductResourceTaxCalculationShippingCost.ShippingRate = shippingRate
                TaxProductResourceTaxCalculationShippingCost.TaxBreakdown = taxBreakdown
            }

    and TaxProductResourceTaxCalculationShippingCostTaxBehavior =
        | Exclusive
        | Inclusive

    and TaxProductResourceTaxRateDetails = {
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string option
        ///The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`.
        PercentageDecimal: string
        ///State, county, province, or region.
        State: string option
        ///The tax type, such as `vat` or `sales_tax`.
        TaxType: TaxProductResourceTaxRateDetailsTaxType option
    }
    with
        static member New (country: string option, percentageDecimal: string, state: string option, taxType: TaxProductResourceTaxRateDetailsTaxType option) =
            {
                TaxProductResourceTaxRateDetails.Country = country //required
                TaxProductResourceTaxRateDetails.PercentageDecimal = percentageDecimal //required
                TaxProductResourceTaxRateDetails.State = state //required
                TaxProductResourceTaxRateDetails.TaxType = taxType //required
            }

    and TaxProductResourceTaxRateDetailsTaxType =
        | AmusementTax
        | CommunicationsTax
        | Gst
        | Hst
        | Igst
        | Jct
        | LeaseTax
        | Pst
        | Qst
        | Rst
        | SalesTax
        | Vat

    and TaxProductResourceTaxSettingsDefaults = {
        ///Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior.
        TaxBehavior: TaxProductResourceTaxSettingsDefaultsTaxBehavior option
        ///Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices.
        TaxCode: string option
    }
    with
        static member New (taxBehavior: TaxProductResourceTaxSettingsDefaultsTaxBehavior option, taxCode: string option) =
            {
                TaxProductResourceTaxSettingsDefaults.TaxBehavior = taxBehavior //required
                TaxProductResourceTaxSettingsDefaults.TaxCode = taxCode //required
            }

    and TaxProductResourceTaxSettingsDefaultsTaxBehavior =
        | Exclusive
        | Inclusive
        | InferredByCurrency

    and TaxProductResourceTaxSettingsHeadOffice = {
        Address: Address
    }
    with
        static member New (address: Address) =
            {
                TaxProductResourceTaxSettingsHeadOffice.Address = address //required
            }

    and TaxProductResourceTaxSettingsStatusDetails = {
        Active: TaxProductResourceTaxSettingsStatusDetailsResourceActive option
        Pending: TaxProductResourceTaxSettingsStatusDetailsResourcePending option
    }
    with
        static member New (?active: TaxProductResourceTaxSettingsStatusDetailsResourceActive, ?pending: TaxProductResourceTaxSettingsStatusDetailsResourcePending) =
            {
                TaxProductResourceTaxSettingsStatusDetails.Active = active
                TaxProductResourceTaxSettingsStatusDetails.Pending = pending
            }

    and TaxProductResourceTaxSettingsStatusDetailsResourceActive = {
        TaxProductResourceTaxSettingsStatusDetailsResourceActive: string option
    }
    with
        static member New (?taxProductResourceTaxSettingsStatusDetailsResourceActive: string option) =
            {
                TaxProductResourceTaxSettingsStatusDetailsResourceActive.TaxProductResourceTaxSettingsStatusDetailsResourceActive = taxProductResourceTaxSettingsStatusDetailsResourceActive |> Option.flatten
            }

    and TaxProductResourceTaxSettingsStatusDetailsResourcePending = {
        ///The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call.
        MissingFields: string list option
    }
    with
        static member New (missingFields: string list option) =
            {
                TaxProductResourceTaxSettingsStatusDetailsResourcePending.MissingFields = missingFields //required
            }

    and TaxProductResourceTaxTransactionLineItemResourceReversal = {
        ///The `id` of the line item to reverse in the original transaction.
        OriginalLineItem: string
    }
    with
        static member New (originalLineItem: string) =
            {
                TaxProductResourceTaxTransactionLineItemResourceReversal.OriginalLineItem = originalLineItem //required
            }

    and TaxProductResourceTaxTransactionResourceReversal = {
        ///The `id` of the reversed `Transaction` object.
        OriginalTransaction: string option
    }
    with
        static member New (originalTransaction: string option) =
            {
                TaxProductResourceTaxTransactionResourceReversal.OriginalTransaction = originalTransaction //required
            }

    and TaxProductResourceTaxTransactionShippingCost = {
        ///The shipping amount in integer cents. If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
        Amount: int
        ///The amount of tax calculated for shipping, in integer cents.
        AmountTax: int
        ///The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
        ShippingRate: string option
        ///Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
        TaxBehavior: TaxProductResourceTaxTransactionShippingCostTaxBehavior
        ///Detailed account of taxes relevant to shipping cost. (It is not populated for the transaction resource object and will be removed in the next API version.)
        TaxBreakdown: TaxProductResourceLineItemTaxBreakdown list option
        ///The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
        TaxCode: string
    }
    with
        static member New (amount: int, amountTax: int, taxBehavior: TaxProductResourceTaxTransactionShippingCostTaxBehavior, taxCode: string, ?shippingRate: string, ?taxBreakdown: TaxProductResourceLineItemTaxBreakdown list) =
            {
                TaxProductResourceTaxTransactionShippingCost.Amount = amount //required
                TaxProductResourceTaxTransactionShippingCost.AmountTax = amountTax //required
                TaxProductResourceTaxTransactionShippingCost.TaxBehavior = taxBehavior //required
                TaxProductResourceTaxTransactionShippingCost.TaxCode = taxCode //required
                TaxProductResourceTaxTransactionShippingCost.ShippingRate = shippingRate
                TaxProductResourceTaxTransactionShippingCost.TaxBreakdown = taxBreakdown
            }

    and TaxProductResourceTaxTransactionShippingCostTaxBehavior =
        | Exclusive
        | Inclusive

    ///Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
    ///Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
    and TaxRate = {
        ///Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        Active: bool
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        Description: string option
        ///The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
        DisplayName: string
        ///Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
        ///this percentage reflects the rate actually used to calculate tax based on the product's taxability
        ///and whether the user is registered to collect taxes in the corresponding jurisdiction.
        EffectivePercentage: decimal option
        ///Unique identifier for the object.
        Id: string
        ///This specifies if the tax rate is inclusive or exclusive.
        Inclusive: bool
        ///The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
        Jurisdiction: string option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.
        Percentage: decimal
        ///[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
        State: string option
        ///The high-level tax type, such as `vat` or `sales_tax`.
        TaxType: TaxRateTaxType option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "tax_rate"

        static member New (active: bool, country: string option, created: DateTime, description: string option, displayName: string, effectivePercentage: decimal option, id: string, inclusive: bool, jurisdiction: string option, livemode: bool, metadata: Map<string, string> option, percentage: decimal, state: string option, taxType: TaxRateTaxType option) =
            {
                TaxRate.Active = active //required
                TaxRate.Country = country //required
                TaxRate.Created = created //required
                TaxRate.Description = description //required
                TaxRate.DisplayName = displayName //required
                TaxRate.EffectivePercentage = effectivePercentage //required
                TaxRate.Id = id //required
                TaxRate.Inclusive = inclusive //required
                TaxRate.Jurisdiction = jurisdiction //required
                TaxRate.Livemode = livemode //required
                TaxRate.Metadata = metadata //required
                TaxRate.Percentage = percentage //required
                TaxRate.State = state //required
                TaxRate.TaxType = taxType //required
            }

    and TaxRateTaxType =
        | AmusementTax
        | CommunicationsTax
        | Gst
        | Hst
        | Igst
        | Jct
        | LeaseTax
        | Pst
        | Qst
        | Rst
        | SalesTax
        | ServiceTax
        | Vat

    ///A Configurations object represents how features should be configured for terminal readers.
    and TerminalConfiguration = {
        BbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig option
        ///Unique identifier for the object.
        Id: string
        ///Whether this Configuration is the default for your account
        IsAccountDefault: bool option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        Tipping: TerminalConfigurationConfigurationResourceTipping option
        [<JsonField(Name="verifone_p400")>]VerifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.configuration"

        static member New (id: string, isAccountDefault: bool option, livemode: bool, ?bbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig, ?tipping: TerminalConfigurationConfigurationResourceTipping, ?verifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig) =
            {
                TerminalConfiguration.Id = id //required
                TerminalConfiguration.IsAccountDefault = isAccountDefault //required
                TerminalConfiguration.Livemode = livemode //required
                TerminalConfiguration.BbposWiseposE = bbposWiseposE
                TerminalConfiguration.Tipping = tipping
                TerminalConfiguration.VerifoneP400 = verifoneP400
            }

    ///A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
    ///Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
    and TerminalConnectionToken = {
        ///The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
        Location: string option
        ///Your application should pass this token to the Stripe Terminal SDK.
        Secret: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.connection_token"

        static member New (secret: string, ?location: string) =
            {
                TerminalConnectionToken.Secret = secret //required
                TerminalConnectionToken.Location = location
            }

    ///A Location represents a grouping of readers.
    ///Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
    and TerminalLocation = {
        Address: Address
        ///The ID of a configuration that will be used to customize all readers in this location.
        ConfigurationOverrides: string option
        ///The display name of the location.
        DisplayName: string
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.location"

        static member New (address: Address, displayName: string, id: string, livemode: bool, metadata: Map<string, string>, ?configurationOverrides: string) =
            {
                TerminalLocation.Address = address //required
                TerminalLocation.DisplayName = displayName //required
                TerminalLocation.Id = id //required
                TerminalLocation.Livemode = livemode //required
                TerminalLocation.Metadata = metadata //required
                TerminalLocation.ConfigurationOverrides = configurationOverrides
            }

    ///A Reader represents a physical device for accepting payment details.
    ///Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
    and TerminalReader = {
        ///The most recent action performed by the reader.
        Action: TerminalReaderReaderResourceReaderAction option
        ///The current software version of the reader.
        DeviceSwVersion: string option
        ///Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, or `simulated_wisepos_e`.
        DeviceType: TerminalReaderDeviceType
        ///Unique identifier for the object.
        Id: string
        ///The local IP address of the reader.
        IpAddress: string option
        ///Custom label given to the reader for easier identification.
        Label: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The location identifier of the reader.
        Location: TerminalReaderLocation'AnyOf option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Serial number of the reader.
        SerialNumber: string
        ///The networking status of the reader.
        Status: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "terminal.reader"

        static member New (action: TerminalReaderReaderResourceReaderAction option, deviceSwVersion: string option, deviceType: TerminalReaderDeviceType, id: string, ipAddress: string option, label: string, livemode: bool, location: TerminalReaderLocation'AnyOf option, metadata: Map<string, string>, serialNumber: string, status: string option) =
            {
                TerminalReader.Action = action //required
                TerminalReader.DeviceSwVersion = deviceSwVersion //required
                TerminalReader.DeviceType = deviceType //required
                TerminalReader.Id = id //required
                TerminalReader.IpAddress = ipAddress //required
                TerminalReader.Label = label //required
                TerminalReader.Livemode = livemode //required
                TerminalReader.Location = location //required
                TerminalReader.Metadata = metadata //required
                TerminalReader.SerialNumber = serialNumber //required
                TerminalReader.Status = status //required
            }

    and TerminalReaderDeviceType =
        | BbposChipper2x
        | BbposWisepad3
        | BbposWiseposE
        | SimulatedWiseposE
        | StripeM2
        | VerifoneP400

    and TerminalReaderLocation'AnyOf =
        | String of string
        | TerminalLocation of TerminalLocation

    and TerminalConfigurationConfigurationResourceCurrencySpecificConfig = {
        ///Fixed amounts displayed when collecting a tip
        FixedAmounts: int list option
        ///Percentages displayed when collecting a tip
        Percentages: int list option
        ///Below this amount, fixed amounts will be displayed; above it, percentages will be displayed
        SmartTipThreshold: int option
    }
    with
        static member New (?fixedAmounts: int list option, ?percentages: int list option, ?smartTipThreshold: int) =
            {
                TerminalConfigurationConfigurationResourceCurrencySpecificConfig.FixedAmounts = fixedAmounts |> Option.flatten
                TerminalConfigurationConfigurationResourceCurrencySpecificConfig.Percentages = percentages |> Option.flatten
                TerminalConfigurationConfigurationResourceCurrencySpecificConfig.SmartTipThreshold = smartTipThreshold
            }

    and TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig = {
        ///A File ID representing an image you would like displayed on the reader.
        Splashscreen: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSplashscreen'AnyOf option
    }
    with
        static member New (?splashscreen: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSplashscreen'AnyOf) =
            {
                TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig.Splashscreen = splashscreen
            }

    and TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSplashscreen'AnyOf =
        | String of string
        | File of File

    and TerminalConfigurationConfigurationResourceTipping = {
        Aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
        Usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig option
    }
    with
        static member New (?aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig, ?usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfig) =
            {
                TerminalConfigurationConfigurationResourceTipping.Aud = aud
                TerminalConfigurationConfigurationResourceTipping.Cad = cad
                TerminalConfigurationConfigurationResourceTipping.Chf = chf
                TerminalConfigurationConfigurationResourceTipping.Czk = czk
                TerminalConfigurationConfigurationResourceTipping.Dkk = dkk
                TerminalConfigurationConfigurationResourceTipping.Eur = eur
                TerminalConfigurationConfigurationResourceTipping.Gbp = gbp
                TerminalConfigurationConfigurationResourceTipping.Hkd = hkd
                TerminalConfigurationConfigurationResourceTipping.Myr = myr
                TerminalConfigurationConfigurationResourceTipping.Nok = nok
                TerminalConfigurationConfigurationResourceTipping.Nzd = nzd
                TerminalConfigurationConfigurationResourceTipping.Sek = sek
                TerminalConfigurationConfigurationResourceTipping.Sgd = sgd
                TerminalConfigurationConfigurationResourceTipping.Usd = usd
            }

    ///Represents a cart to be displayed on the reader
    and TerminalReaderReaderResourceCart = {
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///List of line items in the cart.
        LineItems: TerminalReaderReaderResourceLineItem list
        ///Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Tax: int option
        ///Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Total: int
    }
    with
        static member New (currency: string, lineItems: TerminalReaderReaderResourceLineItem list, tax: int option, total: int) =
            {
                TerminalReaderReaderResourceCart.Currency = currency //required
                TerminalReaderReaderResourceCart.LineItems = lineItems //required
                TerminalReaderReaderResourceCart.Tax = tax //required
                TerminalReaderReaderResourceCart.Total = total //required
            }

    ///Represents a line item to be displayed on the reader
    and TerminalReaderReaderResourceLineItem = {
        ///The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
        Amount: int
        ///Description of the line item.
        Description: string
        ///The quantity of the line item.
        Quantity: int
    }
    with
        static member New (amount: int, description: string, quantity: int) =
            {
                TerminalReaderReaderResourceLineItem.Amount = amount //required
                TerminalReaderReaderResourceLineItem.Description = description //required
                TerminalReaderReaderResourceLineItem.Quantity = quantity //required
            }

    ///Represents a per-transaction override of a reader configuration
    and TerminalReaderReaderResourceProcessConfig = {
        ///Override showing a tipping selection screen on this transaction.
        SkipTipping: bool option
        Tipping: TerminalReaderReaderResourceTippingConfig option
    }
    with
        static member New (?skipTipping: bool, ?tipping: TerminalReaderReaderResourceTippingConfig) =
            {
                TerminalReaderReaderResourceProcessConfig.SkipTipping = skipTipping
                TerminalReaderReaderResourceProcessConfig.Tipping = tipping
            }

    ///Represents a reader action to process a payment intent
    and TerminalReaderReaderResourceProcessPaymentIntentAction = {
        ///Most recent PaymentIntent processed by the reader.
        PaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentActionPaymentIntent'AnyOf
        ProcessConfig: TerminalReaderReaderResourceProcessConfig option
    }
    with
        static member New (paymentIntent: TerminalReaderReaderResourceProcessPaymentIntentActionPaymentIntent'AnyOf, ?processConfig: TerminalReaderReaderResourceProcessConfig) =
            {
                TerminalReaderReaderResourceProcessPaymentIntentAction.PaymentIntent = paymentIntent //required
                TerminalReaderReaderResourceProcessPaymentIntentAction.ProcessConfig = processConfig
            }

    and TerminalReaderReaderResourceProcessPaymentIntentActionPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    ///Represents a per-setup override of a reader configuration
    and TerminalReaderReaderResourceProcessSetupConfig = {
        ///Represents a per-setup override of a reader configuration
        TerminalReaderReaderResourceProcessSetupConfig: string option
    }
    with
        static member New (?terminalReaderReaderResourceProcessSetupConfig: string option) =
            {
                TerminalReaderReaderResourceProcessSetupConfig.TerminalReaderReaderResourceProcessSetupConfig = terminalReaderReaderResourceProcessSetupConfig |> Option.flatten
            }

    ///Represents a reader action to process a setup intent
    and TerminalReaderReaderResourceProcessSetupIntentAction = {
        ///ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
        GeneratedCard: string option
        ProcessConfig: TerminalReaderReaderResourceProcessSetupConfig option
        ///Most recent SetupIntent processed by the reader.
        SetupIntent: TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent'AnyOf
    }
    with
        static member New (setupIntent: TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent'AnyOf, ?generatedCard: string, ?processConfig: TerminalReaderReaderResourceProcessSetupConfig) =
            {
                TerminalReaderReaderResourceProcessSetupIntentAction.SetupIntent = setupIntent //required
                TerminalReaderReaderResourceProcessSetupIntentAction.GeneratedCard = generatedCard
                TerminalReaderReaderResourceProcessSetupIntentAction.ProcessConfig = processConfig
            }

    and TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent'AnyOf =
        | String of string
        | SetupIntent of SetupIntent

    ///Represents an action performed by the reader
    and TerminalReaderReaderResourceReaderAction = {
        ///Failure code, only set if status is `failed`.
        FailureCode: string option
        ///Detailed failure message, only set if status is `failed`.
        FailureMessage: string option
        ProcessPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction option
        ProcessSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction option
        RefundPayment: TerminalReaderReaderResourceRefundPaymentAction option
        SetReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction option
        ///Status of the action performed by the reader.
        Status: TerminalReaderReaderResourceReaderActionStatus
        ///Type of action performed by the reader.
        Type: TerminalReaderReaderResourceReaderActionType
    }
    with
        static member New (failureCode: string option, failureMessage: string option, status: TerminalReaderReaderResourceReaderActionStatus, ``type``: TerminalReaderReaderResourceReaderActionType, ?processPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction, ?processSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction, ?refundPayment: TerminalReaderReaderResourceRefundPaymentAction, ?setReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction) =
            {
                TerminalReaderReaderResourceReaderAction.FailureCode = failureCode //required
                TerminalReaderReaderResourceReaderAction.FailureMessage = failureMessage //required
                TerminalReaderReaderResourceReaderAction.Status = status //required
                TerminalReaderReaderResourceReaderAction.Type = ``type`` //required
                TerminalReaderReaderResourceReaderAction.ProcessPaymentIntent = processPaymentIntent
                TerminalReaderReaderResourceReaderAction.ProcessSetupIntent = processSetupIntent
                TerminalReaderReaderResourceReaderAction.RefundPayment = refundPayment
                TerminalReaderReaderResourceReaderAction.SetReaderDisplay = setReaderDisplay
            }

    and TerminalReaderReaderResourceReaderActionStatus =
        | Failed
        | InProgress
        | Succeeded

    and TerminalReaderReaderResourceReaderActionType =
        | ProcessPaymentIntent
        | ProcessSetupIntent
        | RefundPayment
        | SetReaderDisplay

    ///Represents a reader action to refund a payment
    and TerminalReaderReaderResourceRefundPaymentAction = {
        ///The amount being refunded.
        Amount: int option
        ///Charge that is being refunded.
        Charge: TerminalReaderReaderResourceRefundPaymentActionCharge'AnyOf option
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///Payment intent that is being refunded.
        PaymentIntent: TerminalReaderReaderResourceRefundPaymentActionPaymentIntent'AnyOf option
        ///The reason for the refund.
        Reason: TerminalReaderReaderResourceRefundPaymentActionReason option
        ///Unique identifier for the refund object.
        Refund: TerminalReaderReaderResourceRefundPaymentActionRefund'AnyOf option
        ///Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
        RefundApplicationFee: bool option
        ///Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
        ReverseTransfer: bool option
    }
    with
        static member New (?amount: int, ?charge: TerminalReaderReaderResourceRefundPaymentActionCharge'AnyOf, ?metadata: Map<string, string>, ?paymentIntent: TerminalReaderReaderResourceRefundPaymentActionPaymentIntent'AnyOf, ?reason: TerminalReaderReaderResourceRefundPaymentActionReason, ?refund: TerminalReaderReaderResourceRefundPaymentActionRefund'AnyOf, ?refundApplicationFee: bool, ?reverseTransfer: bool) =
            {
                TerminalReaderReaderResourceRefundPaymentAction.Amount = amount
                TerminalReaderReaderResourceRefundPaymentAction.Charge = charge
                TerminalReaderReaderResourceRefundPaymentAction.Metadata = metadata
                TerminalReaderReaderResourceRefundPaymentAction.PaymentIntent = paymentIntent
                TerminalReaderReaderResourceRefundPaymentAction.Reason = reason
                TerminalReaderReaderResourceRefundPaymentAction.Refund = refund
                TerminalReaderReaderResourceRefundPaymentAction.RefundApplicationFee = refundApplicationFee
                TerminalReaderReaderResourceRefundPaymentAction.ReverseTransfer = reverseTransfer
            }

    and TerminalReaderReaderResourceRefundPaymentActionCharge'AnyOf =
        | String of string
        | Charge of Charge

    and TerminalReaderReaderResourceRefundPaymentActionPaymentIntent'AnyOf =
        | String of string
        | PaymentIntent of PaymentIntent

    and TerminalReaderReaderResourceRefundPaymentActionReason =
        | Duplicate
        | Fraudulent
        | RequestedByCustomer

    and TerminalReaderReaderResourceRefundPaymentActionRefund'AnyOf =
        | String of string
        | Refund of Refund

    ///Represents a reader action to set the reader display
    and TerminalReaderReaderResourceSetReaderDisplayAction = {
        ///Cart object to be displayed by the reader.
        Cart: TerminalReaderReaderResourceCart option
    }
    with
        ///Type of information to be displayed by the reader.
        member _.Type = "cart"

        static member New (cart: TerminalReaderReaderResourceCart option) =
            {
                TerminalReaderReaderResourceSetReaderDisplayAction.Cart = cart //required
            }

    ///Represents a per-transaction tipping configuration
    and TerminalReaderReaderResourceTippingConfig = {
        ///Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency).
        AmountEligible: int option
    }
    with
        static member New (?amountEligible: int) =
            {
                TerminalReaderReaderResourceTippingConfig.AmountEligible = amountEligible
            }

    ///A test clock enables deterministic control over objects in testmode. With a test clock, you can create
    ///objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
    ///you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
    and TestHelpersTestClock = {
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Time at which this clock is scheduled to auto delete.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]DeletesAfter: DateTime
        ///Time at which all objects belonging to this clock are frozen.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]FrozenTime: DateTime
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The custom name supplied at creation.
        Name: string option
        ///The status of the Test Clock.
        Status: TestHelpersTestClockStatus
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "test_helpers.test_clock"

        static member New (created: DateTime, deletesAfter: DateTime, frozenTime: DateTime, id: string, livemode: bool, name: string option, status: TestHelpersTestClockStatus) =
            {
                TestHelpersTestClock.Created = created //required
                TestHelpersTestClock.DeletesAfter = deletesAfter //required
                TestHelpersTestClock.FrozenTime = frozenTime //required
                TestHelpersTestClock.Id = id //required
                TestHelpersTestClock.Livemode = livemode //required
                TestHelpersTestClock.Name = name //required
                TestHelpersTestClock.Status = status //required
            }

    and TestHelpersTestClockStatus =
        | Advancing
        | InternalFailure
        | Ready

    and ThreeDSecureDetails = {
        ///For authenticated transactions: how the customer was authenticated by
        ///the issuing bank.
        AuthenticationFlow: ThreeDSecureDetailsAuthenticationFlow option
        ///Indicates the outcome of 3D Secure authentication.
        Result: ThreeDSecureDetailsResult option
        ///Additional information about why 3D Secure succeeded or failed based
        ///on the `result`.
        ResultReason: ThreeDSecureDetailsResultReason option
        ///The version of 3D Secure that was used.
        Version: ThreeDSecureDetailsVersion option
    }
    with
        static member New (authenticationFlow: ThreeDSecureDetailsAuthenticationFlow option, result: ThreeDSecureDetailsResult option, resultReason: ThreeDSecureDetailsResultReason option, version: ThreeDSecureDetailsVersion option) =
            {
                ThreeDSecureDetails.AuthenticationFlow = authenticationFlow //required
                ThreeDSecureDetails.Result = result //required
                ThreeDSecureDetails.ResultReason = resultReason //required
                ThreeDSecureDetails.Version = version //required
            }

    and ThreeDSecureDetailsAuthenticationFlow =
        | Challenge
        | Frictionless

    and ThreeDSecureDetailsResult =
        | AttemptAcknowledged
        | Authenticated
        | Exempted
        | Failed
        | NotSupported
        | ProcessingError

    and ThreeDSecureDetailsResultReason =
        | Abandoned
        | Bypassed
        | Canceled
        | CardNotEnrolled
        | NetworkNotSupported
        | ProtocolError
        | Rejected

    and ThreeDSecureDetailsVersion =
        | [<JsonUnionCase("1.0.2")>] Numeric102
        | [<JsonUnionCase("2.1.0")>] Numeric210
        | [<JsonUnionCase("2.2.0")>] Numeric220

    and ThreeDSecureDetailsCharge = {
        ///For authenticated transactions: how the customer was authenticated by
        ///the issuing bank.
        AuthenticationFlow: ThreeDSecureDetailsChargeAuthenticationFlow option
        ///Indicates the outcome of 3D Secure authentication.
        Result: ThreeDSecureDetailsChargeResult option
        ///Additional information about why 3D Secure succeeded or failed based
        ///on the `result`.
        ResultReason: ThreeDSecureDetailsChargeResultReason option
        ///The version of 3D Secure that was used.
        Version: ThreeDSecureDetailsChargeVersion option
    }
    with
        static member New (authenticationFlow: ThreeDSecureDetailsChargeAuthenticationFlow option, result: ThreeDSecureDetailsChargeResult option, resultReason: ThreeDSecureDetailsChargeResultReason option, version: ThreeDSecureDetailsChargeVersion option) =
            {
                ThreeDSecureDetailsCharge.AuthenticationFlow = authenticationFlow //required
                ThreeDSecureDetailsCharge.Result = result //required
                ThreeDSecureDetailsCharge.ResultReason = resultReason //required
                ThreeDSecureDetailsCharge.Version = version //required
            }

    and ThreeDSecureDetailsChargeAuthenticationFlow =
        | Challenge
        | Frictionless

    and ThreeDSecureDetailsChargeResult =
        | AttemptAcknowledged
        | Authenticated
        | Exempted
        | Failed
        | NotSupported
        | ProcessingError

    and ThreeDSecureDetailsChargeResultReason =
        | Abandoned
        | Bypassed
        | Canceled
        | CardNotEnrolled
        | NetworkNotSupported
        | ProtocolError
        | Rejected

    and ThreeDSecureDetailsChargeVersion =
        | [<JsonUnionCase("1.0.2")>] Numeric102
        | [<JsonUnionCase("2.1.0")>] Numeric210
        | [<JsonUnionCase("2.2.0")>] Numeric220

    and ThreeDSecureUsage = {
        ///Whether 3D Secure is supported on this card.
        Supported: bool
    }
    with
        static member New (supported: bool) =
            {
                ThreeDSecureUsage.Supported = supported //required
            }

    ///Tokenization is the process Stripe uses to collect sensitive card or bank
    ///account details, or personally identifiable information (PII), directly from
    ///your customers in a secure manner. A token representing this information is
    ///returned to your server to use. You should use our
    ///[recommended payments integrations](https://stripe.com/docs/payments) to perform this process
    ///client-side. This ensures that no sensitive card data touches your server,
    ///and allows your integration to operate in a PCI-compliant way.
    ///If you cannot use client-side tokenization, you can also create tokens using
    ///the API with either your publishable or secret API key. Keep in mind that if
    ///your integration uses this method, you are responsible for any PCI compliance
    ///that may be required, and you must keep your secret API key safe. Unlike with
    ///client-side tokenization, your customer's information is not sent directly to
    ///Stripe, so we cannot determine how it is handled or stored.
    ///Tokens cannot be stored or used more than once. To store card or bank account
    ///information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
    ///objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
    ///[Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
    ///performs best with integrations that use client-side tokenization.
    and Token = {
        BankAccount: BankAccount option
        Card: Card option
        ///IP address of the client that generated the token.
        ClientIp: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Type of the token: `account`, `bank_account`, `card`, or `pii`.
        Type: TokenType
        ///Whether this token has already been used (tokens can be used only once).
        Used: bool
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "token"

        static member New (clientIp: string option, created: DateTime, id: string, livemode: bool, ``type``: TokenType, used: bool, ?bankAccount: BankAccount, ?card: Card) =
            {
                Token.ClientIp = clientIp //required
                Token.Created = created //required
                Token.Id = id //required
                Token.Livemode = livemode //required
                Token.Type = ``type`` //required
                Token.Used = used //required
                Token.BankAccount = bankAccount
                Token.Card = card
            }

    and TokenType =
        | Account
        | BankAccount
        | Card
        | Pii

    ///To top up your Stripe balance, you create a top-up object. You can retrieve
    ///individual top-ups, as well as list all top-ups. Top-ups are identified by a
    ///unique, random ID.
    ///Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
    and Topup = {
        ///Amount transferred.
        Amount: int
        ///ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
        BalanceTransaction: TopupBalanceTransaction'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
        ExpectedAvailabilityDate: int option
        ///Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
        FailureCode: string option
        ///Message to user further explaining reason for top-up failure if available.
        FailureMessage: string option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///For most Stripe users, the source of every top-up is a bank account. This hash is then the [source object](https://stripe.com/docs/api#source_object) describing that bank account.
        Source: Source option
        ///Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
        StatementDescriptor: string option
        ///The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
        Status: TopupStatus
        ///A string that identifies this top-up as part of a group.
        TransferGroup: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "topup"

        static member New (amount: int, balanceTransaction: TopupBalanceTransaction'AnyOf option, created: DateTime, currency: string, description: string option, expectedAvailabilityDate: int option, failureCode: string option, failureMessage: string option, id: string, livemode: bool, metadata: Map<string, string>, source: Source option, statementDescriptor: string option, status: TopupStatus, transferGroup: string option) =
            {
                Topup.Amount = amount //required
                Topup.BalanceTransaction = balanceTransaction //required
                Topup.Created = created //required
                Topup.Currency = currency //required
                Topup.Description = description //required
                Topup.ExpectedAvailabilityDate = expectedAvailabilityDate //required
                Topup.FailureCode = failureCode //required
                Topup.FailureMessage = failureMessage //required
                Topup.Id = id //required
                Topup.Livemode = livemode //required
                Topup.Metadata = metadata //required
                Topup.Source = source //required
                Topup.StatementDescriptor = statementDescriptor //required
                Topup.Status = status //required
                Topup.TransferGroup = transferGroup //required
            }

    and TopupBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and TopupStatus =
        | Canceled
        | Failed
        | Pending
        | Reversed
        | Succeeded

    ///A `Transfer` object is created when you move funds between Stripe accounts as
    ///part of Connect.
    ///Before April 6, 2017, transfers also represented movement of funds from a
    ///Stripe account to a card or bank account. This behavior has since been split
    ///out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
    ///information, read about the
    ///[transfer/payout split](https://stripe.com/docs/transfer-payout-split).
    ///Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
    and Transfer = {
        ///Amount in cents (or local equivalent) to be transferred.
        Amount: int
        ///Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
        AmountReversed: int
        ///Balance transaction that describes the impact of this transfer on your account balance.
        BalanceTransaction: TransferBalanceTransaction'AnyOf option
        ///Time that this record of the transfer was first created.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///ID of the Stripe account the transfer was sent to.
        Destination: TransferDestination'AnyOf option
        ///If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
        DestinationPayment: TransferDestinationPayment'AnyOf option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///A list of reversals that have been applied to the transfer.
        Reversals: TransferReversals
        ///Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
        Reversed: bool
        ///ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
        SourceTransaction: TransferSourceTransaction'AnyOf option
        ///The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
        SourceType: TransferSourceType option
        ///A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
        TransferGroup: string option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "transfer"

        static member New (amount: int, amountReversed: int, balanceTransaction: TransferBalanceTransaction'AnyOf option, created: DateTime, currency: string, description: string option, destination: TransferDestination'AnyOf option, id: string, livemode: bool, metadata: Map<string, string>, reversals: TransferReversals, reversed: bool, sourceTransaction: TransferSourceTransaction'AnyOf option, transferGroup: string option, ?destinationPayment: TransferDestinationPayment'AnyOf, ?sourceType: TransferSourceType) =
            {
                Transfer.Amount = amount //required
                Transfer.AmountReversed = amountReversed //required
                Transfer.BalanceTransaction = balanceTransaction //required
                Transfer.Created = created //required
                Transfer.Currency = currency //required
                Transfer.Description = description //required
                Transfer.Destination = destination //required
                Transfer.Id = id //required
                Transfer.Livemode = livemode //required
                Transfer.Metadata = metadata //required
                Transfer.Reversals = reversals //required
                Transfer.Reversed = reversed //required
                Transfer.SourceTransaction = sourceTransaction //required
                Transfer.TransferGroup = transferGroup //required
                Transfer.DestinationPayment = destinationPayment
                Transfer.SourceType = sourceType
            }

    and TransferBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and TransferDestination'AnyOf =
        | String of string
        | Account of Account

    and TransferDestinationPayment'AnyOf =
        | String of string
        | Charge of Charge

    and TransferSourceTransaction'AnyOf =
        | String of string
        | Charge of Charge

    and TransferSourceType =
        | Card
        | Fpx
        | BankAccount

    ///A list of reversals that have been applied to the transfer.
    and TransferReversals = {
        ///Details about each object.
        Data: TransferReversal list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: TransferReversal list, hasMore: bool, url: string) =
            {
                TransferReversals.Data = data //required
                TransferReversals.HasMore = hasMore //required
                TransferReversals.Url = url //required
            }

    and TransferData = {
        ///Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
        Amount: int option
        ///The account (if any) the payment will be attributed to for tax
        ///reporting, and where funds from the payment will be transferred to upon
        ///payment success.
        Destination: TransferDataDestination'AnyOf
    }
    with
        static member New (destination: TransferDataDestination'AnyOf, ?amount: int) =
            {
                TransferData.Destination = destination //required
                TransferData.Amount = amount
            }

    and TransferDataDestination'AnyOf =
        | String of string
        | Account of Account

    ///[Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
    ///connected account, either entirely or partially, and can also specify whether
    ///to refund any related application fees. Transfer reversals add to the
    ///platform's balance and subtract from the destination account's balance.
    ///Reversing a transfer that was made for a [destination
    ///charge](/docs/connect/destination-charges) is allowed only up to the amount of
    ///the charge. It is possible to reverse a
    ///[transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
    ///transfer only if the destination account has enough balance to cover the
    ///reversal.
    ///Related guide: [Reversing transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reversing-transfers)
    and TransferReversal = {
        ///Amount, in cents (or local equivalent).
        Amount: int
        ///Balance transaction that describes the impact on your account balance.
        BalanceTransaction: TransferReversalBalanceTransaction'AnyOf option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///Linked payment refund for the transfer reversal.
        DestinationPaymentRefund: TransferReversalDestinationPaymentRefund'AnyOf option
        ///Unique identifier for the object.
        Id: string
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///ID of the refund responsible for the transfer reversal.
        SourceRefund: TransferReversalSourceRefund'AnyOf option
        ///ID of the transfer that was reversed.
        Transfer: TransferReversalTransfer'AnyOf
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "transfer_reversal"

        static member New (amount: int, balanceTransaction: TransferReversalBalanceTransaction'AnyOf option, created: DateTime, currency: string, destinationPaymentRefund: TransferReversalDestinationPaymentRefund'AnyOf option, id: string, metadata: Map<string, string> option, sourceRefund: TransferReversalSourceRefund'AnyOf option, transfer: TransferReversalTransfer'AnyOf) =
            {
                TransferReversal.Amount = amount //required
                TransferReversal.BalanceTransaction = balanceTransaction //required
                TransferReversal.Created = created //required
                TransferReversal.Currency = currency //required
                TransferReversal.DestinationPaymentRefund = destinationPaymentRefund //required
                TransferReversal.Id = id //required
                TransferReversal.Metadata = metadata //required
                TransferReversal.SourceRefund = sourceRefund //required
                TransferReversal.Transfer = transfer //required
            }

    and TransferReversalBalanceTransaction'AnyOf =
        | String of string
        | BalanceTransaction of BalanceTransaction

    and TransferReversalDestinationPaymentRefund'AnyOf =
        | String of string
        | Refund of Refund

    and TransferReversalSourceRefund'AnyOf =
        | String of string
        | Refund of Refund

    and TransferReversalTransfer'AnyOf =
        | String of string
        | Transfer of Transfer

    and TransferSchedule = {
        ///The number of days charges for the account will be held before being paid out.
        DelayDays: int
        ///How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
        Interval: TransferScheduleInterval
        ///The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
        MonthlyAnchor: int option
        ///The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
        WeeklyAnchor: string option
    }
    with
        static member New (delayDays: int, interval: TransferScheduleInterval, ?monthlyAnchor: int, ?weeklyAnchor: string) =
            {
                TransferSchedule.DelayDays = delayDays //required
                TransferSchedule.Interval = interval //required
                TransferSchedule.MonthlyAnchor = monthlyAnchor
                TransferSchedule.WeeklyAnchor = weeklyAnchor
            }

    and TransferScheduleInterval =
        | Manual
        | Daily
        | Weekly
        | Monthly

    and TransformQuantity = {
        ///Divide usage by this number.
        DivideBy: int
        ///After division, either round the result `up` or `down`.
        Round: TransformQuantityRound
    }
    with
        static member New (divideBy: int, round: TransformQuantityRound) =
            {
                TransformQuantity.DivideBy = divideBy //required
                TransformQuantity.Round = round //required
            }

    and TransformQuantityRound =
        | Down
        | Up

    and TransformUsage = {
        ///Divide usage by this number.
        DivideBy: int
        ///After division, either round the result `up` or `down`.
        Round: TransformUsageRound
    }
    with
        static member New (divideBy: int, round: TransformUsageRound) =
            {
                TransformUsage.DivideBy = divideBy //required
                TransformUsage.Round = round //required
            }

    and TransformUsageRound =
        | Down
        | Up

    ///You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
    and TreasuryCreditReversal = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The FinancialAccount to reverse funds from.
        FinancialAccount: string
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The rails used to reverse the funds.
        Network: TreasuryCreditReversalNetwork
        ///The ReceivedCredit being reversed.
        ReceivedCredit: string
        ///Status of the CreditReversal
        Status: TreasuryCreditReversalStatus
        StatusTransitions: TreasuryReceivedCreditsResourceStatusTransitions
        ///The Transaction associated with this object.
        Transaction: TreasuryCreditReversalTransaction'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.credit_reversal"

        static member New (amount: int, created: DateTime, currency: string, financialAccount: string, hostedRegulatoryReceiptUrl: string option, id: string, livemode: bool, metadata: Map<string, string>, network: TreasuryCreditReversalNetwork, receivedCredit: string, status: TreasuryCreditReversalStatus, statusTransitions: TreasuryReceivedCreditsResourceStatusTransitions, transaction: TreasuryCreditReversalTransaction'AnyOf option) =
            {
                TreasuryCreditReversal.Amount = amount //required
                TreasuryCreditReversal.Created = created //required
                TreasuryCreditReversal.Currency = currency //required
                TreasuryCreditReversal.FinancialAccount = financialAccount //required
                TreasuryCreditReversal.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryCreditReversal.Id = id //required
                TreasuryCreditReversal.Livemode = livemode //required
                TreasuryCreditReversal.Metadata = metadata //required
                TreasuryCreditReversal.Network = network //required
                TreasuryCreditReversal.ReceivedCredit = receivedCredit //required
                TreasuryCreditReversal.Status = status //required
                TreasuryCreditReversal.StatusTransitions = statusTransitions //required
                TreasuryCreditReversal.Transaction = transaction //required
            }

    and TreasuryCreditReversalNetwork =
        | Ach
        | Stripe

    and TreasuryCreditReversalStatus =
        | Canceled
        | Posted
        | Processing

    and TreasuryCreditReversalTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
    and TreasuryDebitReversal = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///The FinancialAccount to reverse funds from.
        FinancialAccount: string option
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        ///Other flows linked to a DebitReversal.
        LinkedFlows: TreasuryReceivedDebitsResourceDebitReversalLinkedFlows option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The rails used to reverse the funds.
        Network: TreasuryDebitReversalNetwork
        ///The ReceivedDebit being reversed.
        ReceivedDebit: string
        ///Status of the DebitReversal
        Status: TreasuryDebitReversalStatus
        StatusTransitions: TreasuryReceivedDebitsResourceStatusTransitions
        ///The Transaction associated with this object.
        Transaction: TreasuryDebitReversalTransaction'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.debit_reversal"

        static member New (amount: int, created: DateTime, currency: string, financialAccount: string option, hostedRegulatoryReceiptUrl: string option, id: string, linkedFlows: TreasuryReceivedDebitsResourceDebitReversalLinkedFlows option, livemode: bool, metadata: Map<string, string>, network: TreasuryDebitReversalNetwork, receivedDebit: string, status: TreasuryDebitReversalStatus, statusTransitions: TreasuryReceivedDebitsResourceStatusTransitions, transaction: TreasuryDebitReversalTransaction'AnyOf option) =
            {
                TreasuryDebitReversal.Amount = amount //required
                TreasuryDebitReversal.Created = created //required
                TreasuryDebitReversal.Currency = currency //required
                TreasuryDebitReversal.FinancialAccount = financialAccount //required
                TreasuryDebitReversal.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryDebitReversal.Id = id //required
                TreasuryDebitReversal.LinkedFlows = linkedFlows //required
                TreasuryDebitReversal.Livemode = livemode //required
                TreasuryDebitReversal.Metadata = metadata //required
                TreasuryDebitReversal.Network = network //required
                TreasuryDebitReversal.ReceivedDebit = receivedDebit //required
                TreasuryDebitReversal.Status = status //required
                TreasuryDebitReversal.StatusTransitions = statusTransitions //required
                TreasuryDebitReversal.Transaction = transaction //required
            }

    and TreasuryDebitReversalNetwork =
        | Ach
        | Card

    and TreasuryDebitReversalStatus =
        | Failed
        | Processing
        | Succeeded

    and TreasuryDebitReversalTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
    ///FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.
    and TreasuryFinancialAccount = {
        ///The array of paths to active Features in the Features hash.
        ActiveFeatures: TreasuryFinancialAccountActiveFeatures list option
        Balance: TreasuryFinancialAccountsResourceBalance
        ///Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
        Country: string
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        Features: TreasuryFinancialAccountFeatures option
        ///The set of credentials that resolve to a FinancialAccount.
        FinancialAddresses: TreasuryFinancialAccountsResourceFinancialAddress list
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string> option
        ///The array of paths to pending Features in the Features hash.
        PendingFeatures: TreasuryFinancialAccountPendingFeatures list option
        ///The set of functionalities that the platform can restrict on the FinancialAccount.
        PlatformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictions option
        ///The array of paths to restricted Features in the Features hash.
        RestrictedFeatures: TreasuryFinancialAccountRestrictedFeatures list option
        ///The enum specifying what state the account is in.
        Status: TreasuryFinancialAccountStatus
        StatusDetails: TreasuryFinancialAccountsResourceStatusDetails
        ///The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
        SupportedCurrencies: string list
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.financial_account"

        static member New (balance: TreasuryFinancialAccountsResourceBalance, country: string, created: DateTime, financialAddresses: TreasuryFinancialAccountsResourceFinancialAddress list, id: string, livemode: bool, metadata: Map<string, string> option, status: TreasuryFinancialAccountStatus, statusDetails: TreasuryFinancialAccountsResourceStatusDetails, supportedCurrencies: string list, ?activeFeatures: TreasuryFinancialAccountActiveFeatures list, ?features: TreasuryFinancialAccountFeatures, ?pendingFeatures: TreasuryFinancialAccountPendingFeatures list, ?platformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictions option, ?restrictedFeatures: TreasuryFinancialAccountRestrictedFeatures list) =
            {
                TreasuryFinancialAccount.Balance = balance //required
                TreasuryFinancialAccount.Country = country //required
                TreasuryFinancialAccount.Created = created //required
                TreasuryFinancialAccount.FinancialAddresses = financialAddresses //required
                TreasuryFinancialAccount.Id = id //required
                TreasuryFinancialAccount.Livemode = livemode //required
                TreasuryFinancialAccount.Metadata = metadata //required
                TreasuryFinancialAccount.Status = status //required
                TreasuryFinancialAccount.StatusDetails = statusDetails //required
                TreasuryFinancialAccount.SupportedCurrencies = supportedCurrencies //required
                TreasuryFinancialAccount.ActiveFeatures = activeFeatures
                TreasuryFinancialAccount.Features = features
                TreasuryFinancialAccount.PendingFeatures = pendingFeatures
                TreasuryFinancialAccount.PlatformRestrictions = platformRestrictions |> Option.flatten
                TreasuryFinancialAccount.RestrictedFeatures = restrictedFeatures
            }

    and TreasuryFinancialAccountStatus =
        | Closed
        | Open

    and TreasuryFinancialAccountActiveFeatures =
        | CardIssuing
        | DepositInsurance
        | [<JsonUnionCase("financial_addresses.aba")>] FinancialAddressesAba
        | [<JsonUnionCase("inbound_transfers.ach")>] InboundTransfersAch
        | IntraStripeFlows
        | [<JsonUnionCase("outbound_payments.ach")>] OutboundPaymentsAch
        | [<JsonUnionCase("outbound_payments.us_domestic_wire")>] OutboundPaymentsUsDomesticWire
        | [<JsonUnionCase("outbound_transfers.ach")>] OutboundTransfersAch
        | [<JsonUnionCase("outbound_transfers.us_domestic_wire")>] OutboundTransfersUsDomesticWire
        | RemoteDepositCapture

    and TreasuryFinancialAccountPendingFeatures =
        | CardIssuing
        | DepositInsurance
        | [<JsonUnionCase("financial_addresses.aba")>] FinancialAddressesAba
        | [<JsonUnionCase("inbound_transfers.ach")>] InboundTransfersAch
        | IntraStripeFlows
        | [<JsonUnionCase("outbound_payments.ach")>] OutboundPaymentsAch
        | [<JsonUnionCase("outbound_payments.us_domestic_wire")>] OutboundPaymentsUsDomesticWire
        | [<JsonUnionCase("outbound_transfers.ach")>] OutboundTransfersAch
        | [<JsonUnionCase("outbound_transfers.us_domestic_wire")>] OutboundTransfersUsDomesticWire
        | RemoteDepositCapture

    and TreasuryFinancialAccountRestrictedFeatures =
        | CardIssuing
        | DepositInsurance
        | [<JsonUnionCase("financial_addresses.aba")>] FinancialAddressesAba
        | [<JsonUnionCase("inbound_transfers.ach")>] InboundTransfersAch
        | IntraStripeFlows
        | [<JsonUnionCase("outbound_payments.ach")>] OutboundPaymentsAch
        | [<JsonUnionCase("outbound_payments.us_domestic_wire")>] OutboundPaymentsUsDomesticWire
        | [<JsonUnionCase("outbound_transfers.ach")>] OutboundTransfersAch
        | [<JsonUnionCase("outbound_transfers.us_domestic_wire")>] OutboundTransfersUsDomesticWire
        | RemoteDepositCapture

    ///Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
    ///Stripe or the platform can control Features via the requested field.
    and TreasuryFinancialAccountFeatures = {
        CardIssuing: TreasuryFinancialAccountsResourceToggleSettings option
        DepositInsurance: TreasuryFinancialAccountsResourceToggleSettings option
        FinancialAddresses: TreasuryFinancialAccountsResourceFinancialAddressesFeatures option
        InboundTransfers: TreasuryFinancialAccountsResourceInboundTransfers option
        IntraStripeFlows: TreasuryFinancialAccountsResourceToggleSettings option
        OutboundPayments: TreasuryFinancialAccountsResourceOutboundPayments option
        OutboundTransfers: TreasuryFinancialAccountsResourceOutboundTransfers option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.financial_account_features"

        static member New (?cardIssuing: TreasuryFinancialAccountsResourceToggleSettings, ?depositInsurance: TreasuryFinancialAccountsResourceToggleSettings, ?financialAddresses: TreasuryFinancialAccountsResourceFinancialAddressesFeatures, ?inboundTransfers: TreasuryFinancialAccountsResourceInboundTransfers, ?intraStripeFlows: TreasuryFinancialAccountsResourceToggleSettings, ?outboundPayments: TreasuryFinancialAccountsResourceOutboundPayments, ?outboundTransfers: TreasuryFinancialAccountsResourceOutboundTransfers) =
            {
                TreasuryFinancialAccountFeatures.CardIssuing = cardIssuing
                TreasuryFinancialAccountFeatures.DepositInsurance = depositInsurance
                TreasuryFinancialAccountFeatures.FinancialAddresses = financialAddresses
                TreasuryFinancialAccountFeatures.InboundTransfers = inboundTransfers
                TreasuryFinancialAccountFeatures.IntraStripeFlows = intraStripeFlows
                TreasuryFinancialAccountFeatures.OutboundPayments = outboundPayments
                TreasuryFinancialAccountFeatures.OutboundTransfers = outboundTransfers
            }

    ///Use [InboundTransfers](https://stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
    and TreasuryInboundTransfer = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Returns `true` if the InboundTransfer is able to be canceled.
        Cancelable: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///Details about this InboundTransfer's failure. Only set when status is `failed`.
        FailureDetails: TreasuryInboundTransfersResourceFailureDetails option
        ///The FinancialAccount that received the funds.
        FinancialAccount: string
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        LinkedFlows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The origin payment method to be debited for an InboundTransfer.
        OriginPaymentMethod: string
        ///Details about the PaymentMethod for an InboundTransfer.
        OriginPaymentMethodDetails: InboundTransfers option
        ///Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.
        Returned: bool option
        ///Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.
        StatementDescriptor: string
        ///Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.
        Status: TreasuryInboundTransferStatus
        StatusTransitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions
        ///The Transaction associated with this object.
        Transaction: TreasuryInboundTransferTransaction'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.inbound_transfer"

        static member New (amount: int, cancelable: bool, created: DateTime, currency: string, description: string option, failureDetails: TreasuryInboundTransfersResourceFailureDetails option, financialAccount: string, hostedRegulatoryReceiptUrl: string option, id: string, linkedFlows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows, livemode: bool, metadata: Map<string, string>, originPaymentMethod: string, originPaymentMethodDetails: InboundTransfers option, returned: bool option, statementDescriptor: string, status: TreasuryInboundTransferStatus, statusTransitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions, transaction: TreasuryInboundTransferTransaction'AnyOf option) =
            {
                TreasuryInboundTransfer.Amount = amount //required
                TreasuryInboundTransfer.Cancelable = cancelable //required
                TreasuryInboundTransfer.Created = created //required
                TreasuryInboundTransfer.Currency = currency //required
                TreasuryInboundTransfer.Description = description //required
                TreasuryInboundTransfer.FailureDetails = failureDetails //required
                TreasuryInboundTransfer.FinancialAccount = financialAccount //required
                TreasuryInboundTransfer.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryInboundTransfer.Id = id //required
                TreasuryInboundTransfer.LinkedFlows = linkedFlows //required
                TreasuryInboundTransfer.Livemode = livemode //required
                TreasuryInboundTransfer.Metadata = metadata //required
                TreasuryInboundTransfer.OriginPaymentMethod = originPaymentMethod //required
                TreasuryInboundTransfer.OriginPaymentMethodDetails = originPaymentMethodDetails //required
                TreasuryInboundTransfer.Returned = returned //required
                TreasuryInboundTransfer.StatementDescriptor = statementDescriptor //required
                TreasuryInboundTransfer.Status = status //required
                TreasuryInboundTransfer.StatusTransitions = statusTransitions //required
                TreasuryInboundTransfer.Transaction = transaction //required
            }

    and TreasuryInboundTransferStatus =
        | Canceled
        | Failed
        | Processing
        | Succeeded

    and TreasuryInboundTransferTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///Use OutboundPayments to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
    ///Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
    and TreasuryOutboundPayment = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Returns `true` if the object can be canceled, and `false` otherwise.
        Cancelable: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent.
        Customer: string option
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.
        DestinationPaymentMethod: string option
        ///Details about the PaymentMethod for an OutboundPayment.
        DestinationPaymentMethodDetails: OutboundPaymentsPaymentMethodDetails option
        ///Details about the end user.
        EndUserDetails: TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails option
        ///The date when funds are expected to arrive in the destination account.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpectedArrivalDate: DateTime
        ///The FinancialAccount that funds were pulled from.
        FinancialAccount: string
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Details about a returned OutboundPayment. Only set when the status is `returned`.
        ReturnedDetails: TreasuryOutboundPaymentsResourceReturnedStatus option
        ///The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).
        StatementDescriptor: string
        ///Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.
        Status: TreasuryOutboundPaymentStatus
        StatusTransitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions
        ///The Transaction associated with this object.
        Transaction: TreasuryOutboundPaymentTransaction'AnyOf
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.outbound_payment"

        static member New (amount: int, cancelable: bool, created: DateTime, currency: string, customer: string option, description: string option, destinationPaymentMethod: string option, destinationPaymentMethodDetails: OutboundPaymentsPaymentMethodDetails option, endUserDetails: TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails option, expectedArrivalDate: DateTime, financialAccount: string, hostedRegulatoryReceiptUrl: string option, id: string, livemode: bool, metadata: Map<string, string>, returnedDetails: TreasuryOutboundPaymentsResourceReturnedStatus option, statementDescriptor: string, status: TreasuryOutboundPaymentStatus, statusTransitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions, transaction: TreasuryOutboundPaymentTransaction'AnyOf) =
            {
                TreasuryOutboundPayment.Amount = amount //required
                TreasuryOutboundPayment.Cancelable = cancelable //required
                TreasuryOutboundPayment.Created = created //required
                TreasuryOutboundPayment.Currency = currency //required
                TreasuryOutboundPayment.Customer = customer //required
                TreasuryOutboundPayment.Description = description //required
                TreasuryOutboundPayment.DestinationPaymentMethod = destinationPaymentMethod //required
                TreasuryOutboundPayment.DestinationPaymentMethodDetails = destinationPaymentMethodDetails //required
                TreasuryOutboundPayment.EndUserDetails = endUserDetails //required
                TreasuryOutboundPayment.ExpectedArrivalDate = expectedArrivalDate //required
                TreasuryOutboundPayment.FinancialAccount = financialAccount //required
                TreasuryOutboundPayment.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryOutboundPayment.Id = id //required
                TreasuryOutboundPayment.Livemode = livemode //required
                TreasuryOutboundPayment.Metadata = metadata //required
                TreasuryOutboundPayment.ReturnedDetails = returnedDetails //required
                TreasuryOutboundPayment.StatementDescriptor = statementDescriptor //required
                TreasuryOutboundPayment.Status = status //required
                TreasuryOutboundPayment.StatusTransitions = statusTransitions //required
                TreasuryOutboundPayment.Transaction = transaction //required
            }

    and TreasuryOutboundPaymentStatus =
        | Canceled
        | Failed
        | Posted
        | Processing
        | Returned

    and TreasuryOutboundPaymentTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///Use OutboundTransfers to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
    ///Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
    and TreasuryOutboundTransfer = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Returns `true` if the object can be canceled, and `false` otherwise.
        Cancelable: bool
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string option
        ///The PaymentMethod used as the payment instrument for an OutboundTransfer.
        DestinationPaymentMethod: string option
        DestinationPaymentMethodDetails: OutboundTransfersPaymentMethodDetails
        ///The date when funds are expected to arrive in the destination account.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ExpectedArrivalDate: DateTime
        ///The FinancialAccount that funds were pulled from.
        FinancialAccount: string
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///Details about a returned OutboundTransfer. Only set when the status is `returned`.
        ReturnedDetails: TreasuryOutboundTransfersResourceReturnedDetails option
        ///Information about the OutboundTransfer to be sent to the recipient account.
        StatementDescriptor: string
        ///Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.
        Status: TreasuryOutboundTransferStatus
        StatusTransitions: TreasuryOutboundTransfersResourceStatusTransitions
        ///The Transaction associated with this object.
        Transaction: TreasuryOutboundTransferTransaction'AnyOf
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.outbound_transfer"

        static member New (amount: int, cancelable: bool, created: DateTime, currency: string, description: string option, destinationPaymentMethod: string option, destinationPaymentMethodDetails: OutboundTransfersPaymentMethodDetails, expectedArrivalDate: DateTime, financialAccount: string, hostedRegulatoryReceiptUrl: string option, id: string, livemode: bool, metadata: Map<string, string>, returnedDetails: TreasuryOutboundTransfersResourceReturnedDetails option, statementDescriptor: string, status: TreasuryOutboundTransferStatus, statusTransitions: TreasuryOutboundTransfersResourceStatusTransitions, transaction: TreasuryOutboundTransferTransaction'AnyOf) =
            {
                TreasuryOutboundTransfer.Amount = amount //required
                TreasuryOutboundTransfer.Cancelable = cancelable //required
                TreasuryOutboundTransfer.Created = created //required
                TreasuryOutboundTransfer.Currency = currency //required
                TreasuryOutboundTransfer.Description = description //required
                TreasuryOutboundTransfer.DestinationPaymentMethod = destinationPaymentMethod //required
                TreasuryOutboundTransfer.DestinationPaymentMethodDetails = destinationPaymentMethodDetails //required
                TreasuryOutboundTransfer.ExpectedArrivalDate = expectedArrivalDate //required
                TreasuryOutboundTransfer.FinancialAccount = financialAccount //required
                TreasuryOutboundTransfer.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryOutboundTransfer.Id = id //required
                TreasuryOutboundTransfer.Livemode = livemode //required
                TreasuryOutboundTransfer.Metadata = metadata //required
                TreasuryOutboundTransfer.ReturnedDetails = returnedDetails //required
                TreasuryOutboundTransfer.StatementDescriptor = statementDescriptor //required
                TreasuryOutboundTransfer.Status = status //required
                TreasuryOutboundTransfer.StatusTransitions = statusTransitions //required
                TreasuryOutboundTransfer.Transaction = transaction //required
            }

    and TreasuryOutboundTransferStatus =
        | Canceled
        | Failed
        | Posted
        | Processing
        | Returned

    and TreasuryOutboundTransferTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
    and TreasuryReceivedCredit = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string
        ///Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
        FailureCode: TreasuryReceivedCreditFailureCode option
        ///The FinancialAccount that received the funds.
        FinancialAccount: string option
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        InitiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
        LinkedFlows: TreasuryReceivedCreditsResourceLinkedFlows
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The rails used to send the funds.
        Network: TreasuryReceivedCreditNetwork
        ///Details describing when a ReceivedCredit may be reversed.
        ReversalDetails: TreasuryReceivedCreditsResourceReversalDetails option
        ///Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.
        Status: TreasuryReceivedCreditStatus
        ///The Transaction associated with this object.
        Transaction: TreasuryReceivedCreditTransaction'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.received_credit"

        static member New (amount: int, created: DateTime, currency: string, description: string, failureCode: TreasuryReceivedCreditFailureCode option, financialAccount: string option, hostedRegulatoryReceiptUrl: string option, id: string, initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails, linkedFlows: TreasuryReceivedCreditsResourceLinkedFlows, livemode: bool, network: TreasuryReceivedCreditNetwork, reversalDetails: TreasuryReceivedCreditsResourceReversalDetails option, status: TreasuryReceivedCreditStatus, transaction: TreasuryReceivedCreditTransaction'AnyOf option) =
            {
                TreasuryReceivedCredit.Amount = amount //required
                TreasuryReceivedCredit.Created = created //required
                TreasuryReceivedCredit.Currency = currency //required
                TreasuryReceivedCredit.Description = description //required
                TreasuryReceivedCredit.FailureCode = failureCode //required
                TreasuryReceivedCredit.FinancialAccount = financialAccount //required
                TreasuryReceivedCredit.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryReceivedCredit.Id = id //required
                TreasuryReceivedCredit.InitiatingPaymentMethodDetails = initiatingPaymentMethodDetails //required
                TreasuryReceivedCredit.LinkedFlows = linkedFlows //required
                TreasuryReceivedCredit.Livemode = livemode //required
                TreasuryReceivedCredit.Network = network //required
                TreasuryReceivedCredit.ReversalDetails = reversalDetails //required
                TreasuryReceivedCredit.Status = status //required
                TreasuryReceivedCredit.Transaction = transaction //required
            }

    and TreasuryReceivedCreditFailureCode =
        | AccountClosed
        | AccountFrozen
        | Other

    and TreasuryReceivedCreditNetwork =
        | Ach
        | Card
        | Stripe
        | UsDomesticWire

    and TreasuryReceivedCreditStatus =
        | Failed
        | Succeeded

    and TreasuryReceivedCreditTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
    and TreasuryReceivedDebit = {
        ///Amount (in cents) transferred.
        Amount: int
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string
        ///Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
        FailureCode: TreasuryReceivedDebitFailureCode option
        ///The FinancialAccount that funds were pulled from.
        FinancialAccount: string option
        ///A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
        HostedRegulatoryReceiptUrl: string option
        ///Unique identifier for the object.
        Id: string
        InitiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails option
        LinkedFlows: TreasuryReceivedDebitsResourceLinkedFlows
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The network used for the ReceivedDebit.
        Network: TreasuryReceivedDebitNetwork
        ///Details describing when a ReceivedDebit might be reversed.
        ReversalDetails: TreasuryReceivedDebitsResourceReversalDetails option
        ///Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
        Status: TreasuryReceivedDebitStatus
        ///The Transaction associated with this object.
        Transaction: TreasuryReceivedDebitTransaction'AnyOf option
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.received_debit"

        static member New (amount: int, created: DateTime, currency: string, description: string, failureCode: TreasuryReceivedDebitFailureCode option, financialAccount: string option, hostedRegulatoryReceiptUrl: string option, id: string, linkedFlows: TreasuryReceivedDebitsResourceLinkedFlows, livemode: bool, network: TreasuryReceivedDebitNetwork, reversalDetails: TreasuryReceivedDebitsResourceReversalDetails option, status: TreasuryReceivedDebitStatus, transaction: TreasuryReceivedDebitTransaction'AnyOf option, ?initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails) =
            {
                TreasuryReceivedDebit.Amount = amount //required
                TreasuryReceivedDebit.Created = created //required
                TreasuryReceivedDebit.Currency = currency //required
                TreasuryReceivedDebit.Description = description //required
                TreasuryReceivedDebit.FailureCode = failureCode //required
                TreasuryReceivedDebit.FinancialAccount = financialAccount //required
                TreasuryReceivedDebit.HostedRegulatoryReceiptUrl = hostedRegulatoryReceiptUrl //required
                TreasuryReceivedDebit.Id = id //required
                TreasuryReceivedDebit.LinkedFlows = linkedFlows //required
                TreasuryReceivedDebit.Livemode = livemode //required
                TreasuryReceivedDebit.Network = network //required
                TreasuryReceivedDebit.ReversalDetails = reversalDetails //required
                TreasuryReceivedDebit.Status = status //required
                TreasuryReceivedDebit.Transaction = transaction //required
                TreasuryReceivedDebit.InitiatingPaymentMethodDetails = initiatingPaymentMethodDetails
            }

    and TreasuryReceivedDebitFailureCode =
        | AccountClosed
        | AccountFrozen
        | InsufficientFunds
        | Other

    and TreasuryReceivedDebitNetwork =
        | Ach
        | Card
        | Stripe

    and TreasuryReceivedDebitStatus =
        | Failed
        | Succeeded

    and TreasuryReceivedDebitTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    ///Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
    and TreasuryTransaction = {
        ///Amount (in cents) transferred.
        Amount: int
        BalanceImpact: TreasuryTransactionsResourceBalanceImpact
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///An arbitrary string attached to the object. Often useful for displaying to users.
        Description: string
        ///A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
        Entries: TreasuryTransactionEntries option
        ///The FinancialAccount associated with this object.
        FinancialAccount: string
        ///ID of the flow that created the Transaction.
        Flow: string option
        ///Details of the flow that created the Transaction.
        FlowDetails: TreasuryTransactionsResourceFlowDetails option
        ///Type of the flow that created the Transaction.
        FlowType: TreasuryTransactionFlowType
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Status of the Transaction.
        Status: TreasuryTransactionStatus
        StatusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.transaction"

        static member New (amount: int, balanceImpact: TreasuryTransactionsResourceBalanceImpact, created: DateTime, currency: string, description: string, entries: TreasuryTransactionEntries option, financialAccount: string, flow: string option, flowDetails: TreasuryTransactionsResourceFlowDetails option, flowType: TreasuryTransactionFlowType, id: string, livemode: bool, status: TreasuryTransactionStatus, statusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions) =
            {
                TreasuryTransaction.Amount = amount //required
                TreasuryTransaction.BalanceImpact = balanceImpact //required
                TreasuryTransaction.Created = created //required
                TreasuryTransaction.Currency = currency //required
                TreasuryTransaction.Description = description //required
                TreasuryTransaction.Entries = entries //required
                TreasuryTransaction.FinancialAccount = financialAccount //required
                TreasuryTransaction.Flow = flow //required
                TreasuryTransaction.FlowDetails = flowDetails //required
                TreasuryTransaction.FlowType = flowType //required
                TreasuryTransaction.Id = id //required
                TreasuryTransaction.Livemode = livemode //required
                TreasuryTransaction.Status = status //required
                TreasuryTransaction.StatusTransitions = statusTransitions //required
            }

    and TreasuryTransactionFlowType =
        | CreditReversal
        | DebitReversal
        | InboundTransfer
        | IssuingAuthorization
        | Other
        | OutboundPayment
        | OutboundTransfer
        | ReceivedCredit
        | ReceivedDebit

    and TreasuryTransactionStatus =
        | Open
        | Posted
        | Void

    ///A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
    and TreasuryTransactionEntries = {
        ///Details about each object.
        Data: TreasuryTransactionEntry list
        ///True if this list has another page of items after this one that can be fetched.
        HasMore: bool
        ///The URL where this list can be accessed.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        member _.Object = "list"

        static member New (data: TreasuryTransactionEntry list, hasMore: bool, url: string) =
            {
                TreasuryTransactionEntries.Data = data //required
                TreasuryTransactionEntries.HasMore = hasMore //required
                TreasuryTransactionEntries.Url = url //required
            }

    ///TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
    and TreasuryTransactionEntry = {
        BalanceImpact: TreasuryTransactionsResourceBalanceImpact
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        Currency: string
        ///When the TransactionEntry will impact the FinancialAccount's balance.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]EffectiveAt: DateTime
        ///The FinancialAccount associated with this object.
        FinancialAccount: string
        ///Token of the flow associated with the TransactionEntry.
        Flow: string option
        ///Details of the flow associated with the TransactionEntry.
        FlowDetails: TreasuryTransactionsResourceFlowDetails option
        ///Type of the flow associated with the TransactionEntry.
        FlowType: TreasuryTransactionEntryFlowType
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The Transaction associated with this object.
        Transaction: TreasuryTransactionEntryTransaction'AnyOf
        ///The specific money movement that generated the TransactionEntry.
        Type: TreasuryTransactionEntryType
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "treasury.transaction_entry"

        static member New (balanceImpact: TreasuryTransactionsResourceBalanceImpact, created: DateTime, currency: string, effectiveAt: DateTime, financialAccount: string, flow: string option, flowDetails: TreasuryTransactionsResourceFlowDetails option, flowType: TreasuryTransactionEntryFlowType, id: string, livemode: bool, transaction: TreasuryTransactionEntryTransaction'AnyOf, ``type``: TreasuryTransactionEntryType) =
            {
                TreasuryTransactionEntry.BalanceImpact = balanceImpact //required
                TreasuryTransactionEntry.Created = created //required
                TreasuryTransactionEntry.Currency = currency //required
                TreasuryTransactionEntry.EffectiveAt = effectiveAt //required
                TreasuryTransactionEntry.FinancialAccount = financialAccount //required
                TreasuryTransactionEntry.Flow = flow //required
                TreasuryTransactionEntry.FlowDetails = flowDetails //required
                TreasuryTransactionEntry.FlowType = flowType //required
                TreasuryTransactionEntry.Id = id //required
                TreasuryTransactionEntry.Livemode = livemode //required
                TreasuryTransactionEntry.Transaction = transaction //required
                TreasuryTransactionEntry.Type = ``type`` //required
            }

    and TreasuryTransactionEntryFlowType =
        | CreditReversal
        | DebitReversal
        | InboundTransfer
        | IssuingAuthorization
        | Other
        | OutboundPayment
        | OutboundTransfer
        | ReceivedCredit
        | ReceivedDebit

    and TreasuryTransactionEntryTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    and TreasuryTransactionEntryType =
        | CreditReversal
        | CreditReversalPosting
        | DebitReversal
        | InboundTransfer
        | InboundTransferReturn
        | IssuingAuthorizationHold
        | IssuingAuthorizationRelease
        | Other
        | OutboundPayment
        | OutboundPaymentCancellation
        | OutboundPaymentFailure
        | OutboundPaymentPosting
        | OutboundPaymentReturn
        | OutboundTransfer
        | OutboundTransferCancellation
        | OutboundTransferFailure
        | OutboundTransferPosting
        | OutboundTransferReturn
        | ReceivedCredit
        | ReceivedDebit

    ///ABA Records contain U.S. bank account details per the ABA format.
    and TreasuryFinancialAccountsResourceAbaRecord = {
        ///The name of the person or business that owns the bank account.
        AccountHolderName: string
        ///The account number.
        AccountNumber: string option
        ///The last four characters of the account number.
        [<JsonField(Name="account_number_last4")>]AccountNumberLast4: string
        ///Name of the bank.
        BankName: string
        ///Routing number for the account.
        RoutingNumber: string
    }
    with
        static member New (accountHolderName: string, accountNumber: string option, accountNumberLast4: string, bankName: string, routingNumber: string) =
            {
                TreasuryFinancialAccountsResourceAbaRecord.AccountHolderName = accountHolderName //required
                TreasuryFinancialAccountsResourceAbaRecord.AccountNumber = accountNumber //required
                TreasuryFinancialAccountsResourceAbaRecord.AccountNumberLast4 = accountNumberLast4 //required
                TreasuryFinancialAccountsResourceAbaRecord.BankName = bankName //required
                TreasuryFinancialAccountsResourceAbaRecord.RoutingNumber = routingNumber //required
            }

    ///Toggle settings for enabling/disabling the ABA address feature
    and TreasuryFinancialAccountsResourceAbaToggleSettings = {
        ///Whether the FinancialAccount should have the Feature.
        Requested: bool
        ///Whether the Feature is operational.
        Status: TreasuryFinancialAccountsResourceAbaToggleSettingsStatus
        ///Additional details; includes at least one entry when the status is not `active`.
        StatusDetails: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails list
    }
    with
        static member New (requested: bool, status: TreasuryFinancialAccountsResourceAbaToggleSettingsStatus, statusDetails: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails list) =
            {
                TreasuryFinancialAccountsResourceAbaToggleSettings.Requested = requested //required
                TreasuryFinancialAccountsResourceAbaToggleSettings.Status = status //required
                TreasuryFinancialAccountsResourceAbaToggleSettings.StatusDetails = statusDetails //required
            }

    and TreasuryFinancialAccountsResourceAbaToggleSettingsStatus =
        | Active
        | Pending
        | Restricted

    ///Toggle settings for enabling/disabling an ACH specific feature
    and TreasuryFinancialAccountsResourceAchToggleSettings = {
        ///Whether the FinancialAccount should have the Feature.
        Requested: bool
        ///Whether the Feature is operational.
        Status: TreasuryFinancialAccountsResourceAchToggleSettingsStatus
        ///Additional details; includes at least one entry when the status is not `active`.
        StatusDetails: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails list
    }
    with
        static member New (requested: bool, status: TreasuryFinancialAccountsResourceAchToggleSettingsStatus, statusDetails: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails list) =
            {
                TreasuryFinancialAccountsResourceAchToggleSettings.Requested = requested //required
                TreasuryFinancialAccountsResourceAchToggleSettings.Status = status //required
                TreasuryFinancialAccountsResourceAchToggleSettings.StatusDetails = statusDetails //required
            }

    and TreasuryFinancialAccountsResourceAchToggleSettingsStatus =
        | Active
        | Pending
        | Restricted

    ///Balance information for the FinancialAccount
    and TreasuryFinancialAccountsResourceBalance = {
        ///Funds the user can spend right now.
        Cash: Map<string, string list>
        ///Funds not spendable yet, but will become available at a later time.
        InboundPending: Map<string, string list>
        ///Funds in the account, but not spendable because they are being held for pending outbound flows.
        OutboundPending: Map<string, string list>
    }
    with
        static member New (cash: Map<string, string list>, inboundPending: Map<string, string list>, outboundPending: Map<string, string list>) =
            {
                TreasuryFinancialAccountsResourceBalance.Cash = cash //required
                TreasuryFinancialAccountsResourceBalance.InboundPending = inboundPending //required
                TreasuryFinancialAccountsResourceBalance.OutboundPending = outboundPending //required
            }

    and TreasuryFinancialAccountsResourceClosedStatusDetails = {
        ///The array that contains reasons for a FinancialAccount closure.
        Reasons: TreasuryFinancialAccountsResourceClosedStatusDetailsReasons list
    }
    with
        static member New (reasons: TreasuryFinancialAccountsResourceClosedStatusDetailsReasons list) =
            {
                TreasuryFinancialAccountsResourceClosedStatusDetails.Reasons = reasons //required
            }

    and TreasuryFinancialAccountsResourceClosedStatusDetailsReasons =
        | AccountRejected
        | ClosedByPlatform
        | Other

    ///FinancialAddresses contain identifying information that resolves to a FinancialAccount.
    and TreasuryFinancialAccountsResourceFinancialAddress = {
        Aba: TreasuryFinancialAccountsResourceAbaRecord option
        ///The list of networks that the address supports
        SupportedNetworks: TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks list option
    }
    with
        ///The type of financial address
        member _.Type = "aba"

        static member New (?aba: TreasuryFinancialAccountsResourceAbaRecord, ?supportedNetworks: TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks list) =
            {
                TreasuryFinancialAccountsResourceFinancialAddress.Aba = aba
                TreasuryFinancialAccountsResourceFinancialAddress.SupportedNetworks = supportedNetworks
            }

    and TreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks =
        | Ach
        | UsDomesticWire

    ///Settings related to Financial Addresses features on a Financial Account
    and TreasuryFinancialAccountsResourceFinancialAddressesFeatures = {
        Aba: TreasuryFinancialAccountsResourceAbaToggleSettings option
    }
    with
        static member New (?aba: TreasuryFinancialAccountsResourceAbaToggleSettings) =
            {
                TreasuryFinancialAccountsResourceFinancialAddressesFeatures.Aba = aba
            }

    ///InboundTransfers contains inbound transfers features for a FinancialAccount.
    and TreasuryFinancialAccountsResourceInboundTransfers = {
        Ach: TreasuryFinancialAccountsResourceAchToggleSettings option
    }
    with
        static member New (?ach: TreasuryFinancialAccountsResourceAchToggleSettings) =
            {
                TreasuryFinancialAccountsResourceInboundTransfers.Ach = ach
            }

    ///Settings related to Outbound Payments features on a Financial Account
    and TreasuryFinancialAccountsResourceOutboundPayments = {
        Ach: TreasuryFinancialAccountsResourceAchToggleSettings option
        UsDomesticWire: TreasuryFinancialAccountsResourceToggleSettings option
    }
    with
        static member New (?ach: TreasuryFinancialAccountsResourceAchToggleSettings, ?usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings) =
            {
                TreasuryFinancialAccountsResourceOutboundPayments.Ach = ach
                TreasuryFinancialAccountsResourceOutboundPayments.UsDomesticWire = usDomesticWire
            }

    ///OutboundTransfers contains outbound transfers features for a FinancialAccount.
    and TreasuryFinancialAccountsResourceOutboundTransfers = {
        Ach: TreasuryFinancialAccountsResourceAchToggleSettings option
        UsDomesticWire: TreasuryFinancialAccountsResourceToggleSettings option
    }
    with
        static member New (?ach: TreasuryFinancialAccountsResourceAchToggleSettings, ?usDomesticWire: TreasuryFinancialAccountsResourceToggleSettings) =
            {
                TreasuryFinancialAccountsResourceOutboundTransfers.Ach = ach
                TreasuryFinancialAccountsResourceOutboundTransfers.UsDomesticWire = usDomesticWire
            }

    ///Restrictions that a Connect Platform has placed on this FinancialAccount.
    and TreasuryFinancialAccountsResourcePlatformRestrictions = {
        ///Restricts all inbound money movement.
        InboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows option
        ///Restricts all outbound money movement.
        OutboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows option
    }
    with
        static member New (inboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows option, outboundFlows: TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows option) =
            {
                TreasuryFinancialAccountsResourcePlatformRestrictions.InboundFlows = inboundFlows //required
                TreasuryFinancialAccountsResourcePlatformRestrictions.OutboundFlows = outboundFlows //required
            }

    and TreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows =
        | Restricted
        | Unrestricted

    and TreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows =
        | Restricted
        | Unrestricted

    and TreasuryFinancialAccountsResourceStatusDetails = {
        ///Details related to the closure of this FinancialAccount
        Closed: TreasuryFinancialAccountsResourceClosedStatusDetails option
    }
    with
        static member New (closed: TreasuryFinancialAccountsResourceClosedStatusDetails option) =
            {
                TreasuryFinancialAccountsResourceStatusDetails.Closed = closed //required
            }

    ///Toggle settings for enabling/disabling a feature
    and TreasuryFinancialAccountsResourceToggleSettings = {
        ///Whether the FinancialAccount should have the Feature.
        Requested: bool
        ///Whether the Feature is operational.
        Status: TreasuryFinancialAccountsResourceToggleSettingsStatus
        ///Additional details; includes at least one entry when the status is not `active`.
        StatusDetails: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails list
    }
    with
        static member New (requested: bool, status: TreasuryFinancialAccountsResourceToggleSettingsStatus, statusDetails: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails list) =
            {
                TreasuryFinancialAccountsResourceToggleSettings.Requested = requested //required
                TreasuryFinancialAccountsResourceToggleSettings.Status = status //required
                TreasuryFinancialAccountsResourceToggleSettings.StatusDetails = statusDetails //required
            }

    and TreasuryFinancialAccountsResourceToggleSettingsStatus =
        | Active
        | Pending
        | Restricted

    ///Additional details on the FinancialAccount Features information.
    and TreasuryFinancialAccountsResourceTogglesSettingStatusDetails = {
        ///Represents the reason why the status is `pending` or `restricted`.
        Code: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode
        ///Represents what the user should do, if anything, to activate the Feature.
        Resolution: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution option
        ///The `platform_restrictions` that are restricting this Feature.
        Restriction: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction option
    }
    with
        static member New (code: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode, resolution: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution option, ?restriction: TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction) =
            {
                TreasuryFinancialAccountsResourceTogglesSettingStatusDetails.Code = code //required
                TreasuryFinancialAccountsResourceTogglesSettingStatusDetails.Resolution = resolution //required
                TreasuryFinancialAccountsResourceTogglesSettingStatusDetails.Restriction = restriction
            }

    and TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode =
        | Activating
        | CapabilityNotRequested
        | FinancialAccountClosed
        | RejectedOther
        | RejectedUnsupportedBusiness
        | RequirementsPastDue
        | RequirementsPendingVerification
        | RestrictedByPlatform
        | RestrictedOther

    and TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution =
        | ContactStripe
        | ProvideInformation
        | RemoveRestriction

    and TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction =
        | InboundFlows
        | OutboundFlows

    and TreasuryInboundTransfersResourceFailureDetails = {
        ///Reason for the failure.
        Code: TreasuryInboundTransfersResourceFailureDetailsCode
    }
    with
        static member New (code: TreasuryInboundTransfersResourceFailureDetailsCode) =
            {
                TreasuryInboundTransfersResourceFailureDetails.Code = code //required
            }

    and TreasuryInboundTransfersResourceFailureDetailsCode =
        | AccountClosed
        | AccountFrozen
        | BankAccountRestricted
        | BankOwnershipChanged
        | DebitNotAuthorized
        | IncorrectAccountHolderAddress
        | IncorrectAccountHolderName
        | IncorrectAccountHolderTaxId
        | InsufficientFunds
        | InvalidAccountNumber
        | InvalidCurrency
        | NoAccount
        | Other

    and TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows = {
        ///If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return.
        ReceivedDebit: string option
    }
    with
        static member New (receivedDebit: string option) =
            {
                TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows.ReceivedDebit = receivedDebit //required
            }

    and TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions = {
        ///Timestamp describing when an InboundTransfer changed status to `canceled`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Timestamp describing when an InboundTransfer changed status to `failed`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]FailedAt: DateTime option
        ///Timestamp describing when an InboundTransfer changed status to `succeeded`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]SucceededAt: DateTime option
    }
    with
        static member New (failedAt: DateTime option, succeededAt: DateTime option, ?canceledAt: DateTime option) =
            {
                TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions.FailedAt = failedAt //required
                TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions.SucceededAt = succeededAt //required
                TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions.CanceledAt = canceledAt |> Option.flatten
            }

    and TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails = {
        ///IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked.
        IpAddress: string option
        ///`true`` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`.
        Present: bool
    }
    with
        static member New (ipAddress: string option, present: bool) =
            {
                TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails.IpAddress = ipAddress //required
                TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails.Present = present //required
            }

    and TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions = {
        ///Timestamp describing when an OutboundPayment changed status to `canceled`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Timestamp describing when an OutboundPayment changed status to `failed`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]FailedAt: DateTime option
        ///Timestamp describing when an OutboundPayment changed status to `posted`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PostedAt: DateTime option
        ///Timestamp describing when an OutboundPayment changed status to `returned`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReturnedAt: DateTime option
    }
    with
        static member New (canceledAt: DateTime option, failedAt: DateTime option, postedAt: DateTime option, returnedAt: DateTime option) =
            {
                TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions.CanceledAt = canceledAt //required
                TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions.FailedAt = failedAt //required
                TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions.PostedAt = postedAt //required
                TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions.ReturnedAt = returnedAt //required
            }

    and TreasuryOutboundPaymentsResourceReturnedStatus = {
        ///Reason for the return.
        Code: TreasuryOutboundPaymentsResourceReturnedStatusCode
        ///The Transaction associated with this object.
        Transaction: TreasuryOutboundPaymentsResourceReturnedStatusTransaction'AnyOf
    }
    with
        static member New (code: TreasuryOutboundPaymentsResourceReturnedStatusCode, transaction: TreasuryOutboundPaymentsResourceReturnedStatusTransaction'AnyOf) =
            {
                TreasuryOutboundPaymentsResourceReturnedStatus.Code = code //required
                TreasuryOutboundPaymentsResourceReturnedStatus.Transaction = transaction //required
            }

    and TreasuryOutboundPaymentsResourceReturnedStatusCode =
        | AccountClosed
        | AccountFrozen
        | BankAccountRestricted
        | BankOwnershipChanged
        | Declined
        | IncorrectAccountHolderName
        | InvalidAccountNumber
        | InvalidCurrency
        | NoAccount
        | Other

    and TreasuryOutboundPaymentsResourceReturnedStatusTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    and TreasuryOutboundTransfersResourceReturnedDetails = {
        ///Reason for the return.
        Code: TreasuryOutboundTransfersResourceReturnedDetailsCode
        ///The Transaction associated with this object.
        Transaction: TreasuryOutboundTransfersResourceReturnedDetailsTransaction'AnyOf
    }
    with
        static member New (code: TreasuryOutboundTransfersResourceReturnedDetailsCode, transaction: TreasuryOutboundTransfersResourceReturnedDetailsTransaction'AnyOf) =
            {
                TreasuryOutboundTransfersResourceReturnedDetails.Code = code //required
                TreasuryOutboundTransfersResourceReturnedDetails.Transaction = transaction //required
            }

    and TreasuryOutboundTransfersResourceReturnedDetailsCode =
        | AccountClosed
        | AccountFrozen
        | BankAccountRestricted
        | BankOwnershipChanged
        | Declined
        | IncorrectAccountHolderName
        | InvalidAccountNumber
        | InvalidCurrency
        | NoAccount
        | Other

    and TreasuryOutboundTransfersResourceReturnedDetailsTransaction'AnyOf =
        | String of string
        | TreasuryTransaction of TreasuryTransaction

    and TreasuryOutboundTransfersResourceStatusTransitions = {
        ///Timestamp describing when an OutboundTransfer changed status to `canceled`
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CanceledAt: DateTime option
        ///Timestamp describing when an OutboundTransfer changed status to `failed`
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]FailedAt: DateTime option
        ///Timestamp describing when an OutboundTransfer changed status to `posted`
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PostedAt: DateTime option
        ///Timestamp describing when an OutboundTransfer changed status to `returned`
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]ReturnedAt: DateTime option
    }
    with
        static member New (canceledAt: DateTime option, failedAt: DateTime option, postedAt: DateTime option, returnedAt: DateTime option) =
            {
                TreasuryOutboundTransfersResourceStatusTransitions.CanceledAt = canceledAt //required
                TreasuryOutboundTransfersResourceStatusTransitions.FailedAt = failedAt //required
                TreasuryOutboundTransfersResourceStatusTransitions.PostedAt = postedAt //required
                TreasuryOutboundTransfersResourceStatusTransitions.ReturnedAt = returnedAt //required
            }

    and TreasuryReceivedCreditsResourceLinkedFlows = {
        ///The CreditReversal created as a result of this ReceivedCredit being reversed.
        CreditReversal: string option
        ///Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
        IssuingAuthorization: string option
        ///Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.
        IssuingTransaction: string option
        ///ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals.
        SourceFlow: string option
        ///The expandable object of the source flow.
        SourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetails option
        ///The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).
        SourceFlowType: string option
    }
    with
        static member New (creditReversal: string option, issuingAuthorization: string option, issuingTransaction: string option, sourceFlow: string option, sourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetails option, sourceFlowType: string option) =
            {
                TreasuryReceivedCreditsResourceLinkedFlows.CreditReversal = creditReversal //required
                TreasuryReceivedCreditsResourceLinkedFlows.IssuingAuthorization = issuingAuthorization //required
                TreasuryReceivedCreditsResourceLinkedFlows.IssuingTransaction = issuingTransaction //required
                TreasuryReceivedCreditsResourceLinkedFlows.SourceFlow = sourceFlow //required
                TreasuryReceivedCreditsResourceLinkedFlows.SourceFlowDetails = sourceFlowDetails //required
                TreasuryReceivedCreditsResourceLinkedFlows.SourceFlowType = sourceFlowType //required
            }

    and TreasuryReceivedCreditsResourceReversalDetails = {
        ///Time before which a ReceivedCredit can be reversed.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Deadline: DateTime option
        ///Set if a ReceivedCredit cannot be reversed.
        RestrictedReason: TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason option
    }
    with
        static member New (deadline: DateTime option, restrictedReason: TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason option) =
            {
                TreasuryReceivedCreditsResourceReversalDetails.Deadline = deadline //required
                TreasuryReceivedCreditsResourceReversalDetails.RestrictedReason = restrictedReason //required
            }

    and TreasuryReceivedCreditsResourceReversalDetailsRestrictedReason =
        | AlreadyReversed
        | DeadlinePassed
        | NetworkRestricted
        | Other
        | SourceFlowRestricted

    and TreasuryReceivedCreditsResourceSourceFlowsDetails = {
        CreditReversal: TreasuryCreditReversal option
        OutboundPayment: TreasuryOutboundPayment option
        Payout: Payout option
        ///The type of the source flow that originated the ReceivedCredit.
        Type: TreasuryReceivedCreditsResourceSourceFlowsDetailsType
    }
    with
        static member New (``type``: TreasuryReceivedCreditsResourceSourceFlowsDetailsType, ?creditReversal: TreasuryCreditReversal, ?outboundPayment: TreasuryOutboundPayment, ?payout: Payout) =
            {
                TreasuryReceivedCreditsResourceSourceFlowsDetails.Type = ``type`` //required
                TreasuryReceivedCreditsResourceSourceFlowsDetails.CreditReversal = creditReversal
                TreasuryReceivedCreditsResourceSourceFlowsDetails.OutboundPayment = outboundPayment
                TreasuryReceivedCreditsResourceSourceFlowsDetails.Payout = payout
            }

    and TreasuryReceivedCreditsResourceSourceFlowsDetailsType =
        | CreditReversal
        | Other
        | OutboundPayment
        | Payout

    and TreasuryReceivedCreditsResourceStatusTransitions = {
        ///Timestamp describing when the CreditReversal changed status to `posted`
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PostedAt: DateTime option
    }
    with
        static member New (postedAt: DateTime option) =
            {
                TreasuryReceivedCreditsResourceStatusTransitions.PostedAt = postedAt //required
            }

    and TreasuryReceivedDebitsResourceDebitReversalLinkedFlows = {
        ///Set if there is an Issuing dispute associated with the DebitReversal.
        IssuingDispute: string option
    }
    with
        static member New (issuingDispute: string option) =
            {
                TreasuryReceivedDebitsResourceDebitReversalLinkedFlows.IssuingDispute = issuingDispute //required
            }

    and TreasuryReceivedDebitsResourceLinkedFlows = {
        ///The DebitReversal created as a result of this ReceivedDebit being reversed.
        DebitReversal: string option
        ///Set if the ReceivedDebit is associated with an InboundTransfer's return of funds.
        InboundTransfer: string option
        ///Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
        IssuingAuthorization: string option
        ///Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object.
        IssuingTransaction: string option
    }
    with
        static member New (debitReversal: string option, inboundTransfer: string option, issuingAuthorization: string option, issuingTransaction: string option) =
            {
                TreasuryReceivedDebitsResourceLinkedFlows.DebitReversal = debitReversal //required
                TreasuryReceivedDebitsResourceLinkedFlows.InboundTransfer = inboundTransfer //required
                TreasuryReceivedDebitsResourceLinkedFlows.IssuingAuthorization = issuingAuthorization //required
                TreasuryReceivedDebitsResourceLinkedFlows.IssuingTransaction = issuingTransaction //required
            }

    and TreasuryReceivedDebitsResourceReversalDetails = {
        ///Time before which a ReceivedDebit can be reversed.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Deadline: DateTime option
        ///Set if a ReceivedDebit can't be reversed.
        RestrictedReason: TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason option
    }
    with
        static member New (deadline: DateTime option, restrictedReason: TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason option) =
            {
                TreasuryReceivedDebitsResourceReversalDetails.Deadline = deadline //required
                TreasuryReceivedDebitsResourceReversalDetails.RestrictedReason = restrictedReason //required
            }

    and TreasuryReceivedDebitsResourceReversalDetailsRestrictedReason =
        | AlreadyReversed
        | DeadlinePassed
        | NetworkRestricted
        | Other
        | SourceFlowRestricted

    and TreasuryReceivedDebitsResourceStatusTransitions = {
        ///Timestamp describing when the DebitReversal changed status to `completed`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]CompletedAt: DateTime option
    }
    with
        static member New (completedAt: DateTime option) =
            {
                TreasuryReceivedDebitsResourceStatusTransitions.CompletedAt = completedAt //required
            }

    and TreasurySharedResourceBillingDetails = {
        Address: Address
        ///Email address.
        Email: string option
        ///Full name.
        Name: string option
    }
    with
        static member New (address: Address, email: string option, name: string option) =
            {
                TreasurySharedResourceBillingDetails.Address = address //required
                TreasurySharedResourceBillingDetails.Email = email //required
                TreasurySharedResourceBillingDetails.Name = name //required
            }

    and TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails = {
        BillingDetails: TreasurySharedResourceBillingDetails
        FinancialAccount: ReceivedPaymentMethodDetailsFinancialAccount option
        ///Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
        IssuingCard: string option
        ///Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
        Type: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType
        UsBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount option
    }
    with
        ///Set when `type` is `balance`.
        member _.Balance = "payments"

        static member New (billingDetails: TreasurySharedResourceBillingDetails, ``type``: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType, ?financialAccount: ReceivedPaymentMethodDetailsFinancialAccount, ?issuingCard: string, ?usBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount) =
            {
                TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails.BillingDetails = billingDetails //required
                TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails.Type = ``type`` //required
                TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails.FinancialAccount = financialAccount
                TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails.IssuingCard = issuingCard
                TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails.UsBankAccount = usBankAccount
            }

    and TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType =
        | Balance
        | FinancialAccount
        | IssuingCard
        | Stripe
        | UsBankAccount

    and TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount = {
        ///Bank name.
        BankName: string option
        ///The last four digits of the bank account number.
        [<JsonField(Name="last4")>]Last4: string option
        ///The routing number for the bank account.
        RoutingNumber: string option
    }
    with
        static member New (bankName: string option, last4: string option, routingNumber: string option) =
            {
                TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount.BankName = bankName //required
                TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount.Last4 = last4 //required
                TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount.RoutingNumber = routingNumber //required
            }

    and TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions = {
        ///Timestamp describing when the Transaction changed status to `posted`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]PostedAt: DateTime option
        ///Timestamp describing when the Transaction changed status to `void`.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]VoidAt: DateTime option
    }
    with
        static member New (postedAt: DateTime option, voidAt: DateTime option) =
            {
                TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions.PostedAt = postedAt //required
                TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions.VoidAt = voidAt //required
            }

    ///Change to a FinancialAccount's balance
    and TreasuryTransactionsResourceBalanceImpact = {
        ///The change made to funds the user can spend right now.
        Cash: int
        ///The change made to funds that are not spendable yet, but will become available at a later time.
        InboundPending: int
        ///The change made to funds in the account, but not spendable because they are being held for pending outbound flows.
        OutboundPending: int
    }
    with
        static member New (cash: int, inboundPending: int, outboundPending: int) =
            {
                TreasuryTransactionsResourceBalanceImpact.Cash = cash //required
                TreasuryTransactionsResourceBalanceImpact.InboundPending = inboundPending //required
                TreasuryTransactionsResourceBalanceImpact.OutboundPending = outboundPending //required
            }

    and TreasuryTransactionsResourceFlowDetails = {
        CreditReversal: TreasuryCreditReversal option
        DebitReversal: TreasuryDebitReversal option
        InboundTransfer: TreasuryInboundTransfer option
        IssuingAuthorization: IssuingAuthorization option
        OutboundPayment: TreasuryOutboundPayment option
        OutboundTransfer: TreasuryOutboundTransfer option
        ReceivedCredit: TreasuryReceivedCredit option
        ReceivedDebit: TreasuryReceivedDebit option
        ///Type of the flow that created the Transaction. Set to the same value as `flow_type`.
        Type: TreasuryTransactionsResourceFlowDetailsType
    }
    with
        static member New (``type``: TreasuryTransactionsResourceFlowDetailsType, ?creditReversal: TreasuryCreditReversal, ?debitReversal: TreasuryDebitReversal, ?inboundTransfer: TreasuryInboundTransfer, ?issuingAuthorization: IssuingAuthorization, ?outboundPayment: TreasuryOutboundPayment, ?outboundTransfer: TreasuryOutboundTransfer, ?receivedCredit: TreasuryReceivedCredit, ?receivedDebit: TreasuryReceivedDebit) =
            {
                TreasuryTransactionsResourceFlowDetails.Type = ``type`` //required
                TreasuryTransactionsResourceFlowDetails.CreditReversal = creditReversal
                TreasuryTransactionsResourceFlowDetails.DebitReversal = debitReversal
                TreasuryTransactionsResourceFlowDetails.InboundTransfer = inboundTransfer
                TreasuryTransactionsResourceFlowDetails.IssuingAuthorization = issuingAuthorization
                TreasuryTransactionsResourceFlowDetails.OutboundPayment = outboundPayment
                TreasuryTransactionsResourceFlowDetails.OutboundTransfer = outboundTransfer
                TreasuryTransactionsResourceFlowDetails.ReceivedCredit = receivedCredit
                TreasuryTransactionsResourceFlowDetails.ReceivedDebit = receivedDebit
            }

    and TreasuryTransactionsResourceFlowDetailsType =
        | CreditReversal
        | DebitReversal
        | InboundTransfer
        | IssuingAuthorization
        | Other
        | OutboundPayment
        | OutboundTransfer
        | ReceivedCredit
        | ReceivedDebit

    and UsBankAccountNetworks = {
        ///The preferred network.
        Preferred: string option
        ///All supported networks.
        Supported: UsBankAccountNetworksSupported list
    }
    with
        static member New (preferred: string option, supported: UsBankAccountNetworksSupported list) =
            {
                UsBankAccountNetworks.Preferred = preferred //required
                UsBankAccountNetworks.Supported = supported //required
            }

    and UsBankAccountNetworksSupported =
        | Ach
        | UsDomesticWire

    ///Usage records allow you to report customer usage and metrics to Stripe for
    ///metered billing of subscription prices.
    ///Related guide: [Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing)
    and UsageRecord = {
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///The usage quantity for the specified date.
        Quantity: int
        ///The ID of the subscription item this usage record contains data for.
        SubscriptionItem: string
        ///The timestamp when this usage occurred.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Timestamp: DateTime
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "usage_record"

        static member New (id: string, livemode: bool, quantity: int, subscriptionItem: string, timestamp: DateTime) =
            {
                UsageRecord.Id = id //required
                UsageRecord.Livemode = livemode //required
                UsageRecord.Quantity = quantity //required
                UsageRecord.SubscriptionItem = subscriptionItem //required
                UsageRecord.Timestamp = timestamp //required
            }

    and UsageRecordSummary = {
        ///Unique identifier for the object.
        Id: string
        ///The invoice in which this usage period has been billed for.
        Invoice: string option
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        Period: Period
        ///The ID of the subscription item this summary is describing.
        SubscriptionItem: string
        ///The total usage within this usage period.
        TotalUsage: int
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "usage_record_summary"

        static member New (id: string, invoice: string option, livemode: bool, period: Period, subscriptionItem: string, totalUsage: int) =
            {
                UsageRecordSummary.Id = id //required
                UsageRecordSummary.Invoice = invoice //required
                UsageRecordSummary.Livemode = livemode //required
                UsageRecordSummary.Period = period //required
                UsageRecordSummary.SubscriptionItem = subscriptionItem //required
                UsageRecordSummary.TotalUsage = totalUsage //required
            }

    and VerificationSessionRedaction = {
        ///Indicates whether this object and its related objects have been redacted or not.
        Status: VerificationSessionRedactionStatus
    }
    with
        static member New (status: VerificationSessionRedactionStatus) =
            {
                VerificationSessionRedaction.Status = status //required
            }

    and VerificationSessionRedactionStatus =
        | Processing
        | Redacted

    ///You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
    ///notified about events that happen in your Stripe account or connected
    ///accounts.
    ///Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
    ///Related guide: [Setting up webhooks](https://stripe.com/docs/webhooks/configure)
    and WebhookEndpoint = {
        ///The API version events are rendered as for this webhook endpoint.
        ApiVersion: string option
        ///The ID of the associated Connect application.
        Application: string option
        ///Time at which the object was created. Measured in seconds since the Unix epoch.
        [<JsonField(Transform=typeof<Transforms.DateTimeEpoch>)>]Created: DateTime
        ///An optional description of what the webhook is used for.
        Description: string option
        ///The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
        EnabledEvents: string list
        ///Unique identifier for the object.
        Id: string
        ///Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
        Livemode: bool
        ///Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        Metadata: Map<string, string>
        ///The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.
        Secret: string option
        ///The status of the webhook. It can be `enabled` or `disabled`.
        Status: WebhookEndpointStatus
        ///The URL of the webhook endpoint.
        Url: string
    }
    with
        ///String representing the object's type. Objects of the same type share the same value.
        member _.Object = "webhook_endpoint"

        static member New (apiVersion: string option, application: string option, created: DateTime, description: string option, enabledEvents: string list, id: string, livemode: bool, metadata: Map<string, string>, status: WebhookEndpointStatus, url: string, ?secret: string) =
            {
                WebhookEndpoint.ApiVersion = apiVersion //required
                WebhookEndpoint.Application = application //required
                WebhookEndpoint.Created = created //required
                WebhookEndpoint.Description = description //required
                WebhookEndpoint.EnabledEvents = enabledEvents //required
                WebhookEndpoint.Id = id //required
                WebhookEndpoint.Livemode = livemode //required
                WebhookEndpoint.Metadata = metadata //required
                WebhookEndpoint.Status = status //required
                WebhookEndpoint.Url = url //required
                WebhookEndpoint.Secret = secret
            }

    and WebhookEndpointStatus =
        | Enabled
        | Disabled

